// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using dal.bd2;
using biz.bd2.Entities;
namespace dal.bd2.DBContext
{
    public partial class BD2Context : DbContext
    {
        public BD2Context()
        {
        }

        public BD2Context(DbContextOptions<BD2Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Accionespromocion> Accionespromocions { get; set; }
        public virtual DbSet<Accionespromocionlin> Accionespromocionlins { get; set; }
        public virtual DbSet<Actividade> Actividades { get; set; }
        public virtual DbSet<Acumuladoretencione> Acumuladoretenciones { get; set; }
        public virtual DbSet<AenaCanone> AenaCanones { get; set; }
        public virtual DbSet<AenaContrato> AenaContratos { get; set; }
        public virtual DbSet<AenaSubfamilia> AenaSubfamilias { get; set; }
        public virtual DbSet<AenaVenta> AenaVentas { get; set; }
        public virtual DbSet<Aenadto> Aenadtos { get; set; }
        public virtual DbSet<Aeropuerto> Aeropuertos { get; set; }
        public virtual DbSet<Albcompracab> Albcompracabs { get; set; }
        public virtual DbSet<Albcompracamposlibre> Albcompracamposlibres { get; set; }
        public virtual DbSet<Albcompradto> Albcompradtos { get; set; }
        public virtual DbSet<Albcomprafirma> Albcomprafirmas { get; set; }
        public virtual DbSet<Albcompragasto> Albcompragastos { get; set; }
        public virtual DbSet<Albcompralin> Albcompralins { get; set; }
        public virtual DbSet<Albcompralinamortizacion> Albcompralinamortizacions { get; set; }
        public virtual DbSet<Albcompratalla> Albcompratallas { get; set; }
        public virtual DbSet<Albcompratot> Albcompratots { get; set; }
        public virtual DbSet<Albventacab> Albventacabs { get; set; }
        public virtual DbSet<Albventacamposlibre> Albventacamposlibres { get; set; }
        public virtual DbSet<Albventaconsumicione> Albventaconsumiciones { get; set; }
        public virtual DbSet<Albventaconsumo> Albventaconsumos { get; set; }
        public virtual DbSet<Albventacupone> Albventacupones { get; set; }
        public virtual DbSet<Albventacuponesgenerado> Albventacuponesgenerados { get; set; }
        public virtual DbSet<Albventadto> Albventadtos { get; set; }
        public virtual DbSet<Albventafirma> Albventafirmas { get; set; }
        public virtual DbSet<Albventagp> Albventagps { get; set; }
        public virtual DbSet<Albventalin> Albventalins { get; set; }
        public virtual DbSet<Albventalinpromocione> Albventalinpromociones { get; set; }
        public virtual DbSet<Albventamodif> Albventamodifs { get; set; }
        public virtual DbSet<Albventapag> Albventapags { get; set; }
        public virtual DbSet<Albventapromocione> Albventapromociones { get; set; }
        public virtual DbSet<Albventaregalo> Albventaregalos { get; set; }
        public virtual DbSet<Albventarubrica> Albventarubricas { get; set; }
        public virtual DbSet<Albventatarjeta> Albventatarjetas { get; set; }
        public virtual DbSet<Albventatarjetaembarque> Albventatarjetaembarques { get; set; }
        public virtual DbSet<Albventatot> Albventatots { get; set; }
        public virtual DbSet<Almacen> Almacens { get; set; }
        public virtual DbSet<Almacenesnumempleado> Almacenesnumempleados { get; set; }
        public virtual DbSet<Almacenestarifa> Almacenestarifas { get; set; }
        public virtual DbSet<Almacenesvacacione> Almacenesvacaciones { get; set; }
        public virtual DbSet<Anticipo> Anticipos { get; set; }
        public virtual DbSet<AnulAlbventacab> AnulAlbventacabs { get; set; }
        public virtual DbSet<AnulAlbventacupone> AnulAlbventacupones { get; set; }
        public virtual DbSet<AnulAlbventacuponesgenerado> AnulAlbventacuponesgenerados { get; set; }
        public virtual DbSet<AnulAlbventadto> AnulAlbventadtos { get; set; }
        public virtual DbSet<AnulAlbventafirma> AnulAlbventafirmas { get; set; }
        public virtual DbSet<AnulAlbventalin> AnulAlbventalins { get; set; }
        public virtual DbSet<AnulAlbventalinpromocione> AnulAlbventalinpromociones { get; set; }
        public virtual DbSet<AnulAlbventapromocione> AnulAlbventapromociones { get; set; }
        public virtual DbSet<AnulAlbventaseriesresol> AnulAlbventaseriesresols { get; set; }
        public virtual DbSet<AnulAlbventatot> AnulAlbventatots { get; set; }
        public virtual DbSet<AnulFacturasventacliente> AnulFacturasventaclientes { get; set; }
        public virtual DbSet<AnulFacturasventafirma> AnulFacturasventafirmas { get; set; }
        public virtual DbSet<AnulFacturasventum> AnulFacturasventa { get; set; }
        public virtual DbSet<Arqueo> Arqueos { get; set; }
        public virtual DbSet<Arqueosmodificado> Arqueosmodificados { get; set; }
        public virtual DbSet<Arreglo> Arreglos { get; set; }
        public virtual DbSet<Articulo> Articulos { get; set; }
        public virtual DbSet<Articulo1> Articulos1 { get; set; }
        public virtual DbSet<Articuloscamposlibre> Articuloscamposlibres { get; set; }
        public virtual DbSet<Articuloscomentario> Articuloscomentarios { get; set; }
        public virtual DbSet<Articuloscomentariosweb> Articuloscomentarioswebs { get; set; }
        public virtual DbSet<Articuloscommerce> Articuloscommerces { get; set; }
        public virtual DbSet<Articulosdiarioscliente> Articulosdiariosclientes { get; set; }
        public virtual DbSet<Articulosdoc> Articulosdocs { get; set; }
        public virtual DbSet<Articulosentrada> Articulosentradas { get; set; }
        public virtual DbSet<Articulosentradashorario> Articulosentradashorarios { get; set; }
        public virtual DbSet<Articulosentradastorno> Articulosentradastornos { get; set; }
        public virtual DbSet<Articuloserest> Articuloserests { get; set; }
        public virtual DbSet<Articulosfactporfranja> Articulosfactporfranjas { get; set; }
        public virtual DbSet<Articuloshabitacione> Articuloshabitaciones { get; set; }
        public virtual DbSet<Articuloshabitacionespaxweb> Articuloshabitacionespaxwebs { get; set; }
        public virtual DbSet<Articulosimagen> Articulosimagens { get; set; }
        public virtual DbSet<Articulosimagene> Articulosimagenes { get; set; }
        public virtual DbSet<Articulosimagenerest> Articulosimagenerests { get; set; }
        public virtual DbSet<Articuloslin> Articuloslins { get; set; }
        public virtual DbSet<Articulosperiodicoscliente> Articulosperiodicosclientes { get; set; }
        public virtual DbSet<Articulosregimene> Articulosregimenes { get; set; }
        public virtual DbSet<Articulosrest> Articulosrests { get; set; }
        public virtual DbSet<Articulosretencionesbase> Articulosretencionesbases { get; set; }
        public virtual DbSet<Articulosretencionesiva> Articulosretencionesivas { get; set; }
        public virtual DbSet<Asignaciondptovendedore> Asignaciondptovendedores { get; set; }
        public virtual DbSet<Asignacionrecurso> Asignacionrecursos { get; set; }
        public virtual DbSet<Asunto> Asuntos { get; set; }
        public virtual DbSet<Asuntopreguntasconfigurable> Asuntopreguntasconfigurables { get; set; }
        public virtual DbSet<Asuntosarticulo> Asuntosarticulos { get; set; }
        public virtual DbSet<Asuntosautomatico> Asuntosautomaticos { get; set; }
        public virtual DbSet<Asuntosbloqueo> Asuntosbloqueos { get; set; }
        public virtual DbSet<Asuntoscamposlibre> Asuntoscamposlibres { get; set; }
        public virtual DbSet<Asuntoscontador> Asuntoscontadors { get; set; }
        public virtual DbSet<Atemparticslin8466357> Atemparticslin8466357s { get; set; }
        public virtual DbSet<Atemparticslin8483108> Atemparticslin8483108s { get; set; }
        public virtual DbSet<Atemparticslin992584> Atemparticslin992584s { get; set; }
        public virtual DbSet<Atempil8410662> Atempil8410662s { get; set; }
        public virtual DbSet<Atempil8442312> Atempil8442312s { get; set; }
        public virtual DbSet<Atempil9981307> Atempil9981307s { get; set; }
        public virtual DbSet<Balanceoscab> Balanceoscabs { get; set; }
        public virtual DbSet<Balanceoslin> Balanceoslins { get; set; }
        public virtual DbSet<Balanza> Balanzas { get; set; }
        public virtual DbSet<Balanzasentidade> Balanzasentidades { get; set; }
        public virtual DbSet<Basesdatosexterna> Basesdatosexternas { get; set; }
        public virtual DbSet<BiInforme> BiInformes { get; set; }
        public virtual DbSet<BiInformesUsuario> BiInformesUsuarios { get; set; }
        public virtual DbSet<BiPermisosUsuario> BiPermisosUsuarios { get; set; }
        public virtual DbSet<BloqueosCancelado> BloqueosCancelados { get; set; }
        public virtual DbSet<BloqueosExtractopromocionestarjetum> BloqueosExtractopromocionestarjeta { get; set; }
        public virtual DbSet<BotonesretailIdioma> BotonesretailIdiomas { get; set; }
        public virtual DbSet<Buzonesemail> Buzonesemails { get; set; }
        public virtual DbSet<C3bca2022e2f4f359214F5c77a8b3077> C3bca2022e2f4f359214F5c77a8b3077s { get; set; }
        public virtual DbSet<C88d22d2229b4847B74d6bab21e5b82c> C88d22d2229b4847B74d6bab21e5b82cs { get; set; }
        public virtual DbSet<Cajasasignada> Cajasasignadas { get; set; }
        public virtual DbSet<Camposlibresconfig> Camposlibresconfigs { get; set; }
        public virtual DbSet<Camposlibresporsubtipo> Camposlibresporsubtipos { get; set; }
        public virtual DbSet<Camposlibresportipoasunto> Camposlibresportipoasuntos { get; set; }
        public virtual DbSet<Camposlibresposible> Camposlibresposibles { get; set; }
        public virtual DbSet<Caracteristicashabitacione> Caracteristicashabitaciones { get; set; }
        public virtual DbSet<Cargodtohotel> Cargodtohotels { get; set; }
        public virtual DbSet<Cargodtohotelhabitacione> Cargodtohotelhabitaciones { get; set; }
        public virtual DbSet<Cargodtohotelprecio> Cargodtohotelprecios { get; set; }
        public virtual DbSet<Cargodtohotelregimene> Cargodtohotelregimenes { get; set; }
        public virtual DbSet<Cargodtohoteltarifa> Cargodtohoteltarifas { get; set; }
        public virtual DbSet<Cargosdto> Cargosdtos { get; set; }
        public virtual DbSet<Cargosdtoscliente> Cargosdtosclientes { get; set; }
        public virtual DbSet<Cargosdtosproveedor> Cargosdtosproveedors { get; set; }
        public virtual DbSet<Carritocab> Carritocabs { get; set; }
        public virtual DbSet<Carritolin> Carritolins { get; set; }
        public virtual DbSet<Categorium> Categoria { get; set; }
        public virtual DbSet<Centrale> Centrales { get; set; }
        public virtual DbSet<Centralespermiso> Centralespermisos { get; set; }
        public virtual DbSet<Centralesvalore> Centralesvalores { get; set; }
        public virtual DbSet<Chequeotemp> Chequeotemps { get; set; }
        public virtual DbSet<Ciclosplan> Ciclosplans { get; set; }
        public virtual DbSet<Ciclosplanlin> Ciclosplanlins { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<Clientesactividad> Clientesactividads { get; set; }
        public virtual DbSet<Clientescamposlibre> Clientescamposlibres { get; set; }
        public virtual DbSet<Clientesenvio> Clientesenvios { get; set; }
        public virtual DbSet<Clientesintere> Clientesinteres { get; set; }
        public virtual DbSet<Clientestarifascompra> Clientestarifascompras { get; set; }
        public virtual DbSet<Clientestemporale> Clientestemporales { get; set; }
        public virtual DbSet<Clientestemporalescamposlibre> Clientestemporalescamposlibres { get; set; }
        public virtual DbSet<Clientestemporalesinfo> Clientestemporalesinfos { get; set; }
        public virtual DbSet<Clientesterminal> Clientesterminals { get; set; }
        public virtual DbSet<Clientesvariosinfo> Clientesvariosinfos { get; set; }
        public virtual DbSet<CmrcCamposlibre> CmrcCamposlibres { get; set; }
        public virtual DbSet<CmrcEnlace> CmrcEnlaces { get; set; }
        public virtual DbSet<CmrcEnlacesidioma> CmrcEnlacesidiomas { get; set; }
        public virtual DbSet<CmrcFoto> CmrcFotos { get; set; }
        public virtual DbSet<CmrcFotosarticulo> CmrcFotosarticulos { get; set; }
        public virtual DbSet<CmrcFotosarticuloslin> CmrcFotosarticuloslins { get; set; }
        public virtual DbSet<CmrcInforme> CmrcInformes { get; set; }
        public virtual DbSet<CmrcParametro> CmrcParametros { get; set; }
        public virtual DbSet<Cobrospago> Cobrospagos { get; set; }
        public virtual DbSet<Codigopostal> Codigopostals { get; set; }
        public virtual DbSet<Colore> Colores { get; set; }
        public virtual DbSet<Columnaslistado> Columnaslistados { get; set; }
        public virtual DbSet<Columnaslistadosorg> Columnaslistadosorgs { get; set; }
        public virtual DbSet<ComConfigtrama> ComConfigtramas { get; set; }
        public virtual DbSet<ComDispositivo> ComDispositivos { get; set; }
        public virtual DbSet<ComOperacione> ComOperaciones { get; set; }
        public virtual DbSet<ComTrama> ComTramas { get; set; }
        public virtual DbSet<Comentario> Comentarios { get; set; }
        public virtual DbSet<Comentarioscocina> Comentarioscocinas { get; set; }
        public virtual DbSet<Comentariosidioma> Comentariosidiomas { get; set; }
        public virtual DbSet<Comentariosservicio> Comentariosservicios { get; set; }
        public virtual DbSet<Comisionescab> Comisionescabs { get; set; }
        public virtual DbSet<Comisionesdoc> Comisionesdocs { get; set; }
        public virtual DbSet<Comisioneshecha> Comisioneshechas { get; set; }
        public virtual DbSet<Comisioneslin> Comisioneslins { get; set; }
        public virtual DbSet<Comisionesporvendedor> Comisionesporvendedors { get; set; }
        public virtual DbSet<Comisionesvendedor> Comisionesvendedors { get; set; }
        public virtual DbSet<CommerceId> CommerceIds { get; set; }
        public virtual DbSet<CommerceIdsTracking> CommerceIdsTrackings { get; set; }
        public virtual DbSet<CommerceParametro> CommerceParametros { get; set; }
        public virtual DbSet<CommerceVersione> CommerceVersiones { get; set; }
        public virtual DbSet<Compensacione> Compensaciones { get; set; }
        public virtual DbSet<Competencium> Competencia { get; set; }
        public virtual DbSet<Complemento> Complementos { get; set; }
        public virtual DbSet<Composicione> Composiciones { get; set; }
        public virtual DbSet<Comunicacionlog> Comunicacionlogs { get; set; }
        public virtual DbSet<Comunidade> Comunidades { get; set; }
        public virtual DbSet<Concepto> Conceptos { get; set; }
        public virtual DbSet<Conceptosajuste> Conceptosajustes { get; set; }
        public virtual DbSet<Conceptosbancario> Conceptosbancarios { get; set; }
        public virtual DbSet<Conceptospago> Conceptospagos { get; set; }
        public virtual DbSet<Condicione> Condiciones { get; set; }
        public virtual DbSet<Condicionescliente> Condicionesclientes { get; set; }
        public virtual DbSet<Condicionesgruposarticulo> Condicionesgruposarticulos { get; set; }
        public virtual DbSet<Condicionesgruposcliente> Condicionesgruposclientes { get; set; }
        public virtual DbSet<Condicionesgruposocupante> Condicionesgruposocupantes { get; set; }
        public virtual DbSet<Condicionesproveedor> Condicionesproveedors { get; set; }
        public virtual DbSet<Condicionesrappelsproveedor> Condicionesrappelsproveedors { get; set; }
        public virtual DbSet<Configactualizacion> Configactualizacions { get; set; }
        public virtual DbSet<Configbotone> Configbotones { get; set; }
        public virtual DbSet<Confighabitacione> Confighabitaciones { get; set; }
        public virtual DbSet<Confighorasextra> Confighorasextras { get; set; }
        public virtual DbSet<Configmulticaja> Configmulticajas { get; set; }
        public virtual DbSet<Configmulticajaseries> Configmulticajaseries { get; set; }
        public virtual DbSet<Configturno> Configturnos { get; set; }
        public virtual DbSet<Conocimiento> Conocimientos { get; set; }
        public virtual DbSet<Consumoscab> Consumoscabs { get; set; }
        public virtual DbSet<Contactoscliente> Contactosclientes { get; set; }
        public virtual DbSet<Contactosclientestemporale> Contactosclientestemporales { get; set; }
        public virtual DbSet<Contactosproveedore> Contactosproveedores { get; set; }
        public virtual DbSet<Contadore> Contadores { get; set; }
        public virtual DbSet<Contrato> Contratos { get; set; }
        public virtual DbSet<Controltrigger> Controltriggers { get; set; }
        public virtual DbSet<Costesporalmacen> Costesporalmacens { get; set; }
        public virtual DbSet<Cotizacione> Cotizaciones { get; set; }
        public virtual DbSet<Cuentastraspaso> Cuentastraspasos { get; set; }
        public virtual DbSet<D4578086530f40e798c880b127ac47ef> D4578086530f40e798c880b127ac47efs { get; set; }
        public virtual DbSet<D7548accEcfb4f10B3239457d74478bd> D7548accEcfb4f10B3239457d74478bds { get; set; }
        public virtual DbSet<Datoscamposlibre> Datoscamposlibres { get; set; }
        public virtual DbSet<Datosclientelibre> Datosclientelibres { get; set; }
        public virtual DbSet<Db8d364095c147bb8a73324a4595b5e4> Db8d364095c147bb8a73324a4595b5e4s { get; set; }
        public virtual DbSet<Declaradoz> Declaradozs { get; set; }
        public virtual DbSet<Departamento> Departamentos { get; set; }
        public virtual DbSet<Departamentoidioma> Departamentoidiomas { get; set; }
        public virtual DbSet<Descestado> Descestados { get; set; }
        public virtual DbSet<Descuentosclientetipoaviso> Descuentosclientetipoavisos { get; set; }
        public virtual DbSet<Desgloseefectivoporz> Desgloseefectivoporzs { get; set; }
        public virtual DbSet<Devoluciontemp> Devoluciontemps { get; set; }
        public virtual DbSet<Diasfestivo> Diasfestivos { get; set; }
        public virtual DbSet<Dingustazzy> Dingustazzies { get; set; }
        public virtual DbSet<Dispositivo> Dispositivos { get; set; }
        public virtual DbSet<Dispositivoslin> Dispositivoslins { get; set; }
        public virtual DbSet<Dissenycamposlibre> Dissenycamposlibres { get; set; }
        public virtual DbSet<Documsdisenyid> Documsdisenyids { get; set; }
        public virtual DbSet<Docword> Docwords { get; set; }
        public virtual DbSet<Docwordconfig> Docwordconfigs { get; set; }
        public virtual DbSet<Doorbook> Doorbooks { get; set; }
        public virtual DbSet<Dptovendedore> Dptovendedores { get; set; }
        public virtual DbSet<Dtosocupacionrango> Dtosocupacionrangos { get; set; }
        public virtual DbSet<Dtosocupaciontemporadum> Dtosocupaciontemporada { get; set; }
        public virtual DbSet<Dtostarifa> Dtostarifas { get; set; }
        public virtual DbSet<Dtostipoartic> Dtostipoartics { get; set; }
        public virtual DbSet<E637deb0F58a4b279d1aD08034f43ce1> E637deb0F58a4b279d1aD08034f43ce1s { get; set; }
        public virtual DbSet<EcuaTipoidentificacioncomprador> EcuaTipoidentificacioncompradors { get; set; }
        public virtual DbSet<EcuaTiposidentificadorsujetoretenido> EcuaTiposidentificadorsujetoretenidos { get; set; }
        public virtual DbSet<EcuaTiposimpuestosespeciale> EcuaTiposimpuestosespeciales { get; set; }
        public virtual DbSet<Elementosgrupo> Elementosgrupos { get; set; }
        public virtual DbSet<Embalaje> Embalajes { get; set; }
        public virtual DbSet<Entregascuentaproforma> Entregascuentaproformas { get; set; }
        public virtual DbSet<Entregastarjetum> Entregastarjeta { get; set; }
        public virtual DbSet<Esquematraspaso> Esquematraspasos { get; set; }
        public virtual DbSet<Estadistica> Estadisticas { get; set; }
        public virtual DbSet<EstadisticaConfig> EstadisticaConfigs { get; set; }
        public virtual DbSet<EstadisticaGrupo> EstadisticaGrupos { get; set; }
        public virtual DbSet<EstadisticaSubgrupo> EstadisticaSubgrupos { get; set; }
        public virtual DbSet<EstadisticaUsuario> EstadisticaUsuarios { get; set; }
        public virtual DbSet<EstadisticactrlConfig> EstadisticactrlConfigs { get; set; }
        public virtual DbSet<Estadostipodoc> Estadostipodocs { get; set; }
        public virtual DbSet<Etiquetasenvio> Etiquetasenvios { get; set; }
        public virtual DbSet<Etiquetasenviocab> Etiquetasenviocabs { get; set; }
        public virtual DbSet<Etiquetasenviolin> Etiquetasenviolins { get; set; }
        public virtual DbSet<Extractopromocionestarjetum> Extractopromocionestarjeta { get; set; }
        public virtual DbSet<FactCliente> FactClientes { get; set; }
        public virtual DbSet<FactConcepto> FactConceptos { get; set; }
        public virtual DbSet<FactEmpresa> FactEmpresas { get; set; }
        public virtual DbSet<FactFactura> FactFacturas { get; set; }
        public virtual DbSet<FactUsuario> FactUsuarios { get; set; }
        public virtual DbSet<Facturacionparking> Facturacionparkings { get; set; }
        public virtual DbSet<Facturacionprovcab> Facturacionprovcabs { get; set; }
        public virtual DbSet<Facturacionprovlin> Facturacionprovlins { get; set; }
        public virtual DbSet<Facturasaborrar> Facturasaborrars { get; set; }
        public virtual DbSet<Facturascompra> Facturascompras { get; set; }
        public virtual DbSet<Facturascompracamposlibre> Facturascompracamposlibres { get; set; }
        public virtual DbSet<Facturascompracomprobanteret> Facturascompracomprobanterets { get; set; }
        public virtual DbSet<Facturascompracuenta> Facturascompracuentas { get; set; }
        public virtual DbSet<Facturascompradto> Facturascompradtos { get; set; }
        public virtual DbSet<Facturascomprafirma> Facturascomprafirmas { get; set; }
        public virtual DbSet<Facturascompraret> Facturascomprarets { get; set; }
        public virtual DbSet<Facturascompraseriesresol> Facturascompraseriesresols { get; set; }
        public virtual DbSet<Facturascompratot> Facturascompratots { get; set; }
        public virtual DbSet<Facturasventacamposlibre> Facturasventacamposlibres { get; set; }
        public virtual DbSet<Facturasventacliente> Facturasventaclientes { get; set; }
        public virtual DbSet<Facturasventadto> Facturasventadtos { get; set; }
        public virtual DbSet<Facturasventafirma> Facturasventafirmas { get; set; }
        public virtual DbSet<Facturasventahotel> Facturasventahotels { get; set; }
        public virtual DbSet<Facturasventanota> Facturasventanotas { get; set; }
        public virtual DbSet<Facturasventapromocione> Facturasventapromociones { get; set; }
        public virtual DbSet<Facturasventaret> Facturasventarets { get; set; }
        public virtual DbSet<Facturasventaseriesresol> Facturasventaseriesresols { get; set; }
        public virtual DbSet<Facturasventatot> Facturasventatots { get; set; }
        public virtual DbSet<Facturasventum> Facturasventa { get; set; }
        public virtual DbSet<Falta> Faltas { get; set; }
        public virtual DbSet<Familia> Familias { get; set; }
        public virtual DbSet<Favoritoscab> Favoritoscabs { get; set; }
        public virtual DbSet<Favoritosidioma> Favoritosidiomas { get; set; }
        public virtual DbSet<Favoritoslin> Favoritoslins { get; set; }
        public virtual DbSet<Favoritostiposterminal> Favoritostiposterminals { get; set; }
        public virtual DbSet<Favoritosturno> Favoritosturnos { get; set; }
        public virtual DbSet<Festivoshotel> Festivoshotels { get; set; }
        public virtual DbSet<Fianza> Fianzas { get; set; }
        public virtual DbSet<Fondocaja> Fondocajas { get; set; }
        public virtual DbSet<Formaspago> Formaspagos { get; set; }
        public virtual DbSet<Formaspagocajaraiz> Formaspagocajaraizs { get; set; }
        public virtual DbSet<Formato> Formatos { get; set; }
        public virtual DbSet<Formatosarticulo> Formatosarticulos { get; set; }
        public virtual DbSet<Formatosidioma> Formatosidiomas { get; set; }
        public virtual DbSet<Foto> Fotos { get; set; }
        public virtual DbSet<Fotoshotel> Fotoshotels { get; set; }
        public virtual DbSet<Fpagocliente> Fpagoclientes { get; set; }
        public virtual DbSet<Fpagoproveedor> Fpagoproveedors { get; set; }
        public virtual DbSet<Frontsusuario> Frontsusuarios { get; set; }
        public virtual DbSet<Ftp> Ftps { get; set; }
        public virtual DbSet<Galeriaarticulo> Galeriaarticulos { get; set; }
        public virtual DbSet<Galeriaarticulosidioma> Galeriaarticulosidiomas { get; set; }
        public virtual DbSet<Galeriaidioma> Galeriaidiomas { get; set; }
        public virtual DbSet<Galeriaseccione> Galeriasecciones { get; set; }
        public virtual DbSet<Galeriaseccionesidioma> Galeriaseccionesidiomas { get; set; }
        public virtual DbSet<Galerium> Galeria { get; set; }
        public virtual DbSet<Garantia> Garantias { get; set; }
        public virtual DbSet<Gasto> Gastos { get; set; }
        public virtual DbSet<Gastosenvio> Gastosenvios { get; set; }
        public virtual DbSet<Gradosintere> Gradosinteres { get; set; }
        public virtual DbSet<Grupoarticulo> Grupoarticulos { get; set; }
        public virtual DbSet<Grupoarticulo1> Grupoarticulos1 { get; set; }
        public virtual DbSet<Gruporecurso> Gruporecursos { get; set; }
        public virtual DbSet<Gruposalmacencab> Gruposalmacencabs { get; set; }
        public virtual DbSet<Gruposalmacencriterio> Gruposalmacencriterios { get; set; }
        public virtual DbSet<Gruposalmacenlin> Gruposalmacenlins { get; set; }
        public virtual DbSet<Gruposalmacenlincriterio> Gruposalmacenlincriterios { get; set; }
        public virtual DbSet<Gruposalmacenusuario> Gruposalmacenusuarios { get; set; }
        public virtual DbSet<Gruposarticulo> Gruposarticulos { get; set; }
        public virtual DbSet<Gruposarticulosusuario> Gruposarticulosusuarios { get; set; }
        public virtual DbSet<Gruposcliente> Gruposclientes { get; set; }
        public virtual DbSet<Gruposmappingscab> Gruposmappingscabs { get; set; }
        public virtual DbSet<Gruposmappingslin> Gruposmappingslins { get; set; }
        public virtual DbSet<Gruposocupante> Gruposocupantes { get; set; }
        public virtual DbSet<Habitacione> Habitaciones { get; set; }
        public virtual DbSet<Habitacionescamposlibre> Habitacionescamposlibres { get; set; }
        public virtual DbSet<Hcambiarestadohab> Hcambiarestadohabs { get; set; }
        public virtual DbSet<Hcargoslibre> Hcargoslibres { get; set; }
        public virtual DbSet<Hcierrehabitacione> Hcierrehabitaciones { get; set; }
        public virtual DbSet<Hcierreproduccion> Hcierreproduccions { get; set; }
        public virtual DbSet<Hcupo> Hcupos { get; set; }
        public virtual DbSet<Hcuposcliente> Hcuposclientes { get; set; }
        public virtual DbSet<Hcuposcomentario> Hcuposcomentarios { get; set; }
        public virtual DbSet<Hcuposdium> Hcuposdia { get; set; }
        public virtual DbSet<Hcuposestadosdefecto> Hcuposestadosdefectos { get; set; }
        public virtual DbSet<Hcuposextra> Hcuposextras { get; set; }
        public virtual DbSet<Hcuposfecha> Hcuposfechas { get; set; }
        public virtual DbSet<Hcuposrestriccione> Hcuposrestricciones { get; set; }
        public virtual DbSet<Hcuposservicio> Hcuposservicios { get; set; }
        public virtual DbSet<Hcupostipohabitacion> Hcupostipohabitacions { get; set; }
        public virtual DbSet<Hestadosdefecto> Hestadosdefectos { get; set; }
        public virtual DbSet<Hestadoshabcentralitum> Hestadoshabcentralita { get; set; }
        public virtual DbSet<Hestadoshabitacione> Hestadoshabitaciones { get; set; }
        public virtual DbSet<Hestadosreserva> Hestadosreservas { get; set; }
        public virtual DbSet<Hestadosreservascab> Hestadosreservascabs { get; set; }
        public virtual DbSet<Hhabitacionesbloqueo> Hhabitacionesbloqueos { get; set; }
        public virtual DbSet<HioposEstad> HioposEstads { get; set; }
        public virtual DbSet<HioposEstadDimensione> HioposEstadDimensiones { get; set; }
        public virtual DbSet<HioposEstadFiltro> HioposEstadFiltros { get; set; }
        public virtual DbSet<HioposEstadFiltrosLibre> HioposEstadFiltrosLibres { get; set; }
        public virtual DbSet<HioposEstadMetrica> HioposEstadMetricas { get; set; }
        public virtual DbSet<HioposEstadSeries> HioposEstadSeries { get; set; }
        public virtual DbSet<HioposScoreboard> HioposScoreboards { get; set; }
        public virtual DbSet<HioposScoreboardInforme> HioposScoreboardInformes { get; set; }
        public virtual DbSet<Histocomisione> Histocomisiones { get; set; }
        public virtual DbSet<Histocomisionescab> Histocomisionescabs { get; set; }
        public virtual DbSet<Historicoasunto> Historicoasuntos { get; set; }
        public virtual DbSet<Historicocomisione> Historicocomisiones { get; set; }
        public virtual DbSet<Historicocoste> Historicocostes { get; set; }
        public virtual DbSet<Historicokit> Historicokits { get; set; }
        public virtual DbSet<Historicoreservascab> Historicoreservascabs { get; set; }
        public virtual DbSet<Hmensajesvendedore> Hmensajesvendedores { get; set; }
        public virtual DbSet<Hocupantesreserva> Hocupantesreservas { get; set; }
        public virtual DbSet<HoperacionesDispositivo> HoperacionesDispositivos { get; set; }
        public virtual DbSet<Horariocab> Horariocabs { get; set; }
        public virtual DbSet<Horarioempleado> Horarioempleados { get; set; }
        public virtual DbSet<Horariolin> Horariolins { get; set; }
        public virtual DbSet<Hotele> Hoteles { get; set; }
        public virtual DbSet<Hotelescomentario> Hotelescomentarios { get; set; }
        public virtual DbSet<Hoteleshabitacione> Hoteleshabitaciones { get; set; }
        public virtual DbSet<Hoteleshabitacionesweb> Hoteleshabitacioneswebs { get; set; }
        public virtual DbSet<Hotelesregimene> Hotelesregimenes { get; set; }
        public virtual DbSet<Hotelestarifa> Hotelestarifas { get; set; }
        public virtual DbSet<Hotelestarifascargo> Hotelestarifascargos { get; set; }
        public virtual DbSet<Hotelestarifasextra> Hotelestarifasextras { get; set; }
        public virtual DbSet<Hpersona> Hpersonas { get; set; }
        public virtual DbSet<Hreserva> Hreservas { get; set; }
        public virtual DbSet<Hreservasasunto> Hreservasasuntos { get; set; }
        public virtual DbSet<Hreservasauto> Hreservasautos { get; set; }
        public virtual DbSet<Hreservasbloqueo> Hreservasbloqueos { get; set; }
        public virtual DbSet<Hreservascab> Hreservascabs { get; set; }
        public virtual DbSet<Hreservascargo> Hreservascargos { get; set; }
        public virtual DbSet<Hreservascentralitum> Hreservascentralita { get; set; }
        public virtual DbSet<Hreservascierrediario> Hreservascierrediarios { get; set; }
        public virtual DbSet<Hreservascorreccionesproduccion> Hreservascorreccionesproduccions { get; set; }
        public virtual DbSet<Hreservasdocumento> Hreservasdocumentos { get; set; }
        public virtual DbSet<Hreservasestadosauto> Hreservasestadosautos { get; set; }
        public virtual DbSet<Hreservaslin> Hreservaslins { get; set; }
        public virtual DbSet<Hreservaslincomentariosservicio> Hreservaslincomentariosservicios { get; set; }
        public virtual DbSet<HresultadosDispositivo> HresultadosDispositivos { get; set; }
        public virtual DbSet<Hserviciosregiman> Hserviciosregimen { get; set; }
        public virtual DbSet<Hsuplemento> Hsuplementos { get; set; }
        public virtual DbSet<Htareashabitacion> Htareashabitacions { get; set; }
        public virtual DbSet<Htiposbloqueo> Htiposbloqueos { get; set; }
        public virtual DbSet<Htiposvip> Htiposvips { get; set; }
        public virtual DbSet<Huellascliente> Huellasclientes { get; set; }
        public virtual DbSet<Huellasvendedor> Huellasvendedors { get; set; }
        public virtual DbSet<Icgcentralitaerr> Icgcentralitaerrs { get; set; }
        public virtual DbSet<Icgcentralitum> Icgcentralita { get; set; }
        public virtual DbSet<Icgconsultassql> Icgconsultassqls { get; set; }
        public virtual DbSet<Icgdocumento> Icgdocumentos { get; set; }
        public virtual DbSet<Icgetiqueta> Icgetiquetas { get; set; }
        public virtual DbSet<Icginforme> Icginformes { get; set; }
        public virtual DbSet<IcgmailCalculos1> IcgmailCalculos1s { get; set; }
        public virtual DbSet<IcgmailCalculos10> IcgmailCalculos10s { get; set; }
        public virtual DbSet<IcgmailCalculos100> IcgmailCalculos100s { get; set; }
        public virtual DbSet<IcgmailCalculos101> IcgmailCalculos101s { get; set; }
        public virtual DbSet<IcgmailCalculos102> IcgmailCalculos102s { get; set; }
        public virtual DbSet<IcgmailCalculos103> IcgmailCalculos103s { get; set; }
        public virtual DbSet<IcgmailCalculos104> IcgmailCalculos104s { get; set; }
        public virtual DbSet<IcgmailCalculos105> IcgmailCalculos105s { get; set; }
        public virtual DbSet<IcgmailCalculos106> IcgmailCalculos106s { get; set; }
        public virtual DbSet<IcgmailCalculos107> IcgmailCalculos107s { get; set; }
        public virtual DbSet<IcgmailCalculos108> IcgmailCalculos108s { get; set; }
        public virtual DbSet<IcgmailCalculos109> IcgmailCalculos109s { get; set; }
        public virtual DbSet<IcgmailCalculos11> IcgmailCalculos11s { get; set; }
        public virtual DbSet<IcgmailCalculos110> IcgmailCalculos110s { get; set; }
        public virtual DbSet<IcgmailCalculos111> IcgmailCalculos111s { get; set; }
        public virtual DbSet<IcgmailCalculos112> IcgmailCalculos112s { get; set; }
        public virtual DbSet<IcgmailCalculos113> IcgmailCalculos113s { get; set; }
        public virtual DbSet<IcgmailCalculos114> IcgmailCalculos114s { get; set; }
        public virtual DbSet<IcgmailCalculos115> IcgmailCalculos115s { get; set; }
        public virtual DbSet<IcgmailCalculos116> IcgmailCalculos116s { get; set; }
        public virtual DbSet<IcgmailCalculos117> IcgmailCalculos117s { get; set; }
        public virtual DbSet<IcgmailCalculos118> IcgmailCalculos118s { get; set; }
        public virtual DbSet<IcgmailCalculos119> IcgmailCalculos119s { get; set; }
        public virtual DbSet<IcgmailCalculos12> IcgmailCalculos12s { get; set; }
        public virtual DbSet<IcgmailCalculos120> IcgmailCalculos120s { get; set; }
        public virtual DbSet<IcgmailCalculos121> IcgmailCalculos121s { get; set; }
        public virtual DbSet<IcgmailCalculos122> IcgmailCalculos122s { get; set; }
        public virtual DbSet<IcgmailCalculos123> IcgmailCalculos123s { get; set; }
        public virtual DbSet<IcgmailCalculos124> IcgmailCalculos124s { get; set; }
        public virtual DbSet<IcgmailCalculos125> IcgmailCalculos125s { get; set; }
        public virtual DbSet<IcgmailCalculos126> IcgmailCalculos126s { get; set; }
        public virtual DbSet<IcgmailCalculos127> IcgmailCalculos127s { get; set; }
        public virtual DbSet<IcgmailCalculos128> IcgmailCalculos128s { get; set; }
        public virtual DbSet<IcgmailCalculos129> IcgmailCalculos129s { get; set; }
        public virtual DbSet<IcgmailCalculos13> IcgmailCalculos13s { get; set; }
        public virtual DbSet<IcgmailCalculos130> IcgmailCalculos130s { get; set; }
        public virtual DbSet<IcgmailCalculos131> IcgmailCalculos131s { get; set; }
        public virtual DbSet<IcgmailCalculos132> IcgmailCalculos132s { get; set; }
        public virtual DbSet<IcgmailCalculos133> IcgmailCalculos133s { get; set; }
        public virtual DbSet<IcgmailCalculos134> IcgmailCalculos134s { get; set; }
        public virtual DbSet<IcgmailCalculos135> IcgmailCalculos135s { get; set; }
        public virtual DbSet<IcgmailCalculos136> IcgmailCalculos136s { get; set; }
        public virtual DbSet<IcgmailCalculos137> IcgmailCalculos137s { get; set; }
        public virtual DbSet<IcgmailCalculos138> IcgmailCalculos138s { get; set; }
        public virtual DbSet<IcgmailCalculos139> IcgmailCalculos139s { get; set; }
        public virtual DbSet<IcgmailCalculos14> IcgmailCalculos14s { get; set; }
        public virtual DbSet<IcgmailCalculos140> IcgmailCalculos140s { get; set; }
        public virtual DbSet<IcgmailCalculos141> IcgmailCalculos141s { get; set; }
        public virtual DbSet<IcgmailCalculos142> IcgmailCalculos142s { get; set; }
        public virtual DbSet<IcgmailCalculos143> IcgmailCalculos143s { get; set; }
        public virtual DbSet<IcgmailCalculos144> IcgmailCalculos144s { get; set; }
        public virtual DbSet<IcgmailCalculos145> IcgmailCalculos145s { get; set; }
        public virtual DbSet<IcgmailCalculos146> IcgmailCalculos146s { get; set; }
        public virtual DbSet<IcgmailCalculos147> IcgmailCalculos147s { get; set; }
        public virtual DbSet<IcgmailCalculos148> IcgmailCalculos148s { get; set; }
        public virtual DbSet<IcgmailCalculos149> IcgmailCalculos149s { get; set; }
        public virtual DbSet<IcgmailCalculos15> IcgmailCalculos15s { get; set; }
        public virtual DbSet<IcgmailCalculos150> IcgmailCalculos150s { get; set; }
        public virtual DbSet<IcgmailCalculos151> IcgmailCalculos151s { get; set; }
        public virtual DbSet<IcgmailCalculos152> IcgmailCalculos152s { get; set; }
        public virtual DbSet<IcgmailCalculos153> IcgmailCalculos153s { get; set; }
        public virtual DbSet<IcgmailCalculos154> IcgmailCalculos154s { get; set; }
        public virtual DbSet<IcgmailCalculos155> IcgmailCalculos155s { get; set; }
        public virtual DbSet<IcgmailCalculos156> IcgmailCalculos156s { get; set; }
        public virtual DbSet<IcgmailCalculos157> IcgmailCalculos157s { get; set; }
        public virtual DbSet<IcgmailCalculos158> IcgmailCalculos158s { get; set; }
        public virtual DbSet<IcgmailCalculos159> IcgmailCalculos159s { get; set; }
        public virtual DbSet<IcgmailCalculos16> IcgmailCalculos16s { get; set; }
        public virtual DbSet<IcgmailCalculos160> IcgmailCalculos160s { get; set; }
        public virtual DbSet<IcgmailCalculos161> IcgmailCalculos161s { get; set; }
        public virtual DbSet<IcgmailCalculos162> IcgmailCalculos162s { get; set; }
        public virtual DbSet<IcgmailCalculos163> IcgmailCalculos163s { get; set; }
        public virtual DbSet<IcgmailCalculos164> IcgmailCalculos164s { get; set; }
        public virtual DbSet<IcgmailCalculos165> IcgmailCalculos165s { get; set; }
        public virtual DbSet<IcgmailCalculos166> IcgmailCalculos166s { get; set; }
        public virtual DbSet<IcgmailCalculos167> IcgmailCalculos167s { get; set; }
        public virtual DbSet<IcgmailCalculos168> IcgmailCalculos168s { get; set; }
        public virtual DbSet<IcgmailCalculos169> IcgmailCalculos169s { get; set; }
        public virtual DbSet<IcgmailCalculos17> IcgmailCalculos17s { get; set; }
        public virtual DbSet<IcgmailCalculos170> IcgmailCalculos170s { get; set; }
        public virtual DbSet<IcgmailCalculos171> IcgmailCalculos171s { get; set; }
        public virtual DbSet<IcgmailCalculos172> IcgmailCalculos172s { get; set; }
        public virtual DbSet<IcgmailCalculos173> IcgmailCalculos173s { get; set; }
        public virtual DbSet<IcgmailCalculos174> IcgmailCalculos174s { get; set; }
        public virtual DbSet<IcgmailCalculos175> IcgmailCalculos175s { get; set; }
        public virtual DbSet<IcgmailCalculos176> IcgmailCalculos176s { get; set; }
        public virtual DbSet<IcgmailCalculos177> IcgmailCalculos177s { get; set; }
        public virtual DbSet<IcgmailCalculos178> IcgmailCalculos178s { get; set; }
        public virtual DbSet<IcgmailCalculos179> IcgmailCalculos179s { get; set; }
        public virtual DbSet<IcgmailCalculos18> IcgmailCalculos18s { get; set; }
        public virtual DbSet<IcgmailCalculos180> IcgmailCalculos180s { get; set; }
        public virtual DbSet<IcgmailCalculos181> IcgmailCalculos181s { get; set; }
        public virtual DbSet<IcgmailCalculos19> IcgmailCalculos19s { get; set; }
        public virtual DbSet<IcgmailCalculos2> IcgmailCalculos2s { get; set; }
        public virtual DbSet<IcgmailCalculos20> IcgmailCalculos20s { get; set; }
        public virtual DbSet<IcgmailCalculos21> IcgmailCalculos21s { get; set; }
        public virtual DbSet<IcgmailCalculos22> IcgmailCalculos22s { get; set; }
        public virtual DbSet<IcgmailCalculos23> IcgmailCalculos23s { get; set; }
        public virtual DbSet<IcgmailCalculos24> IcgmailCalculos24s { get; set; }
        public virtual DbSet<IcgmailCalculos25> IcgmailCalculos25s { get; set; }
        public virtual DbSet<IcgmailCalculos26> IcgmailCalculos26s { get; set; }
        public virtual DbSet<IcgmailCalculos27> IcgmailCalculos27s { get; set; }
        public virtual DbSet<IcgmailCalculos28> IcgmailCalculos28s { get; set; }
        public virtual DbSet<IcgmailCalculos29> IcgmailCalculos29s { get; set; }
        public virtual DbSet<IcgmailCalculos3> IcgmailCalculos3s { get; set; }
        public virtual DbSet<IcgmailCalculos30> IcgmailCalculos30s { get; set; }
        public virtual DbSet<IcgmailCalculos31> IcgmailCalculos31s { get; set; }
        public virtual DbSet<IcgmailCalculos32> IcgmailCalculos32s { get; set; }
        public virtual DbSet<IcgmailCalculos33> IcgmailCalculos33s { get; set; }
        public virtual DbSet<IcgmailCalculos34> IcgmailCalculos34s { get; set; }
        public virtual DbSet<IcgmailCalculos35> IcgmailCalculos35s { get; set; }
        public virtual DbSet<IcgmailCalculos36> IcgmailCalculos36s { get; set; }
        public virtual DbSet<IcgmailCalculos37> IcgmailCalculos37s { get; set; }
        public virtual DbSet<IcgmailCalculos38> IcgmailCalculos38s { get; set; }
        public virtual DbSet<IcgmailCalculos39> IcgmailCalculos39s { get; set; }
        public virtual DbSet<IcgmailCalculos4> IcgmailCalculos4s { get; set; }
        public virtual DbSet<IcgmailCalculos40> IcgmailCalculos40s { get; set; }
        public virtual DbSet<IcgmailCalculos41> IcgmailCalculos41s { get; set; }
        public virtual DbSet<IcgmailCalculos42> IcgmailCalculos42s { get; set; }
        public virtual DbSet<IcgmailCalculos43> IcgmailCalculos43s { get; set; }
        public virtual DbSet<IcgmailCalculos44> IcgmailCalculos44s { get; set; }
        public virtual DbSet<IcgmailCalculos45> IcgmailCalculos45s { get; set; }
        public virtual DbSet<IcgmailCalculos46> IcgmailCalculos46s { get; set; }
        public virtual DbSet<IcgmailCalculos47> IcgmailCalculos47s { get; set; }
        public virtual DbSet<IcgmailCalculos48> IcgmailCalculos48s { get; set; }
        public virtual DbSet<IcgmailCalculos49> IcgmailCalculos49s { get; set; }
        public virtual DbSet<IcgmailCalculos5> IcgmailCalculos5s { get; set; }
        public virtual DbSet<IcgmailCalculos50> IcgmailCalculos50s { get; set; }
        public virtual DbSet<IcgmailCalculos51> IcgmailCalculos51s { get; set; }
        public virtual DbSet<IcgmailCalculos52> IcgmailCalculos52s { get; set; }
        public virtual DbSet<IcgmailCalculos53> IcgmailCalculos53s { get; set; }
        public virtual DbSet<IcgmailCalculos54> IcgmailCalculos54s { get; set; }
        public virtual DbSet<IcgmailCalculos55> IcgmailCalculos55s { get; set; }
        public virtual DbSet<IcgmailCalculos56> IcgmailCalculos56s { get; set; }
        public virtual DbSet<IcgmailCalculos57> IcgmailCalculos57s { get; set; }
        public virtual DbSet<IcgmailCalculos58> IcgmailCalculos58s { get; set; }
        public virtual DbSet<IcgmailCalculos59> IcgmailCalculos59s { get; set; }
        public virtual DbSet<IcgmailCalculos6> IcgmailCalculos6s { get; set; }
        public virtual DbSet<IcgmailCalculos60> IcgmailCalculos60s { get; set; }
        public virtual DbSet<IcgmailCalculos61> IcgmailCalculos61s { get; set; }
        public virtual DbSet<IcgmailCalculos62> IcgmailCalculos62s { get; set; }
        public virtual DbSet<IcgmailCalculos63> IcgmailCalculos63s { get; set; }
        public virtual DbSet<IcgmailCalculos64> IcgmailCalculos64s { get; set; }
        public virtual DbSet<IcgmailCalculos65> IcgmailCalculos65s { get; set; }
        public virtual DbSet<IcgmailCalculos66> IcgmailCalculos66s { get; set; }
        public virtual DbSet<IcgmailCalculos67> IcgmailCalculos67s { get; set; }
        public virtual DbSet<IcgmailCalculos68> IcgmailCalculos68s { get; set; }
        public virtual DbSet<IcgmailCalculos69> IcgmailCalculos69s { get; set; }
        public virtual DbSet<IcgmailCalculos7> IcgmailCalculos7s { get; set; }
        public virtual DbSet<IcgmailCalculos70> IcgmailCalculos70s { get; set; }
        public virtual DbSet<IcgmailCalculos71> IcgmailCalculos71s { get; set; }
        public virtual DbSet<IcgmailCalculos72> IcgmailCalculos72s { get; set; }
        public virtual DbSet<IcgmailCalculos73> IcgmailCalculos73s { get; set; }
        public virtual DbSet<IcgmailCalculos74> IcgmailCalculos74s { get; set; }
        public virtual DbSet<IcgmailCalculos75> IcgmailCalculos75s { get; set; }
        public virtual DbSet<IcgmailCalculos76> IcgmailCalculos76s { get; set; }
        public virtual DbSet<IcgmailCalculos77> IcgmailCalculos77s { get; set; }
        public virtual DbSet<IcgmailCalculos78> IcgmailCalculos78s { get; set; }
        public virtual DbSet<IcgmailCalculos79> IcgmailCalculos79s { get; set; }
        public virtual DbSet<IcgmailCalculos8> IcgmailCalculos8s { get; set; }
        public virtual DbSet<IcgmailCalculos80> IcgmailCalculos80s { get; set; }
        public virtual DbSet<IcgmailCalculos81> IcgmailCalculos81s { get; set; }
        public virtual DbSet<IcgmailCalculos82> IcgmailCalculos82s { get; set; }
        public virtual DbSet<IcgmailCalculos83> IcgmailCalculos83s { get; set; }
        public virtual DbSet<IcgmailCalculos84> IcgmailCalculos84s { get; set; }
        public virtual DbSet<IcgmailCalculos85> IcgmailCalculos85s { get; set; }
        public virtual DbSet<IcgmailCalculos86> IcgmailCalculos86s { get; set; }
        public virtual DbSet<IcgmailCalculos87> IcgmailCalculos87s { get; set; }
        public virtual DbSet<IcgmailCalculos88> IcgmailCalculos88s { get; set; }
        public virtual DbSet<IcgmailCalculos89> IcgmailCalculos89s { get; set; }
        public virtual DbSet<IcgmailCalculos9> IcgmailCalculos9s { get; set; }
        public virtual DbSet<IcgmailCalculos90> IcgmailCalculos90s { get; set; }
        public virtual DbSet<IcgmailCalculos91> IcgmailCalculos91s { get; set; }
        public virtual DbSet<IcgmailCalculos92> IcgmailCalculos92s { get; set; }
        public virtual DbSet<IcgmailCalculos93> IcgmailCalculos93s { get; set; }
        public virtual DbSet<IcgmailCalculos94> IcgmailCalculos94s { get; set; }
        public virtual DbSet<IcgmailCalculos95> IcgmailCalculos95s { get; set; }
        public virtual DbSet<IcgmailCalculos96> IcgmailCalculos96s { get; set; }
        public virtual DbSet<IcgmailCalculos97> IcgmailCalculos97s { get; set; }
        public virtual DbSet<IcgmailCalculos98> IcgmailCalculos98s { get; set; }
        public virtual DbSet<IcgmailCalculos99> IcgmailCalculos99s { get; set; }
        public virtual DbSet<Icgnombresetiqueta> Icgnombresetiquetas { get; set; }
        public virtual DbSet<Icgnombresinforme> Icgnombresinformes { get; set; }
        public virtual DbSet<Icgpreciosxprefijo> Icgpreciosxprefijos { get; set; }
        public virtual DbSet<IdArticulo> IdArticulos { get; set; }
        public virtual DbSet<IdFavoritoscab> IdFavoritoscabs { get; set; }
        public virtual DbSet<IdVendedore> IdVendedores { get; set; }
        public virtual DbSet<IdVenta> IdVentas { get; set; }
        public virtual DbSet<Idioma> Idiomas { get; set; }
        public virtual DbSet<IeAtributo> IeAtributos { get; set; }
        public virtual DbSet<IeAtributosGraficaSb> IeAtributosGraficaSbs { get; set; }
        public virtual DbSet<IeCamposOrigenesRelacionale> IeCamposOrigenesRelacionales { get; set; }
        public virtual DbSet<IeCamposRelacionale> IeCamposRelacionales { get; set; }
        public virtual DbSet<IeConexione> IeConexiones { get; set; }
        public virtual DbSet<IeControlesInforme> IeControlesInformes { get; set; }
        public virtual DbSet<IeCubo> IeCubos { get; set; }
        public virtual DbSet<IeDimensione> IeDimensiones { get; set; }
        public virtual DbSet<IeDimensionesCubo> IeDimensionesCubos { get; set; }
        public virtual DbSet<IeFiltrosCuboSb> IeFiltrosCuboSbs { get; set; }
        public virtual DbSet<IeFiltrosOrigen> IeFiltrosOrigens { get; set; }
        public virtual DbSet<IeGrupo> IeGrupos { get; set; }
        public virtual DbSet<IeGruposMedida> IeGruposMedidas { get; set; }
        public virtual DbSet<IeGruposMedidasMetrica> IeGruposMedidasMetricas { get; set; }
        public virtual DbSet<IeHecho> IeHechos { get; set; }
        public virtual DbSet<IeHechosCubo> IeHechosCubos { get; set; }
        public virtual DbSet<IeInforme> IeInformes { get; set; }
        public virtual DbSet<IeJerarquia> IeJerarquias { get; set; }
        public virtual DbSet<IeMetrica> IeMetricas { get; set; }
        public virtual DbSet<IeMetricasGraficaSb> IeMetricasGraficaSbs { get; set; }
        public virtual DbSet<IeOrigenesRelacionale> IeOrigenesRelacionales { get; set; }
        public virtual DbSet<IeTimeIntelligence> IeTimeIntelligences { get; set; }
        public virtual DbSet<IeUsuariosInforme> IeUsuariosInformes { get; set; }
        public virtual DbSet<IeValoresFiltrosCuboSb> IeValoresFiltrosCuboSbs { get; set; }
        public virtual DbSet<IeValoresFiltrosOrigen> IeValoresFiltrosOrigens { get; set; }
        public virtual DbSet<Imagenesusuario> Imagenesusuarios { get; set; }
        public virtual DbSet<Impresiondoc> Impresiondocs { get; set; }
        public virtual DbSet<ImpresiondocGruposalmacen> ImpresiondocGruposalmacens { get; set; }
        public virtual DbSet<Impresionparking> Impresionparkings { get; set; }
        public virtual DbSet<Impresora> Impresoras { get; set; }
        public virtual DbSet<Impuesto> Impuestos { get; set; }
        public virtual DbSet<Incidencia> Incidencias { get; set; }
        public virtual DbSet<IncidenciasE> IncidenciasEs { get; set; }
        public virtual DbSet<Incidenciasconfig> Incidenciasconfigs { get; set; }
        public virtual DbSet<Incidenciaslin> Incidenciaslins { get; set; }
        public virtual DbSet<Incidenciasnoautovalidable> Incidenciasnoautovalidables { get; set; }
        public virtual DbSet<Informe> Informes { get; set; }
        public virtual DbSet<Informecolumna> Informecolumnas { get; set; }
        public virtual DbSet<Informefiltro> Informefiltros { get; set; }
        public virtual DbSet<Informeparametro> Informeparametros { get; set; }
        public virtual DbSet<Informestyc> Informestycs { get; set; }
        public virtual DbSet<Interese> Intereses { get; set; }
        public virtual DbSet<Intervalosrappel> Intervalosrappels { get; set; }
        public virtual DbSet<Inventario> Inventarios { get; set; }
        public virtual DbSet<Inventarioszona> Inventarioszonas { get; set; }
        public virtual DbSet<ItAc> ItAcs { get; set; }
        public virtual DbSet<ItAl> ItAls { get; set; }
        public virtual DbSet<ItAq> ItAqs { get; set; }
        public virtual DbSet<ItAt> ItAts { get; set; }
        public virtual DbSet<ItAvLog> ItAvLogs { get; set; }
        public virtual DbSet<ItBitacoraPrecio> ItBitacoraPrecios { get; set; }
        public virtual DbSet<ItCliente> ItClientes { get; set; }
        public virtual DbSet<ItComprasFactura> ItComprasFacturas { get; set; }
        public virtual DbSet<ItControl> ItControls { get; set; }
        public virtual DbSet<ItDocumentosca> ItDocumentoscas { get; set; }
        public virtual DbSet<ItExistencia> ItExistencias { get; set; }
        public virtual DbSet<ItFacDetalle> ItFacDetalles { get; set; }
        public virtual DbSet<ItFt> ItFts { get; set; }
        public virtual DbSet<ItFv> ItFvs { get; set; }
        public virtual DbSet<ItLog> ItLogs { get; set; }
        public virtual DbSet<ItLogOp> ItLogOps { get; set; }
        public virtual DbSet<ItMarca> ItMarcas { get; set; }
        public virtual DbSet<ItMod> ItMods { get; set; }
        public virtual DbSet<ItProducto> ItProductos { get; set; }
        public virtual DbSet<ItTe> ItTes { get; set; }
        public virtual DbSet<ItUsuario> ItUsuarios { get; set; }
        public virtual DbSet<Kit> Kits { get; set; }
        public virtual DbSet<Kitfase> Kitfases { get; set; }
        public virtual DbSet<Kpi> Kpis { get; set; }
        public virtual DbSet<KpiDetalle> KpiDetalles { get; set; }
        public virtual DbSet<KpiDetallekpi> KpiDetallekpis { get; set; }
        public virtual DbSet<KpiFiltro> KpiFiltros { get; set; }
        public virtual DbSet<KpiFiltroDef> KpiFiltroDefs { get; set; }
        public virtual DbSet<KpiUsuario> KpiUsuarios { get; set; }
        public virtual DbSet<LastsalesAlbventacab> LastsalesAlbventacabs { get; set; }
        public virtual DbSet<LastsalesAlbventalin> LastsalesAlbventalins { get; set; }
        public virtual DbSet<LastsalesArticulo> LastsalesArticulos { get; set; }
        public virtual DbSet<LastsalesArticuloslin> LastsalesArticuloslins { get; set; }
        public virtual DbSet<Linea> Lineas { get; set; }
        public virtual DbSet<Lineascomunicacionlog> Lineascomunicacionlogs { get; set; }
        public virtual DbSet<Logzsafacturar> Logzsafacturars { get; set; }
        public virtual DbSet<Lugare> Lugares { get; set; }
        public virtual DbSet<Lugaresreparacion> Lugaresreparacions { get; set; }
        public virtual DbSet<Mailing> Mailings { get; set; }
        public virtual DbSet<Mailingbitmap> Mailingbitmaps { get; set; }
        public virtual DbSet<Manipulacione> Manipulaciones { get; set; }
        public virtual DbSet<Mapping> Mappings { get; set; }
        public virtual DbSet<Mappingsautomatizado> Mappingsautomatizados { get; set; }
        public virtual DbSet<Mappingsautomatizadosfile> Mappingsautomatizadosfiles { get; set; }
        public virtual DbSet<Mappingscab> Mappingscabs { get; set; }
        public virtual DbSet<Mappingsexportacionescab> Mappingsexportacionescabs { get; set; }
        public virtual DbSet<Mappingsexportacioneslin> Mappingsexportacioneslins { get; set; }
        public virtual DbSet<Mappingsficherosrelacionado> Mappingsficherosrelacionados { get; set; }
        public virtual DbSet<Mappingsfield> Mappingsfields { get; set; }
        public virtual DbSet<Mappingsfile> Mappingsfiles { get; set; }
        public virtual DbSet<Mappingsfilesmainfield> Mappingsfilesmainfields { get; set; }
        public virtual DbSet<Mappingsfilesparametro> Mappingsfilesparametros { get; set; }
        public virtual DbSet<Mappingsfilessortedfield> Mappingsfilessortedfields { get; set; }
        public virtual DbSet<Mappingsidimportacion> Mappingsidimportacions { get; set; }
        public virtual DbSet<Mappingslin> Mappingslins { get; set; }
        public virtual DbSet<Mappingspropiedade> Mappingspropiedades { get; set; }
        public virtual DbSet<Mappingsregla> Mappingsreglas { get; set; }
        public virtual DbSet<Mappingssql> Mappingssqls { get; set; }
        public virtual DbSet<Marca> Marcas { get; set; }
        public virtual DbSet<Mediospagohiopo> Mediospagohiopos { get; set; }
        public virtual DbSet<Mensaje> Mensajes { get; set; }
        public virtual DbSet<Mermascab> Mermascabs { get; set; }
        public virtual DbSet<Mermaslin> Mermaslins { get; set; }
        public virtual DbSet<Miscubosolap> Miscubosolaps { get; set; }
        public virtual DbSet<MiscubosolapPropiedade> MiscubosolapPropiedades { get; set; }
        public virtual DbSet<MiscubosolapUsuario> MiscubosolapUsuarios { get; set; }
        public virtual DbSet<ModificacionesCentral> ModificacionesCentrals { get; set; }
        public virtual DbSet<Modificadoresarticulo> Modificadoresarticulos { get; set; }
        public virtual DbSet<Modificadorescab> Modificadorescabs { get; set; }
        public virtual DbSet<Modificadoresidioma> Modificadoresidiomas { get; set; }
        public virtual DbSet<Modificadoreslin> Modificadoreslins { get; set; }
        public virtual DbSet<Moneda> Monedas { get; set; }
        public virtual DbSet<Monedashiopo> Monedashiopos { get; set; }
        public virtual DbSet<Monedaslin> Monedaslins { get; set; }
        public virtual DbSet<Monedaspiezashiopo> Monedaspiezashiopos { get; set; }
        public virtual DbSet<Motivo> Motivos { get; set; }
        public virtual DbSet<Motivosabono> Motivosabonos { get; set; }
        public virtual DbSet<MotivosabonoIdioma> MotivosabonoIdiomas { get; set; }
        public virtual DbSet<Motivosdescuadre> Motivosdescuadres { get; set; }
        public virtual DbSet<Motivosdevolucion> Motivosdevolucions { get; set; }
        public virtual DbSet<Motivosdto> Motivosdtos { get; set; }
        public virtual DbSet<Motivosentradum> Motivosentrada { get; set; }
        public virtual DbSet<Motivosmerma> Motivosmermas { get; set; }
        public virtual DbSet<Motivosparada> Motivosparadas { get; set; }
        public virtual DbSet<Motivosrechazo> Motivosrechazos { get; set; }
        public virtual DbSet<Motivossalidum> Motivossalida { get; set; }
        public virtual DbSet<Motivostraspaso> Motivostraspasos { get; set; }
        public virtual DbSet<MotivostraspasoIdioma> MotivostraspasoIdiomas { get; set; }
        public virtual DbSet<Moviment> Moviments { get; set; }
        public virtual DbSet<NetCaja> NetCajas { get; set; }
        public virtual DbSet<NetConfigTipoTerminal> NetConfigTipoTerminals { get; set; }
        public virtual DbSet<NetFamiliasNoModificable> NetFamiliasNoModificables { get; set; }
        public virtual DbSet<NetFamiliasTiendum> NetFamiliasTienda { get; set; }
        public virtual DbSet<NetGrupoTiendum> NetGrupoTienda { get; set; }
        public virtual DbSet<NetImpuestosTiendum> NetImpuestosTienda { get; set; }
        public virtual DbSet<NetIncidenciasTerminal> NetIncidenciasTerminals { get; set; }
        public virtual DbSet<NetMediosPagoTiendum> NetMediosPagoTienda { get; set; }
        public virtual DbSet<NetMonedasTiendum> NetMonedasTienda { get; set; }
        public virtual DbSet<NetMotivosDescuentoTiendum> NetMotivosDescuentoTienda { get; set; }
        public virtual DbSet<NetMotivosDevolucionTiendum> NetMotivosDevolucionTienda { get; set; }
        public virtual DbSet<NetPeticionReenvio> NetPeticionReenvios { get; set; }
        public virtual DbSet<NetTarifasTiendum> NetTarifasTienda { get; set; }
        public virtual DbSet<NetTarjetaFidelizacion> NetTarjetaFidelizacions { get; set; }
        public virtual DbSet<NetTerminal> NetTerminals { get; set; }
        public virtual DbSet<NetTiendum> NetTienda { get; set; }
        public virtual DbSet<NetTipoTerminal> NetTipoTerminals { get; set; }
        public virtual DbSet<NetVendedoresTiendum> NetVendedoresTienda { get; set; }
        public virtual DbSet<Nombresdocsid> Nombresdocsids { get; set; }
        public virtual DbSet<NombresdocsidGruposalmacen> NombresdocsidGruposalmacens { get; set; }
        public virtual DbSet<Nomina> Nominas { get; set; }
        public virtual DbSet<Nominasenlacecontum> Nominasenlaceconta { get; set; }
        public virtual DbSet<Norma> Normas { get; set; }
        public virtual DbSet<Numerosserieregul> Numerosseriereguls { get; set; }
        public virtual DbSet<Ocupantesreserva> Ocupantesreservas { get; set; }
        public virtual DbSet<Opcionestesorerium> Opcionestesoreria { get; set; }
        public virtual DbSet<Ordenesfabcab> Ordenesfabcabs { get; set; }
        public virtual DbSet<Ordenesfabfase> Ordenesfabfases { get; set; }
        public virtual DbSet<Ordenesfablin> Ordenesfablins { get; set; }
        public virtual DbSet<Ordenesmenudetalle> Ordenesmenudetalles { get; set; }
        public virtual DbSet<Pago> Pagos { get; set; }
        public virtual DbSet<Paise> Paises { get; set; }
        public virtual DbSet<Paqueteshotelcliente> Paqueteshotelclientes { get; set; }
        public virtual DbSet<Parametro> Parametros { get; set; }
        public virtual DbSet<Parametrostiposterminal> Parametrostiposterminals { get; set; }
        public virtual DbSet<Pasarelapago> Pasarelapagos { get; set; }
        public virtual DbSet<Pedcompracab> Pedcompracabs { get; set; }
        public virtual DbSet<Pedcompracabt> Pedcompracabts { get; set; }
        public virtual DbSet<Pedcompracamposlibre> Pedcompracamposlibres { get; set; }
        public virtual DbSet<Pedcompradto> Pedcompradtos { get; set; }
        public virtual DbSet<Pedcomprafirma> Pedcomprafirmas { get; set; }
        public virtual DbSet<Pedcompralin> Pedcompralins { get; set; }
        public virtual DbSet<Pedcompralint> Pedcompralints { get; set; }
        public virtual DbSet<Pedcompratalla> Pedcompratallas { get; set; }
        public virtual DbSet<Pedcompratot> Pedcompratots { get; set; }
        public virtual DbSet<Pedtmp> Pedtmps { get; set; }
        public virtual DbSet<Pedventacab> Pedventacabs { get; set; }
        public virtual DbSet<Pedventacabt> Pedventacabts { get; set; }
        public virtual DbSet<Pedventacamposlibre> Pedventacamposlibres { get; set; }
        public virtual DbSet<Pedventaconsumo> Pedventaconsumos { get; set; }
        public virtual DbSet<Pedventacupone> Pedventacupones { get; set; }
        public virtual DbSet<Pedventacuponesgenerado> Pedventacuponesgenerados { get; set; }
        public virtual DbSet<Pedventadto> Pedventadtos { get; set; }
        public virtual DbSet<Pedventafirma> Pedventafirmas { get; set; }
        public virtual DbSet<Pedventalin> Pedventalins { get; set; }
        public virtual DbSet<Pedventalinpromocione> Pedventalinpromociones { get; set; }
        public virtual DbSet<Pedventamodif> Pedventamodifs { get; set; }
        public virtual DbSet<Pedventapromocione> Pedventapromociones { get; set; }
        public virtual DbSet<Pedventatot> Pedventatots { get; set; }
        public virtual DbSet<Persona> Personas { get; set; }
        public virtual DbSet<Planta> Plantas { get; set; }
        public virtual DbSet<Plantilla> Plantillas { get; set; }
        public virtual DbSet<Plantillasusuario> Plantillasusuarios { get; set; }
        public virtual DbSet<Pluggin> Pluggins { get; set; }
        public virtual DbSet<Plugginsempresa> Plugginsempresas { get; set; }
        public virtual DbSet<Plugin> Plugins { get; set; }
        public virtual DbSet<PmSituacione> PmSituaciones { get; set; }
        public virtual DbSet<PmTerminale> PmTerminales { get; set; }
        public virtual DbSet<Preciosc> Precioscs { get; set; }
        public virtual DbSet<Precioscompra> Precioscompras { get; set; }
        public virtual DbSet<Precioshabitaciondium> Precioshabitaciondia { get; set; }
        public virtual DbSet<Precioshotel> Precioshotels { get; set; }
        public virtual DbSet<Precioshoteldium> Precioshoteldia { get; set; }
        public virtual DbSet<Preciosregiman> Preciosregimen { get; set; }
        public virtual DbSet<Preciossuplemento> Preciossuplementos { get; set; }
        public virtual DbSet<Preciosventum> Preciosventa { get; set; }
        public virtual DbSet<Predefinidoslin> Predefinidoslins { get; set; }
        public virtual DbSet<Preguntasglobale> Preguntasglobales { get; set; }
        public virtual DbSet<Presupuesto> Presupuestos { get; set; }
        public virtual DbSet<Presupuestoscab> Presupuestoscabs { get; set; }
        public virtual DbSet<Presupuestoscamposlibre> Presupuestoscamposlibres { get; set; }
        public virtual DbSet<Presupuestosdto> Presupuestosdtos { get; set; }
        public virtual DbSet<Presupuestoslin> Presupuestoslins { get; set; }
        public virtual DbSet<Presupuestospartida> Presupuestospartidas { get; set; }
        public virtual DbSet<Presupuestostot> Presupuestostots { get; set; }
        public virtual DbSet<Previsioncompra> Previsioncompras { get; set; }
        public virtual DbSet<Previsiondpto> Previsiondptos { get; set; }
        public virtual DbSet<Previsione> Previsiones { get; set; }
        public virtual DbSet<Previsiontemp> Previsiontemps { get; set; }
        public virtual DbSet<Previsionventa> Previsionventas { get; set; }
        public virtual DbSet<Procedencia> Procedencias { get; set; }
        public virtual DbSet<Proceso> Procesos { get; set; }
        public virtual DbSet<Procesosemail> Procesosemails { get; set; }
        public virtual DbSet<Procesosespeciale> Procesosespeciales { get; set; }
        public virtual DbSet<Procesosespecialesexec> Procesosespecialesexecs { get; set; }
        public virtual DbSet<Procesosespecialesparam> Procesosespecialesparams { get; set; }
        public virtual DbSet<Procesosespecialessql> Procesosespecialessqls { get; set; }
        public virtual DbSet<Procesosespecialesusu> Procesosespecialesusus { get; set; }
        public virtual DbSet<Procesoslin> Procesoslins { get; set; }
        public virtual DbSet<Procesoslog> Procesoslogs { get; set; }
        public virtual DbSet<Promocione> Promociones { get; set; }
        public virtual DbSet<Promocionescliente> Promocionesclientes { get; set; }
        public virtual DbSet<Promocionesconseguida> Promocionesconseguidas { get; set; }
        public virtual DbSet<Promocionesempresa> Promocionesempresas { get; set; }
        public virtual DbSet<Promocionesformaspago> Promocionesformaspagos { get; set; }
        public virtual DbSet<Promocionesgrupo> Promocionesgrupos { get; set; }
        public virtual DbSet<Promocionesgruposalmacen> Promocionesgruposalmacens { get; set; }
        public virtual DbSet<Promocioneshostelerium> Promocioneshosteleria { get; set; }
        public virtual DbSet<Promocionesidioma> Promocionesidiomas { get; set; }
        public virtual DbSet<Promocionesincompatible> Promocionesincompatibles { get; set; }
        public virtual DbSet<Promocionestarifa> Promocionestarifas { get; set; }
        public virtual DbSet<Promocionesusuario> Promocionesusuarios { get; set; }
        public virtual DbSet<Proveedore> Proveedores { get; set; }
        public virtual DbSet<Proveedorescamposlibre> Proveedorescamposlibres { get; set; }
        public virtual DbSet<Proveedoresretencionesiva> Proveedoresretencionesivas { get; set; }
        public virtual DbSet<Proveedoresterminal> Proveedoresterminals { get; set; }
        public virtual DbSet<Raicescontable> Raicescontables { get; set; }
        public virtual DbSet<Raicesserie> Raicesseries { get; set; }
        public virtual DbSet<Rango> Rangos { get; set; }
        public virtual DbSet<Rangohora> Rangohoras { get; set; }
        public virtual DbSet<Rappelsproveedore> Rappelsproveedores { get; set; }
        public virtual DbSet<Recursosempresa> Recursosempresas { get; set; }
        public virtual DbSet<Recursosservicio> Recursosservicios { get; set; }
        public virtual DbSet<Referencia> Referencias { get; set; }
        public virtual DbSet<Referenciasprov> Referenciasprovs { get; set; }
        public virtual DbSet<Regalospendientestarjetum> Regalospendientestarjeta { get; set; }
        public virtual DbSet<Regimene> Regimenes { get; set; }
        public virtual DbSet<Regimenesfacturacion> Regimenesfacturacions { get; set; }
        public virtual DbSet<Regimenfacturacion> Regimenfacturacions { get; set; }
        public virtual DbSet<Regimenret> Regimenrets { get; set; }
        public virtual DbSet<Registroanulacione> Registroanulaciones { get; set; }
        public virtual DbSet<Registroauditorium> Registroauditoria { get; set; }
        public virtual DbSet<Registroempleado> Registroempleados { get; set; }
        public virtual DbSet<Registroincidenciase> Registroincidenciases { get; set; }
        public virtual DbSet<Regularizacion> Regularizacions { get; set; }
        public virtual DbSet<Relacionescuentasefectivo> Relacionescuentasefectivos { get; set; }
        public virtual DbSet<Relcamposlibresubicacion> Relcamposlibresubicacions { get; set; }
        public virtual DbSet<RemAccione> RemAcciones { get; set; }
        public virtual DbSet<RemCajasfront> RemCajasfronts { get; set; }
        public virtual DbSet<RemCajasfrontseries> RemCajasfrontseries { get; set; }
        public virtual DbSet<RemCajasfrontsseriessubempresa> RemCajasfrontsseriessubempresas { get; set; }
        public virtual DbSet<RemCajasfrontsseriessubempresasdecentral> RemCajasfrontsseriessubempresasdecentrals { get; set; }
        public virtual DbSet<RemConfig> RemConfigs { get; set; }
        public virtual DbSet<RemConfigdisenysimpresorarest> RemConfigdisenysimpresorarests { get; set; }
        public virtual DbSet<RemConfigemailfront> RemConfigemailfronts { get; set; }
        public virtual DbSet<RemConfigsala> RemConfigsalas { get; set; }
        public virtual DbSet<RemConfigscreen> RemConfigscreens { get; set; }
        public virtual DbSet<RemControlacceso> RemControlaccesos { get; set; }
        public virtual DbSet<RemControlreplicacion> RemControlreplicacions { get; set; }
        public virtual DbSet<RemCubierto> RemCubiertos { get; set; }
        public virtual DbSet<RemDisenysdoc> RemDisenysdocs { get; set; }
        public virtual DbSet<RemDispositivo> RemDispositivos { get; set; }
        public virtual DbSet<RemDispositivoslin> RemDispositivoslins { get; set; }
        public virtual DbSet<RemDispositivosrest> RemDispositivosrests { get; set; }
        public virtual DbSet<RemFront> RemFronts { get; set; }
        public virtual DbSet<RemFrontsinformedecentral> RemFrontsinformedecentrals { get; set; }
        public virtual DbSet<RemFrontsinstancia> RemFrontsinstancias { get; set; }
        public virtual DbSet<RemFrontsplugginsdecentral> RemFrontsplugginsdecentrals { get; set; }
        public virtual DbSet<RemFrontspropiedade> RemFrontspropiedades { get; set; }
        public virtual DbSet<RemFrontspropiedadesdecentral> RemFrontspropiedadesdecentrals { get; set; }
        public virtual DbSet<RemFrontssubempresa> RemFrontssubempresas { get; set; }
        public virtual DbSet<RemFrontssubempresasdecentral> RemFrontssubempresasdecentrals { get; set; }
        public virtual DbSet<RemFrontsterminale> RemFrontsterminales { get; set; }
        public virtual DbSet<RemFrontsupdate> RemFrontsupdates { get; set; }
        public virtual DbSet<RemFrontsupdatelin> RemFrontsupdatelins { get; set; }
        public virtual DbSet<RemGrupossecsimpresorarest> RemGrupossecsimpresorarests { get; set; }
        public virtual DbSet<RemHotelesFront> RemHotelesFronts { get; set; }
        public virtual DbSet<RemImpresora> RemImpresoras { get; set; }
        public virtual DbSet<RemImpresorasrest> RemImpresorasrests { get; set; }
        public virtual DbSet<RemIncidencia> RemIncidencias { get; set; }
        public virtual DbSet<RemInfoentidadesfront> RemInfoentidadesfronts { get; set; }
        public virtual DbSet<RemInfoversionesfront> RemInfoversionesfronts { get; set; }
        public virtual DbSet<RemInitconfiguracione> RemInitconfiguraciones { get; set; }
        public virtual DbSet<RemIpfront> RemIpfronts { get; set; }
        public virtual DbSet<RemIpfrontslocal> RemIpfrontslocals { get; set; }
        public virtual DbSet<RemListasfront> RemListasfronts { get; set; }
        public virtual DbSet<RemListasfrontsdecentral> RemListasfrontsdecentrals { get; set; }
        public virtual DbSet<RemListasfrontsdetalle> RemListasfrontsdetalles { get; set; }
        public virtual DbSet<RemListashotele> RemListashoteles { get; set; }
        public virtual DbSet<RemModelosimpresorarest> RemModelosimpresorarests { get; set; }
        public virtual DbSet<RemPedtempcab> RemPedtempcabs { get; set; }
        public virtual DbSet<RemPedtemplin> RemPedtemplins { get; set; }
        public virtual DbSet<RemProveedoresfront> RemProveedoresfronts { get; set; }
        public virtual DbSet<RemRango> RemRangos { get; set; }
        public virtual DbSet<RemRegistrodispositivosrest> RemRegistrodispositivosrests { get; set; }
        public virtual DbSet<RemSala> RemSalas { get; set; }
        public virtual DbSet<RemSecsimpresora> RemSecsimpresoras { get; set; }
        public virtual DbSet<RemSecsimpresorarest> RemSecsimpresorarests { get; set; }
        public virtual DbSet<RemSqlsfront> RemSqlsfronts { get; set; }
        public virtual DbSet<RemTerminale> RemTerminales { get; set; }
        public virtual DbSet<RemTerminaleslin> RemTerminaleslins { get; set; }
        public virtual DbSet<RemTerminalesrest> RemTerminalesrests { get; set; }
        public virtual DbSet<RemTransaccione> RemTransacciones { get; set; }
        public virtual DbSet<RemVersione> RemVersiones { get; set; }
        public virtual DbSet<RemVersionesdefront> RemVersionesdefronts { get; set; }
        public virtual DbSet<RemVersioneslocal> RemVersioneslocals { get; set; }
        public virtual DbSet<Remesa> Remesas { get; set; }
        public virtual DbSet<Remesasadeudo> Remesasadeudos { get; set; }
        public virtual DbSet<Remesasvencimiento> Remesasvencimientos { get; set; }
        public virtual DbSet<RemfrontTransaccione> RemfrontTransacciones { get; set; }
        public virtual DbSet<Reparto> Repartos { get; set; }
        public virtual DbSet<Repartostock> Repartostocks { get; set; }
        public virtual DbSet<Repartostockcab> Repartostockcabs { get; set; }
        public virtual DbSet<Reserva> Reservas { get; set; }
        public virtual DbSet<Reservacamposlibre> Reservacamposlibres { get; set; }
        public virtual DbSet<Reservascomserv> Reservascomservs { get; set; }
        public virtual DbSet<Reservascuposusado> Reservascuposusados { get; set; }
        public virtual DbSet<Reservasdoc> Reservasdocs { get; set; }
        public virtual DbSet<Reservasestado> Reservasestados { get; set; }
        public virtual DbSet<Reservaslin> Reservaslins { get; set; }
        public virtual DbSet<Respuestasasuntoconfigurable> Respuestasasuntoconfigurables { get; set; }
        public virtual DbSet<RestDiseny> RestDisenys { get; set; }
        public virtual DbSet<RestImpresiondoc> RestImpresiondocs { get; set; }
        public virtual DbSet<RestTiquetsdiseny> RestTiquetsdisenies { get; set; }
        public virtual DbSet<Resultadosgeneranservicio> Resultadosgeneranservicios { get; set; }
        public virtual DbSet<Resultadosglobalesservicio> Resultadosglobalesservicios { get; set; }
        public virtual DbSet<Ruta> Rutas { get; set; }
        public virtual DbSet<Rutaslin> Rutaslins { get; set; }
        public virtual DbSet<Scoreboardsusuario> Scoreboardsusuarios { get; set; }
        public virtual DbSet<Seccione> Secciones { get; set; }
        public virtual DbSet<Secsimpresora> Secsimpresoras { get; set; }
        public virtual DbSet<Secuenciacargosprov> Secuenciacargosprovs { get; set; }
        public virtual DbSet<SemanasCtovtainv> SemanasCtovtainvs { get; set; }
        public virtual DbSet<SemanasCtovtum> SemanasCtovta { get; set; }
        public virtual DbSet<SerieAn> SerieAns { get; set; }
        public virtual DbSet<SeriePpto> SeriePptos { get; set; }
        public virtual DbSet<SerieSemana> SerieSemanas { get; set; }
        public virtual DbSet<Series> Series { get; set; }
        public virtual DbSet<Seriescamposlibre> Seriescamposlibres { get; set; }
        public virtual DbSet<Seriesdoc> Seriesdocs { get; set; }
        public virtual DbSet<Seriesresolucion> Seriesresolucions { get; set; }
        public virtual DbSet<Servicio> Servicios { get; set; }
        public virtual DbSet<Serviciosarticulo> Serviciosarticulos { get; set; }
        public virtual DbSet<Serviciosauditorium> Serviciosauditoria { get; set; }
        public virtual DbSet<Servicioscamposlibre> Servicioscamposlibres { get; set; }
        public virtual DbSet<Serviciosdocumento> Serviciosdocumentos { get; set; }
        public virtual DbSet<Serviciosglobale> Serviciosglobales { get; set; }
        public virtual DbSet<Serviciosglobalescomentario> Serviciosglobalescomentarios { get; set; }
        public virtual DbSet<Serviciosparada> Serviciosparadas { get; set; }
        public virtual DbSet<ShowDiapositiva> ShowDiapositivas { get; set; }
        public virtual DbSet<ShowDiapositivagrupo> ShowDiapositivagrupos { get; set; }
        public virtual DbSet<ShowDiapositivaspresentacion> ShowDiapositivaspresentacions { get; set; }
        public virtual DbSet<ShowHorario> ShowHorarios { get; set; }
        public virtual DbSet<ShowHorariofront> ShowHorariofronts { get; set; }
        public virtual DbSet<ShowItem> ShowItems { get; set; }
        public virtual DbSet<ShowPresentacione> ShowPresentaciones { get; set; }
        public virtual DbSet<ShowPresentacionhorario> ShowPresentacionhorarios { get; set; }
        public virtual DbSet<ShowRecurso> ShowRecursos { get; set; }
        public virtual DbSet<Situacione> Situaciones { get; set; }
        public virtual DbSet<Situacionesarticulo> Situacionesarticulos { get; set; }
        public virtual DbSet<Situacionesfamilium> Situacionesfamilia { get; set; }
        public virtual DbSet<Situacionesmacro> Situacionesmacros { get; set; }
        public virtual DbSet<SmsEnviado> SmsEnviados { get; set; }
        public virtual DbSet<SmsTexto> SmsTextos { get; set; }
        public virtual DbSet<Sql> Sqls { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Stocksflag> Stocksflags { get; set; }
        public virtual DbSet<Stocksporz> Stocksporzs { get; set; }
        public virtual DbSet<Subfamilia> Subfamilias { get; set; }
        public virtual DbSet<Sucursale> Sucursales { get; set; }
        public virtual DbSet<Sucursalespermiso> Sucursalespermisos { get; set; }
        public virtual DbSet<Sucursalesvalore> Sucursalesvalores { get; set; }
        public virtual DbSet<Suplemento> Suplementos { get; set; }
        public virtual DbSet<Sustituto> Sustitutos { get; set; }
        public virtual DbSet<Tacone> Tacones { get; set; }
        public virtual DbSet<Talla> Tallas { get; set; }
        public virtual DbSet<Tareasauto> Tareasautos { get; set; }
        public virtual DbSet<TareasautoLog> TareasautoLogs { get; set; }
        public virtual DbSet<Tarifascliente> Tarifasclientes { get; set; }
        public virtual DbSet<Tarifasclientedmn> Tarifasclientedmns { get; set; }
        public virtual DbSet<Tarifascompra> Tarifascompras { get; set; }
        public virtual DbSet<Tarifashotel> Tarifashotels { get; set; }
        public virtual DbSet<Tarifashotelarticulo> Tarifashotelarticulos { get; set; }
        public virtual DbSet<Tarifashotelcalendario> Tarifashotelcalendarios { get; set; }
        public virtual DbSet<Tarifashotelcalendariodefecto> Tarifashotelcalendariodefectos { get; set; }
        public virtual DbSet<Tarifashotelcliente> Tarifashotelclientes { get; set; }
        public virtual DbSet<Tarifashotelextra> Tarifashotelextras { get; set; }
        public virtual DbSet<Tarifashotelgrupo> Tarifashotelgrupos { get; set; }
        public virtual DbSet<Tarifashotelrango> Tarifashotelrangos { get; set; }
        public virtual DbSet<Tarifashotelservicio> Tarifashotelservicios { get; set; }
        public virtual DbSet<Tarifashoteltemporada> Tarifashoteltemporadas { get; set; }
        public virtual DbSet<Tarifasventagruposalmacen> Tarifasventagruposalmacens { get; set; }
        public virtual DbSet<Tarifasventaregla> Tarifasventareglas { get; set; }
        public virtual DbSet<Tarifasventausuario> Tarifasventausuarios { get; set; }
        public virtual DbSet<Tarifasventum> Tarifasventa { get; set; }
        public virtual DbSet<Tarjeta> Tarjetas { get; set; }
        public virtual DbSet<Tarjetascliente> Tarjetasclientes { get; set; }
        public virtual DbSet<Tarjetasconsumicion> Tarjetasconsumicions { get; set; }
        public virtual DbSet<Tarjetascontcondicione> Tarjetascontcondiciones { get; set; }
        public virtual DbSet<Tarjetascontmenu> Tarjetascontmenus { get; set; }
        public virtual DbSet<Tarjetascontpromocione> Tarjetascontpromociones { get; set; }
        public virtual DbSet<Tarjetaspromocion> Tarjetaspromocions { get; set; }
        public virtual DbSet<Tef> Tefs { get; set; }
        public virtual DbSet<TefsConfig> TefsConfigs { get; set; }
        public virtual DbSet<TefsParam> TefsParams { get; set; }
        public virtual DbSet<Teftransaccione> Teftransacciones { get; set; }
        public virtual DbSet<Televentum> Televenta { get; set; }
        public virtual DbSet<TempInventario12996941598> TempInventario12996941598s { get; set; }
        public virtual DbSet<Temporada> Temporadas { get; set; }
        public virtual DbSet<Temporadasdium> Temporadasdia { get; set; }
        public virtual DbSet<Temporadashotel> Temporadashotels { get; set; }
        public virtual DbSet<Temporadaslin> Temporadaslins { get; set; }
        public virtual DbSet<Temporalestyc> Temporalestycs { get; set; }
        public virtual DbSet<Terminale> Terminales { get; set; }
        public virtual DbSet<Terminaleslin> Terminaleslins { get; set; }
        public virtual DbSet<Tesorerium> Tesoreria { get; set; }
        public virtual DbSet<Ticketscab> Ticketscabs { get; set; }
        public virtual DbSet<Ticketslin> Ticketslins { get; set; }
        public virtual DbSet<Ticketspag> Ticketspags { get; set; }
        public virtual DbSet<Tipoarreglo> Tipoarreglos { get; set; }
        public virtual DbSet<Tipoasunto> Tipoasuntos { get; set; }
        public virtual DbSet<Tipoasuntoparadefecto> Tipoasuntoparadefectos { get; set; }
        public virtual DbSet<Tipoaviso> Tipoavisos { get; set; }
        public virtual DbSet<Tipoempleado> Tipoempleados { get; set; }
        public virtual DbSet<Tiporegalostarjetum> Tiporegalostarjeta { get; set; }
        public virtual DbSet<Tiposarticulo> Tiposarticulos { get; set; }
        public virtual DbSet<Tiposcliente> Tiposclientes { get; set; }
        public virtual DbSet<Tiposdium> Tiposdia { get; set; }
        public virtual DbSet<Tiposdoc> Tiposdocs { get; set; }
        public virtual DbSet<Tiposdocesquematraspaso> Tiposdocesquematraspasos { get; set; }
        public virtual DbSet<Tiposdocumentosidentif> Tiposdocumentosidentifs { get; set; }
        public virtual DbSet<Tiposdocusuario> Tiposdocusuarios { get; set; }
        public virtual DbSet<Tiposerviciosdelivery> Tiposerviciosdeliveries { get; set; }
        public virtual DbSet<Tipospago> Tipospagos { get; set; }
        public virtual DbSet<TipospagoIdioma> TipospagoIdiomas { get; set; }
        public virtual DbSet<Tiposreserva> Tiposreservas { get; set; }
        public virtual DbSet<Tiposretencion> Tiposretencions { get; set; }
        public virtual DbSet<Tiposretencionclave> Tiposretencionclaves { get; set; }
        public virtual DbSet<Tiposretencionlin> Tiposretencionlins { get; set; }
        public virtual DbSet<Tipostarjetacondicione> Tipostarjetacondiciones { get; set; }
        public virtual DbSet<Tipostarjetacondicionesrtl> Tipostarjetacondicionesrtls { get; set; }
        public virtual DbSet<Tipostarjetamenu> Tipostarjetamenus { get; set; }
        public virtual DbSet<Tipostarjetaofertum> Tipostarjetaoferta { get; set; }
        public virtual DbSet<Tipostarjetapromocione> Tipostarjetapromociones { get; set; }
        public virtual DbSet<Tipostarjetapromocioneslin> Tipostarjetapromocioneslins { get; set; }
        public virtual DbSet<Tipostarjetapromocioneslinrtl> Tipostarjetapromocioneslinrtls { get; set; }
        public virtual DbSet<Tipostarjetum> Tipostarjeta { get; set; }
        public virtual DbSet<Tiposterminal> Tiposterminals { get; set; }
        public virtual DbSet<Tipotarjetacredito> Tipotarjetacreditos { get; set; }
        public virtual DbSet<Tipotarjetacreditohotel> Tipotarjetacreditohotels { get; set; }
        public virtual DbSet<Tipotarjetascliente> Tipotarjetasclientes { get; set; }
        public virtual DbSet<Tiquetscab> Tiquetscabs { get; set; }
        public virtual DbSet<Tiquetsconsumo> Tiquetsconsumos { get; set; }
        public virtual DbSet<Tiquetsfacturado> Tiquetsfacturados { get; set; }
        public virtual DbSet<Tiquetslin> Tiquetslins { get; set; }
        public virtual DbSet<Tiquetsmodif> Tiquetsmodifs { get; set; }
        public virtual DbSet<Tiquetspag> Tiquetspags { get; set; }
        public virtual DbSet<Torno> Tornos { get; set; }
        public virtual DbSet<Transporte> Transportes { get; set; }
        public virtual DbSet<Traspasoscab> Traspasoscabs { get; set; }
        public virtual DbSet<Traspasosfirma> Traspasosfirmas { get; set; }
        public virtual DbSet<TskConfigmarca> TskConfigmarcas { get; set; }
        public virtual DbSet<Turno> Turnos { get; set; }
        public virtual DbSet<Turnosarticulo> Turnosarticulos { get; set; }
        public virtual DbSet<Turnosarticulosdefecto> Turnosarticulosdefectos { get; set; }
        public virtual DbSet<Turnosplan> Turnosplans { get; set; }
        public virtual DbSet<Turnosplanusuario> Turnosplanusuarios { get; set; }
        public virtual DbSet<Ultimasventa> Ultimasventas { get; set; }
        public virtual DbSet<Ultimosbloqueo> Ultimosbloqueos { get; set; }
        public virtual DbSet<Urgenciasreparacion> Urgenciasreparacions { get; set; }
        public virtual DbSet<Usuarioslistascodigo> Usuarioslistascodigos { get; set; }
        public virtual DbSet<Vacacionesempleado> Vacacionesempleados { get; set; }
        public virtual DbSet<Vacacionesempresa> Vacacionesempresas { get; set; }
        public virtual DbSet<Vacacionesmotivo> Vacacionesmotivos { get; set; }
        public virtual DbSet<Vehiculospropio> Vehiculospropios { get; set; }
        public virtual DbSet<Vencimfpago> Vencimfpagos { get; set; }
        public virtual DbSet<Vendedore> Vendedores { get; set; }
        public virtual DbSet<Vendedorescontrato> Vendedorescontratos { get; set; }
        public virtual DbSet<Vendedoresdisponibilidad> Vendedoresdisponibilidads { get; set; }
        public virtual DbSet<Vendedoreshorario> Vendedoreshorarios { get; set; }
        public virtual DbSet<Vendedoreshotel> Vendedoreshotels { get; set; }
        public virtual DbSet<Vendedoresplan> Vendedoresplans { get; set; }
        public virtual DbSet<VendedoresplanE> VendedoresplanEs { get; set; }
        public virtual DbSet<Vendedoresplanincidencium> Vendedoresplanincidencia { get; set; }
        public virtual DbSet<Vendedoresterminal> Vendedoresterminals { get; set; }
        public virtual DbSet<Vendedoresturnosplan> Vendedoresturnosplans { get; set; }
        public virtual DbSet<Vendedoresusuario> Vendedoresusuarios { get; set; }
        public virtual DbSet<Ventasacumulada> Ventasacumuladas { get; set; }
        public virtual DbSet<Ventascashdro> Ventascashdros { get; set; }
        public virtual DbSet<Ventascashdroanticipo> Ventascashdroanticipos { get; set; }
        public virtual DbSet<Ventascashdrotesorerium> Ventascashdrotesoreria { get; set; }
        public virtual DbSet<Ventastef> Ventastefs { get; set; }
        public virtual DbSet<biz.bd2.Entities.Version> Versions { get; set; }
        public virtual DbSet<Visibilidadcliente> Visibilidadclientes { get; set; }
        public virtual DbSet<Visibilidadproveedore> Visibilidadproveedores { get; set; }
        public virtual DbSet<WbCubosAccount> WbCubosAccounts { get; set; }
        public virtual DbSet<_03b8e179Fb2546dfB84aA67e61553598> _03b8e179Fb2546dfB84aA67e61553598s { get; set; }
        public virtual DbSet<_0551e2bf40ab4fd2Ad4eEe5426d20324> _0551e2bf40ab4fd2Ad4eEe5426d20324s { get; set; }
        public virtual DbSet<_09e2a246D3c8487cBc7a91b2ae83ec11> _09e2a246D3c8487cBc7a91b2ae83ec11s { get; set; }
        public virtual DbSet<_192696bbB9ba464f872bD13c07ceb840> _192696bbB9ba464f872bD13c07ceb840s { get; set; }
        public virtual DbSet<_1a70b218Cb88441aBb258db47975eea3> _1a70b218Cb88441aBb258db47975eea3s { get; set; }
        public virtual DbSet<_247f23f6137c4b99B6a0008d7da298cd> _247f23f6137c4b99B6a0008d7da298cds { get; set; }
        public virtual DbSet<_2df861897877421e81024dfca62a0349> _2df861897877421e81024dfca62a0349s { get; set; }
        public virtual DbSet<_2e009aa1C86743e196c8B81fcd819b3f> _2e009aa1C86743e196c8B81fcd819b3fs { get; set; }
        public virtual DbSet<_3faf31c774294fd2A36e9dc5c3091643> _3faf31c774294fd2A36e9dc5c3091643s { get; set; }
        public virtual DbSet<_3fb3617bD0394ef38dae6059ea707fd6> _3fb3617bD0394ef38dae6059ea707fd6s { get; set; }
        public virtual DbSet<_4b6ac3d0C6de4220A8c4F36d8ece7023> _4b6ac3d0C6de4220A8c4F36d8ece7023s { get; set; }
        public virtual DbSet<_4c87c25a20894eb086d07ed9544640d2> _4c87c25a20894eb086d07ed9544640d2s { get; set; }
        public virtual DbSet<_62c72319Eb6c4f33B415A6cb2b387d64> _62c72319Eb6c4f33B415A6cb2b387d64s { get; set; }
        public virtual DbSet<_64b9d3a644494bde9664Fabeb4631e28> _64b9d3a644494bde9664Fabeb4631e28s { get; set; }
        public virtual DbSet<_6a3873ae69474a7f92c60aaaaf6e3fb2> _6a3873ae69474a7f92c60aaaaf6e3fb2s { get; set; }
        public virtual DbSet<_6af8693b9a074ca890c9Cc6eb1e11e20> _6af8693b9a074ca890c9Cc6eb1e11e20s { get; set; }
        public virtual DbSet<_6b0f92f3C2d341bfBc72Bc0773af6e6a> _6b0f92f3C2d341bfBc72Bc0773af6e6as { get; set; }
        public virtual DbSet<_6ddd884576dd4a6fAb5514af5ca140d0> _6ddd884576dd4a6fAb5514af5ca140d0s { get; set; }
        public virtual DbSet<_73099b2cF0d846e8A9e19ff54714d478> _73099b2cF0d846e8A9e19ff54714d478s { get; set; }
        public virtual DbSet<_75b8a23c8d654a9e805578b62ac0a08a> _75b8a23c8d654a9e805578b62ac0a08as { get; set; }
        public virtual DbSet<_897fbcf1Db6b4b7f97ba904d4d552d34> _897fbcf1Db6b4b7f97ba904d4d552d34s { get; set; }
        public virtual DbSet<_8b1b49b4Fd6e40ba95d4Fca3a047fe0d> _8b1b49b4Fd6e40ba95d4Fca3a047fe0ds { get; set; }
        public virtual DbSet<_946315b2531f4aacAb64F894069b2e1b> _946315b2531f4aacAb64F894069b2e1bs { get; set; }
        public virtual DbSet<_9d21019f98614e98B79403d7de2acb70> _9d21019f98614e98B79403d7de2acb70s { get; set; }
        public virtual DbSet<TEstatusPedidosEntrega> TEstatusPedidosEntregas { get; set; }
        public virtual DbSet<TFotosPedidosEntrega> TFotosPedidosEntregas { get; set; }
        public virtual DbSet<TPedidosEntrega> TPedidosEntregas { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Accionespromocion>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Idaccion })
                    .HasName("ACCIONESPROMOCION_PK");

                entity.ToTable("ACCIONESPROMOCION");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Idaccion).HasColumnName("IDACCION");

                entity.Property(e => e.Tipoaccion).HasColumnName("TIPOACCION");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Accionespromocions)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("ACCIONESPROMOCION_FK");
            });

            modelBuilder.Entity<Accionespromocionlin>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Idaccion, e.Posicion })
                    .HasName("ACCIONESPROMOCIONLIN_PK");

                entity.ToTable("ACCIONESPROMOCIONLIN");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Idaccion).HasColumnName("IDACCION");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Accionespromocionlins)
                    .HasForeignKey(d => new { d.Idpromocion, d.Idaccion })
                    .HasConstraintName("ACCIONESPROMOCIONLIN_FK");
            });

            modelBuilder.Entity<Actividade>(entity =>
            {
                entity.HasKey(e => e.Codactividad)
                    .HasName("ACTIVIDADES_PK");

                entity.ToTable("ACTIVIDADES");

                entity.Property(e => e.Codactividad)
                    .HasColumnName("CODACTIVIDAD")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Acumuladoretencione>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Mes, e.Anyo, e.Codcliprov, e.Codregimenartic })
                    .HasName("ACUMULADORETENCIONES_PK");

                entity.ToTable("ACUMULADORETENCIONES");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Anyo).HasColumnName("ANYO");

                entity.Property(e => e.Codcliprov).HasColumnName("CODCLIPROV");

                entity.Property(e => e.Codregimenartic).HasColumnName("CODREGIMENARTIC");

                entity.Property(e => e.Pagado).HasColumnName("PAGADO");

                entity.Property(e => e.Retenido).HasColumnName("RETENIDO");
            });

            modelBuilder.Entity<AenaCanone>(entity =>
            {
                entity.HasKey(e => e.IdCanon)
                    .HasName("AENA_CANONES_PK");

                entity.ToTable("AENA_CANONES");

                entity.Property(e => e.IdCanon)
                    .HasColumnName("ID_CANON")
                    .ValueGeneratedNever();

                entity.Property(e => e.Concepto)
                    .HasColumnName("CONCEPTO")
                    .HasMaxLength(18);

                entity.Property(e => e.ImporteUnidad).HasColumnName("IMPORTE_UNIDAD");

                entity.Property(e => e.PorcentajeVentas).HasColumnName("PORCENTAJE_VENTAS");

                entity.Property(e => e.Subconcepto).HasColumnName("SUBCONCEPTO");
            });

            modelBuilder.Entity<AenaContrato>(entity =>
            {
                entity.HasKey(e => e.IdContrato)
                    .HasName("AENA_CONTRATOS_PK");

                entity.ToTable("AENA_CONTRATOS");

                entity.Property(e => e.IdContrato)
                    .HasColumnName("ID_CONTRATO")
                    .ValueGeneratedNever();

                entity.Property(e => e.CodigoAena)
                    .HasColumnName("CODIGO_AENA")
                    .HasMaxLength(30);

                entity.Property(e => e.DescripcionContrato)
                    .HasColumnName("DESCRIPCION_CONTRATO")
                    .HasMaxLength(100);

                entity.Property(e => e.Fijo).HasColumnName("FIJO");
            });

            modelBuilder.Entity<AenaSubfamilia>(entity =>
            {
                entity.HasKey(e => new { e.IdContrato, e.IdSubfamilia })
                    .HasName("AENA_SUBFAMILIAS_PK");

                entity.ToTable("AENA_SUBFAMILIAS");

                entity.Property(e => e.IdContrato).HasColumnName("ID_CONTRATO");

                entity.Property(e => e.IdSubfamilia).HasColumnName("ID_SUBFAMILIA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.IdCanon).HasColumnName("ID_CANON");

                entity.HasOne(d => d.IdCanonNavigation)
                    .WithMany(p => p.AenaSubfamilia)
                    .HasForeignKey(d => d.IdCanon)
                    .HasConstraintName("AENA_SUBFAMILIAS_CANONES");

                entity.HasOne(d => d.IdContratoNavigation)
                    .WithMany(p => p.AenaSubfamilia)
                    .HasForeignKey(d => d.IdContrato)
                    .HasConstraintName("AENA_SUBFAMILIAS_CONTRATOS");
            });

            modelBuilder.Entity<AenaVenta>(entity =>
            {
                entity.HasKey(e => new { e.Z, e.Caja, e.IdVenta, e.TipoFamilia, e.TipoSubfamilia, e.TipoFiscal })
                    .HasName("AENA_VENTAS_PK");

                entity.ToTable("AENA_VENTAS");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(7);

                entity.Property(e => e.IdVenta).HasColumnName("ID_VENTA");

                entity.Property(e => e.TipoFamilia).HasColumnName("TIPO_FAMILIA");

                entity.Property(e => e.TipoSubfamilia).HasColumnName("TIPO_SUBFAMILIA");

                entity.Property(e => e.TipoFiscal).HasColumnName("TIPO_FISCAL");

                entity.Property(e => e.ArticulosD).HasColumnName("ARTICULOS_D");

                entity.Property(e => e.ArticulosV).HasColumnName("ARTICULOS_V");

                entity.Property(e => e.ImpbrutoDsfz).HasColumnName("IMPBRUTO_DSFZ");

                entity.Property(e => e.ImpbrutoVsfz).HasColumnName("IMPBRUTO_VSFZ");

                entity.Property(e => e.ImpdescuentoDsfz).HasColumnName("IMPDESCUENTO_DSFZ");

                entity.Property(e => e.ImpdescuentoVsfz).HasColumnName("IMPDESCUENTO_VSFZ");

                entity.Property(e => e.ImpnetoDsfz).HasColumnName("IMPNETO_DSFZ");

                entity.Property(e => e.ImpnetoVsfz).HasColumnName("IMPNETO_VSFZ");
            });

            modelBuilder.Entity<Aenadto>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_CODIGO");

                entity.ToTable("AENADTOS");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Dto).HasColumnName("DTO");
            });

            modelBuilder.Entity<Aeropuerto>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("AEROPUERTOS_PK");

                entity.ToTable("AEROPUERTOS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .HasMaxLength(3);

                entity.Property(e => e.Ciudad)
                    .HasColumnName("CIUDAD")
                    .HasMaxLength(75);

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Descpais)
                    .HasColumnName("DESCPAIS")
                    .HasMaxLength(75);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(75);

                entity.Property(e => e.Schengen)
                    .HasColumnName("SCHENGEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Unioneuropea)
                    .HasColumnName("UNIONEUROPEA")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<Albcompracab>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBCOMPRACAB_PK");

                entity.ToTable("ALBCOMPRACAB");

                entity.HasIndex(e => e.Codproveedor)
                    .HasName("ALBCOMPRACAB_PROVEEDOR");

                entity.HasIndex(e => e.Fechaalbaran)
                    .HasName("ALBCOMPRACAB_FECHA");

                entity.HasIndex(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBCOMPRACAB_DESC");

                entity.HasIndex(e => new { e.Numseriefac, e.Numfac, e.Nfac })
                    .HasName("PORNUMFAC_ALBCOMPRA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Chequeado)
                    .HasColumnName("CHEQUEADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Dtocomercial)
                    .HasColumnName("DTOCOMERCIAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dtopp)
                    .HasColumnName("DTOPP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esdevolucion)
                    .HasColumnName("ESDEVOLUCION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esundeposito)
                    .HasColumnName("ESUNDEPOSITO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechaalbaran)
                    .HasColumnName("FECHAALBARAN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaalbaranventa)
                    .HasColumnName("FECHAALBARANVENTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numfac).HasColumnName("NUMFAC");

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numseriefac)
                    .HasColumnName("NUMSERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seleccionado)
                    .HasColumnName("SELECCIONADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Sualbaran)
                    .HasColumnName("SUALBARAN")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipodocfac).HasColumnName("TIPODOCFAC");

                entity.Property(e => e.Totalbruto)
                    .HasColumnName("TOTALBRUTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalimpuestos)
                    .HasColumnName("TOTALIMPUESTOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalneto)
                    .HasColumnName("TOTALNETO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totdtocomercial)
                    .HasColumnName("TOTDTOCOMERCIAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totdtopp)
                    .HasColumnName("TOTDTOPP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Albcompracabs)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("ALBCOMPRACAB_FK");
            });

            modelBuilder.Entity<Albcompracamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBCOMPRACAMPOSLIBRES_PK");

                entity.ToTable("ALBCOMPRACAMPOSLIBRES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Sucursal)
                    .HasColumnName("SUCURSAL")
                    .HasMaxLength(50);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Albcompracamposlibre)
                    .HasForeignKey<Albcompracamposlibre>(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBCOMPRACAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Albcompradto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea })
                    .HasName("ALBCOMPRADTOS_PK");

                entity.ToTable("ALBCOMPRADTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albcompradtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N })
                    .HasConstraintName("ALBCOMPRADTOS_FK");
            });

            modelBuilder.Entity<Albcomprafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("ALBCOMPRAFIRMA_PK");

                entity.ToTable("ALBCOMPRAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Atdoccodeid)
                    .HasColumnName("ATDOCCODEID")
                    .HasMaxLength(250);

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.Albcompracab)
                    .WithOne(p => p.Albcomprafirma)
                    .HasForeignKey<Albcomprafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ALBCOMPRAFIRMA_FK");
            });

            modelBuilder.Entity<Albcompragasto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin, e.Idgasto, e.Codarticulo })
                    .HasName("ALBCOMPRAGASTOS_PK");

                entity.ToTable("ALBCOMPRAGASTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Idgasto).HasColumnName("IDGASTO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Enfactura).HasColumnName("ENFACTURA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Ngasto)
                    .HasColumnName("NGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numalbarangasto).HasColumnName("NUMALBARANGASTO");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Numseriegasto)
                    .HasColumnName("NUMSERIEGASTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Ordengasto).HasColumnName("ORDENGASTO");

                entity.Property(e => e.Sobrelineaspositivas)
                    .HasColumnName("SOBRELINEASPOSITIVAS")
                    .HasMaxLength(1);

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albcompragastos)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N, d.Numlin })
                    .HasConstraintName("ALBCOMPRAGASTOS_FK1");
            });

            modelBuilder.Entity<Albcompralin>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin })
                    .HasName("ALBCOMPRALIN_PK");

                entity.ToTable("ALBCOMPRALIN");

                entity.HasIndex(e => e.Codalmacen)
                    .HasName("ALBCOMPRALIN_CODALMACEN");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("ALBCOMPRALINPORCODARTIC");

                entity.HasIndex(e => e.Supedido)
                    .HasName("ALBCOMPRALIN_SUPEDIDO");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacen })
                    .HasName("ALBCOMPRALIN_ARTIC_ALMACEN");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.AbonodeN)
                    .HasColumnName("ABONODE_N")
                    .HasMaxLength(1);

                entity.Property(e => e.AbonodeNumalbaran).HasColumnName("ABONODE_NUMALBARAN");

                entity.Property(e => e.AbonodeNumserie)
                    .HasColumnName("ABONODE_NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codmacro).HasColumnName("CODMACRO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Deposito)
                    .HasColumnName("DEPOSITO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtotexto)
                    .HasColumnName("DTOTEXTO")
                    .HasMaxLength(60);

                entity.Property(e => e.Esoferta)
                    .HasColumnName("ESOFERTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Expandida)
                    .HasColumnName("EXPANDIDA")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('F')");

                entity.Property(e => e.Idmotivo).HasColumnName("IDMOTIVO");

                entity.Property(e => e.Importecargo1).HasColumnName("IMPORTECARGO1");

                entity.Property(e => e.Importecargo2).HasColumnName("IMPORTECARGO2");

                entity.Property(e => e.Importegastos).HasColumnName("IMPORTEGASTOS");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lineaoculta)
                    .HasColumnName("LINEAOCULTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Numkgexpansion).HasColumnName("NUMKGEXPANSION");

                entity.Property(e => e.Porcretencion).HasColumnName("PORCRETENCION");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioventa).HasColumnName("PRECIOVENTA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Tiporetencion).HasColumnName("TIPORETENCION");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totalexpansion).HasColumnName("TOTALEXPANSION");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Udmedida2expansion).HasColumnName("UDMEDIDA2EXPANSION");

                entity.Property(e => e.Udsabonadas).HasColumnName("UDSABONADAS");

                entity.Property(e => e.Udsexpansion).HasColumnName("UDSEXPANSION");

                entity.Property(e => e.Unid1)
                    .HasColumnName("UNID1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid2)
                    .HasColumnName("UNID2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid3)
                    .HasColumnName("UNID3")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid4)
                    .HasColumnName("UNID4")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unidadespagadas).HasColumnName("UNIDADESPAGADAS");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");

                entity.Property(e => e.Usarcoltallas)
                    .HasColumnName("USARCOLTALLAS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albcompralins)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBCOMPRALIN_FK1");
            });

            modelBuilder.Entity<Albcompralinamortizacion>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin })
                    .HasName("ALBCOMPRALINAMORTIZACION_PK");

                entity.ToTable("ALBCOMPRALINAMORTIZACION");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Codinmovilizado).HasColumnName("CODINMOVILIZADO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albcompralinamortizacions)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBCOMPRALINAMORTIZACION_FK");
            });

            modelBuilder.Entity<Albcompratalla>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlinea, e.Talla })
                    .HasName("ALBCOMPRATALLAS_PK");

                entity.ToTable("ALBCOMPRATALLAS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Importegastostalla).HasColumnName("IMPORTEGASTOSTALLA");

                entity.Property(e => e.Uds).HasColumnName("UDS");
            });

            modelBuilder.Entity<Albcompratot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("ALBCOMPRATOT_PK");

                entity.ToTable("ALBCOMPRATOT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.HasOne(d => d.Albcompracab)
                    .WithMany(p => p.Albcompratots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ALBCOMPRATOT_FK");
            });

            modelBuilder.Entity<Albventacab>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBVENTACAB_PK");

                entity.ToTable("ALBVENTACAB");

                entity.HasIndex(e => e.Codcliente)
                    .HasName("ALBVENTACAB_CLIENTE");

                entity.HasIndex(e => e.Codvendedor)
                    .HasName("ALBVENTACAB_CODVENDEDOR");

                entity.HasIndex(e => e.Descargar)
                    .HasName("ALBVENTACAB_DESCARGAR");

                entity.HasIndex(e => e.Entransito)
                    .HasName("ALBVENTACAB_ENTRANSITO");

                entity.HasIndex(e => e.Fecha)
                    .HasName("ALBVENTACAB_FECHA");

                entity.HasIndex(e => e.Idtarjeta)
                    .HasName("ALBVENTACAB_IDTARJETA");

                entity.HasIndex(e => new { e.Z, e.Caja })
                    .HasName("ALBVENTACAB_PORZCAJA");

                entity.HasIndex(e => new { e.Fecha, e.Codvendedor, e.Hora })
                    .HasName("ALBVENTACAB_FECHA_VENDEDOR_HORA");

                entity.HasIndex(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBVENTACAB_DESC");

                entity.HasIndex(e => new { e.Numseriefac, e.Numfac, e.Nfac })
                    .HasName("PORNUMFAC_ALBVENTA");

                entity.HasIndex(e => new { e.Tipodoc, e.Fecha, e.Numserie })
                    .HasName("ALBVENTACAB_FECHA_TIPODOC");

                entity.HasIndex(e => new { e.Numserie, e.Numalbaran, e.N, e.Fecha })
                    .HasName("ALBVENTACAB_DOC_FECHA");

                entity.HasIndex(e => new { e.Numserie, e.Numalbaran, e.Dtocomercial, e.Factormoneda, e.Hora, e.Sala, e.Mesa, e.Totalcosteiva, e.Totalneto, e.Caja, e.N, e.Fecha })
                    .HasName("ALBVENTACAB_N_FECHA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Automatico)
                    .HasColumnName("AUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Descargar)
                    .HasColumnName("DESCARGAR")
                    .HasMaxLength(1);

                entity.Property(e => e.Dtocomantescanjeopuntos).HasColumnName("DTOCOMANTESCANJEOPUNTOS");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Entransito)
                    .HasColumnName("ENTRANSITO")
                    .HasMaxLength(3);

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esbarra)
                    .HasColumnName("ESBARRA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esdevolucion)
                    .HasColumnName("ESDEVOLUCION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Estadodelivery).HasColumnName("ESTADODELIVERY");

                entity.Property(e => e.Esunprestamo)
                    .HasColumnName("ESUNPRESTAMO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecharecepcion)
                    .HasColumnName("FECHARECEPCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fo)
                    .HasColumnName("FO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaasignado)
                    .HasColumnName("HORAASIGNADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horacocina)
                    .HasColumnName("HORACOCINA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaelaborado)
                    .HasColumnName("HORAELABORADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaentregado)
                    .HasColumnName("HORAENTREGADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horatotal)
                    .HasColumnName("HORATOTAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Impresiones)
                    .HasColumnName("IMPRESIONES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mesa)
                    .HasColumnName("MESA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numcomensales)
                    .HasColumnName("NUMCOMENSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Numeroasunto)
                    .HasColumnName("NUMEROASUNTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Numfac).HasColumnName("NUMFAC");

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Numseriefac)
                    .HasColumnName("NUMSERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Porc).HasColumnName("PORC");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Puntosacum).HasColumnName("PUNTOSACUM");

                entity.Property(e => e.Puntoscanjeados).HasColumnName("PUNTOSCANJEADOS");

                entity.Property(e => e.Puntoscanjeopordtocom).HasColumnName("PUNTOSCANJEOPORDTOCOM");

                entity.Property(e => e.Sala)
                    .HasColumnName("SALA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Seleccionado)
                    .HasColumnName("SELECCIONADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieasunto)
                    .HasColumnName("SERIEASUNTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Sualbaran)
                    .HasColumnName("SUALBARAN")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipodocfac).HasColumnName("TIPODOCFAC");

                entity.Property(e => e.Tiquet)
                    .HasColumnName("TIQUET")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcoste2).HasColumnName("TOTALCOSTE2");

                entity.Property(e => e.Totalcosteiva)
                    .HasColumnName("TOTALCOSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcosteiva2).HasColumnName("TOTALCOSTEIVA2");

                entity.Property(e => e.Totalimpuestos).HasColumnName("TOTALIMPUESTOS");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");

                entity.Property(e => e.Totalpuntos).HasColumnName("TOTALPUNTOS");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totporc).HasColumnName("TOTPORC");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Traspasado)
                    .HasColumnName("TRASPASADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Vienedefo)
                    .HasColumnName("VIENEDEFO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Albventacabs)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("ALBVENTACAB_FK");
            });

            modelBuilder.Entity<Albventacamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBVENTACAMPOSLIBRES_PK");

                entity.ToTable("ALBVENTACAMPOSLIBRES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Proveedor).HasColumnName("PROVEEDOR");

                entity.Property(e => e.Requisicion)
                    .HasColumnName("REQUISICION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Albventacamposlibre)
                    .HasForeignKey<Albventacamposlibre>(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTACAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Albventaconsumicione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin, e.Idlin })
                    .HasName("ALBVENTACONSUMICIONES_PK");

                entity.ToTable("ALBVENTACONSUMICIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Idlin).HasColumnName("IDLIN");

                entity.Property(e => e.Dtoaplicado).HasColumnName("DTOAPLICADO");

                entity.Property(e => e.Esconsumicion).HasColumnName("ESCONSUMICION");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Importerebajado).HasColumnName("IMPORTEREBAJADO");

                entity.Property(e => e.Tarifaaplicada).HasColumnName("TARIFAAPLICADA");

                entity.Property(e => e.Tipotarjeta).HasColumnName("TIPOTARJETA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventaconsumiciones)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N, d.Numlin })
                    .HasConstraintName("ALBVENTACONSUMICIONES_FK");
            });

            modelBuilder.Entity<Albventaconsumo>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlinea, e.Codarticulo })
                    .HasName("ALBVENTACONSUMO_PK");

                entity.ToTable("ALBVENTACONSUMO");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Consumo).HasColumnName("CONSUMO");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventaconsumos)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTACONSUMO_FK");
            });

            modelBuilder.Entity<Albventacupone>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Eancupon })
                    .HasName("ALBVENTACUPONES_PK");

                entity.ToTable("ALBVENTACUPONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Eancupon)
                    .HasColumnName("EANCUPON")
                    .HasMaxLength(30);

                entity.Property(e => e.Idcupon).HasColumnName("IDCUPON");

                entity.Property(e => e.Importedto).HasColumnName("IMPORTEDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventacupones)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTACUPONES_FK");
            });

            modelBuilder.Entity<Albventacuponesgenerado>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Idpromocion, e.Eancupon })
                    .HasName("ALBVENTACUPONESGENERADOS_PK");

                entity.ToTable("ALBVENTACUPONESGENERADOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Eancupon)
                    .HasColumnName("EANCUPON")
                    .HasMaxLength(30);

                entity.Property(e => e.Importedto).HasColumnName("IMPORTEDTO");

                entity.Property(e => e.PromocionesclienteIdpromocion).HasColumnName("PROMOCIONESCLIENTE_IDPROMOCION");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventacuponesgenerados)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTACUPONESGENERADOS_FK");
            });

            modelBuilder.Entity<Albventadto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea })
                    .HasName("ALBVENTADTOS_PK");

                entity.ToTable("ALBVENTADTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventadtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N })
                    .HasConstraintName("ALBVENTADTOS_FK");
            });

            modelBuilder.Entity<Albventafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("ALBVENTAFIRMA_PK");

                entity.ToTable("ALBVENTAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Atdoccodeid)
                    .HasColumnName("ATDOCCODEID")
                    .HasMaxLength(250);

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.Albventacab)
                    .WithOne(p => p.Albventafirma)
                    .HasForeignKey<Albventafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ALBVENTAFIRMA_FK");
            });

            modelBuilder.Entity<Albventagp>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBVENTAGPS_PK");

                entity.ToTable("ALBVENTAGPS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Latitud).HasColumnName("LATITUD");

                entity.Property(e => e.Longitud).HasColumnName("LONGITUD");

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Albventagp)
                    .HasForeignKey<Albventagp>(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTAGPS_FK");
            });

            modelBuilder.Entity<Albventalin>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin })
                    .HasName("ALBVENTALIN_PK");

                entity.ToTable("ALBVENTALIN");

                entity.HasIndex(e => e.Codalmacen)
                    .HasName("ALBVENTALIN_CODALMACEN");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("ALBVENTALINPORCODARTIC");

                entity.HasIndex(e => e.Supedido)
                    .HasName("ALBVENTALIN_SUPEDIDO");

                entity.HasIndex(e => new { e.Codarticulo, e.Color, e.Talla })
                    .HasName("ALBVENTALIN_COD_COLOR_TALLA");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacen })
                    .HasName("ALBVENTALIN_ARTIC_ALMACEN");

                entity.HasIndex(e => new { e.AbonodeN, e.AbonodeNumalbaran, e.AbonodeNumserie, e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBVENTALIN_ABONODE");

                entity.HasIndex(e => new { e.Numserie, e.Numalbaran, e.N, e.Codarticulo, e.Talla, e.Color })
                    .HasName("ALBVENTALIN_DOC_ARTICULO");

                entity.HasIndex(e => new { e.Numserie, e.Numalbaran, e.N, e.Codarticulo, e.Referencia, e.Descripcion, e.Color, e.Udsexpansion, e.Codalmacen, e.Talla })
                    .HasName("ALBVENTALIN_ALMACEN_TALLA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.AbonodeN)
                    .HasColumnName("ABONODE_N")
                    .HasMaxLength(1);

                entity.Property(e => e.AbonodeNumalbaran).HasColumnName("ABONODE_NUMALBARAN");

                entity.Property(e => e.AbonodeNumserie)
                    .HasColumnName("ABONODE_NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Abonodelinea).HasColumnName("ABONODELINEA");

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato)
                    .HasColumnName("CODFORMATO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmacro)
                    .HasColumnName("CODMACRO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Coste2).HasColumnName("COSTE2");

                entity.Property(e => e.Costeiva)
                    .HasColumnName("COSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costeiva2).HasColumnName("COSTEIVA2");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Detalledenumlinea).HasColumnName("DETALLEDENUMLINEA");

                entity.Property(e => e.Detallemodif)
                    .HasColumnName("DETALLEMODIF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtoantespromocion).HasColumnName("DTOANTESPROMOCION");

                entity.Property(e => e.Expandida)
                    .HasColumnName("EXPANDIDA")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('F')");

                entity.Property(e => e.Familiaaena).HasColumnName("FAMILIAAENA");

                entity.Property(e => e.Fechacaducidad)
                    .HasColumnName("FECHACADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horacocina)
                    .HasColumnName("HORACOCINA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idmotivoabono).HasColumnName("IDMOTIVOABONO");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importeantespromocion).HasColumnName("IMPORTEANTESPROMOCION");

                entity.Property(e => e.Importeantespromocioniva).HasColumnName("IMPORTEANTESPROMOCIONIVA");

                entity.Property(e => e.Importepromocion).HasColumnName("IMPORTEPROMOCION");

                entity.Property(e => e.Importepromocioniva).HasColumnName("IMPORTEPROMOCIONIVA");

                entity.Property(e => e.Isprecio2)
                    .HasColumnName("ISPRECIO2")
                    .HasMaxLength(1);

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lineaoculta)
                    .HasColumnName("LINEAOCULTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Numkgexpansion).HasColumnName("NUMKGEXPANSION");

                entity.Property(e => e.Porcretencion).HasColumnName("PORCRETENCION");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva)
                    .HasColumnName("PRECIOIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prestamo)
                    .HasColumnName("PRESTAMO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Stock).HasColumnName("STOCK");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tarifaantespromocion).HasColumnName("TARIFAANTESPROMOCION");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipodelivery).HasColumnName("TIPODELIVERY");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Tiporetencion).HasColumnName("TIPORETENCION");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totalexpansion).HasColumnName("TOTALEXPANSION");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Udmedida2expansion).HasColumnName("UDMEDIDA2EXPANSION");

                entity.Property(e => e.Udsabonadas).HasColumnName("UDSABONADAS");

                entity.Property(e => e.Udsexpansion).HasColumnName("UDSEXPANSION");

                entity.Property(e => e.Unid1)
                    .HasColumnName("UNID1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid2)
                    .HasColumnName("UNID2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid3)
                    .HasColumnName("UNID3")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid4)
                    .HasColumnName("UNID4")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unidadespagadas).HasColumnName("UNIDADESPAGADAS");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventalins)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTALIN_FK");
            });

            modelBuilder.Entity<Albventalinpromocione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin, e.Idpromocion })
                    .HasName("ALBVENTALINPROMOCIONES_PK");

                entity.ToTable("ALBVENTALINPROMOCIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importepromocion).HasColumnName("IMPORTEPROMOCION");

                entity.Property(e => e.Importepromocioniva).HasColumnName("IMPORTEPROMOCIONIVA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventalinpromociones)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N, d.Numlin })
                    .HasConstraintName("ALBVENTALINPROMOCIONES_FK");
            });

            modelBuilder.Entity<Albventamodif>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlinea, e.Nummodif })
                    .HasName("ALBVENTAMODIF_PK");

                entity.ToTable("ALBVENTAMODIF");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Nummodif).HasColumnName("NUMMODIF");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codmodif).HasColumnName("CODMODIF");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Division).HasColumnName("DIVISION");

                entity.Property(e => e.Esarticulo).HasColumnName("ESARTICULO");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Incprecio).HasColumnName("INCPRECIO");

                entity.Property(e => e.Nivel).HasColumnName("NIVEL");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Unidades)
                    .HasColumnName("UNIDADES")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventamodifs)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTAMODIF_FK");
            });

            modelBuilder.Entity<Albventapag>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlinea })
                    .HasName("ALBVENTAPAG_PK");

                entity.ToTable("ALBVENTAPAG");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Beneficio).HasColumnName("BENEFICIO");

                entity.Property(e => e.Cambio).HasColumnName("CAMBIO");

                entity.Property(e => e.Cambio2).HasColumnName("CAMBIO2");

                entity.Property(e => e.Codformapago).HasColumnName("CODFORMAPAGO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechavencim)
                    .HasColumnName("FECHAVENCIM")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importe2).HasColumnName("IMPORTE2");

                entity.Property(e => e.Pendiente).HasColumnName("PENDIENTE");

                entity.Property(e => e.Propina).HasColumnName("PROPINA");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventapags)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTAPAG_FK");
            });

            modelBuilder.Entity<Albventapromocione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Idpromocion })
                    .HasName("ALBVENTAPROMOCIONES_PK");

                entity.ToTable("ALBVENTAPROMOCIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventapromociones)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTAPROMOCIONES_FK");
            });

            modelBuilder.Entity<Albventaregalo>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Idregalo, e.Numlinea })
                    .HasName("ALBVENTAREGALOS_PK");

                entity.ToTable("ALBVENTAREGALOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idregalo).HasColumnName("IDREGALO");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Unidadesabonadas).HasColumnName("UNIDADESABONADAS");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventaregalos)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTAREGALOS_FK");
            });

            modelBuilder.Entity<Albventarubrica>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBVENTARUBRICA_PK");

                entity.ToTable("ALBVENTARUBRICA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Rubrica)
                    .HasColumnName("RUBRICA")
                    .HasColumnType("image");

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Albventarubrica)
                    .HasForeignKey<Albventarubrica>(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTARUBRICA_FK");
            });

            modelBuilder.Entity<Albventatarjeta>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Idtarjeta })
                    .HasName("ALBVENTATARJETAS_PK");

                entity.ToTable("ALBVENTATARJETAS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Saldo).HasColumnName("SALDO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Albventatarjeta)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTATARJETAS_FK");
            });

            modelBuilder.Entity<Albventatarjetaembarque>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ALBVENTATARJETAEMBARQUE_PK");

                entity.ToTable("ALBVENTATARJETAEMBARQUE");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Aeropuertodestino)
                    .HasColumnName("AEROPUERTODESTINO")
                    .HasMaxLength(3);

                entity.Property(e => e.Aeropuertoorigen)
                    .HasColumnName("AEROPUERTOORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Clase)
                    .HasColumnName("CLASE")
                    .HasMaxLength(1);

                entity.Property(e => e.Codnacionalidad)
                    .HasColumnName("CODNACIONALIDAD")
                    .HasMaxLength(2);

                entity.Property(e => e.Numerovuelo)
                    .HasColumnName("NUMEROVUELO")
                    .HasMaxLength(8);

                entity.Property(e => e.Tarjetaembarque)
                    .HasColumnName("TARJETAEMBARQUE")
                    .HasMaxLength(150);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Albventatarjetaembarque)
                    .HasForeignKey<Albventatarjetaembarque>(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ALBVENTATARJETAEMBARQUE_FK");
            });

            modelBuilder.Entity<Albventatot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("ALBVENTATOT_PK");

                entity.ToTable("ALBVENTATOT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.HasOne(d => d.Albventacab)
                    .WithMany(p => p.Albventatots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ALBVENTATOT_FK");
            });

            modelBuilder.Entity<Almacen>(entity =>
            {
                entity.HasKey(e => e.Codalmacen)
                    .HasName("ALMACEN_PK");

                entity.ToTable("ALMACEN");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ALMACENVERSION");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Centrocoste)
                    .HasColumnName("CENTROCOSTE")
                    .HasMaxLength(6);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codempresacontable).HasColumnName("CODEMPRESACONTABLE");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(30);

                entity.Property(e => e.Esmermas)
                    .HasColumnName("ESMERMAS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Esplanificacion).HasColumnName("ESPLANIFICACION");

                entity.Property(e => e.Factor).HasColumnName("FACTOR");

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechabloqueo)
                    .HasColumnName("FECHABLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaultrep)
                    .HasColumnName("FECHAULTREP")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horacambioturno)
                    .HasColumnName("HORACAMBIOTURNO")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((-2))");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(30);

                entity.Property(e => e.Notas)
                    .HasColumnName("NOTAS")
                    .HasColumnType("ntext");

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(30);

                entity.Property(e => e.Poperacional)
                    .HasColumnName("POPERACIONAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(30);

                entity.Property(e => e.Pvpetiquetas).HasColumnName("PVPETIQUETAS");

                entity.Property(e => e.Serietraspasos)
                    .HasColumnName("SERIETRASPASOS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serietraspasostranporte)
                    .HasColumnName("SERIETRASPASOSTRANPORTE")
                    .HasMaxLength(4);

                entity.Property(e => e.Stockmaximo).HasColumnName("STOCKMAXIMO");

                entity.Property(e => e.Stockminimo).HasColumnName("STOCKMINIMO");

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Ultfacturacionprestamos)
                    .HasColumnName("ULTFACTURACIONPRESTAMOS")
                    .HasColumnType("datetime");

                entity.Property(e => e.Valoracionconsumos).HasColumnName("VALORACIONCONSUMOS");

                entity.Property(e => e.Valoracioninventario).HasColumnName("VALORACIONINVENTARIO");

                entity.Property(e => e.Valoracioninventariosdmn).HasColumnName("VALORACIONINVENTARIOSDMN");

                entity.Property(e => e.Valoraciontraspasos).HasColumnName("VALORACIONTRASPASOS");

                entity.Property(e => e.Valoraciontraspasosdmn).HasColumnName("VALORACIONTRASPASOSDMN");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Almacenesnumempleado>(entity =>
            {
                entity.HasKey(e => new { e.Codalmacen, e.Codtipodia, e.Inicio, e.Codtipoempleado, e.Codusuario });

                entity.ToTable("ALMACENESNUMEMPLEADOS");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codtipodia).HasColumnName("CODTIPODIA");

                entity.Property(e => e.Inicio)
                    .HasColumnName("INICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codtipoempleado).HasColumnName("CODTIPOEMPLEADO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Fin)
                    .HasColumnName("FIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numempleados).HasColumnName("NUMEMPLEADOS");
            });

            modelBuilder.Entity<Almacenestarifa>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Idtarifac, e.Codalmacen })
                    .HasName("ALMACENESTARIFA_PK");

                entity.ToTable("ALMACENESTARIFA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Idtarifac).HasColumnName("IDTARIFAC");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.HasOne(d => d.CodalmacenNavigation)
                    .WithMany(p => p.Almacenestarifas)
                    .HasForeignKey(d => d.Codalmacen)
                    .HasConstraintName("ALMACENESTARIFA_FK_ALMACEN");

                entity.HasOne(d => d.Tarifascompra)
                    .WithMany(p => p.Almacenestarifas)
                    .HasForeignKey(d => new { d.Codproveedor, d.Idtarifac })
                    .HasConstraintName("ALMACENESTARIFA_FK_TARIFAS");
            });

            modelBuilder.Entity<Almacenesvacacione>(entity =>
            {
                entity.HasKey(e => new { e.Codalmacen, e.Fecha });

                entity.ToTable("ALMACENESVACACIONES");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codtipodia).HasColumnName("CODTIPODIA");

                entity.Property(e => e.Motivo)
                    .HasColumnName("MOTIVO")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Anticipo>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Tipodoc })
                    .HasName("ANTICIPOS_PK");

                entity.ToTable("ANTICIPOS");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Concepto)
                    .HasColumnName("CONCEPTO")
                    .HasMaxLength(20);

                entity.Property(e => e.Cuotaiva).HasColumnName("CUOTAIVA");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mediodepago)
                    .HasColumnName("MEDIODEPAGO")
                    .HasMaxLength(2);

                entity.Property(e => e.Porciva).HasColumnName("PORCIVA");

                entity.Property(e => e.Tipoiva).HasColumnName("TIPOIVA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<AnulAlbventacab>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("ANUL_ALBVENTACAB_PK");

                entity.ToTable("ANUL_ALBVENTACAB");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Automatico)
                    .HasColumnName("AUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Entransito)
                    .HasColumnName("ENTRANSITO")
                    .HasMaxLength(3);

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esbarra)
                    .HasColumnName("ESBARRA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esdevolucion)
                    .HasColumnName("ESDEVOLUCION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esunprestamo)
                    .HasColumnName("ESUNPRESTAMO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaanulacion)
                    .HasColumnName("FECHAANULACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fo)
                    .HasColumnName("FO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Impresiones)
                    .HasColumnName("IMPRESIONES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mesa)
                    .HasColumnName("MESA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numcomensales)
                    .HasColumnName("NUMCOMENSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Numeroasunto)
                    .HasColumnName("NUMEROASUNTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Numfac).HasColumnName("NUMFAC");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Numseriefac)
                    .HasColumnName("NUMSERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Porc).HasColumnName("PORC");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Puntosacum).HasColumnName("PUNTOSACUM");

                entity.Property(e => e.Puntoscanjeados).HasColumnName("PUNTOSCANJEADOS");

                entity.Property(e => e.Sala)
                    .HasColumnName("SALA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Seleccionado)
                    .HasColumnName("SELECCIONADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieasunto)
                    .HasColumnName("SERIEASUNTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Sualbaran)
                    .HasColumnName("SUALBARAN")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipodocfac).HasColumnName("TIPODOCFAC");

                entity.Property(e => e.Tiquet)
                    .HasColumnName("TIQUET")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcosteiva)
                    .HasColumnName("TOTALCOSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalimpuestos).HasColumnName("TOTALIMPUESTOS");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");

                entity.Property(e => e.Totalpuntos).HasColumnName("TOTALPUNTOS");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totporc).HasColumnName("TOTPORC");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Traspasado)
                    .HasColumnName("TRASPASADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Vienedefo)
                    .HasColumnName("VIENEDEFO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.AnulAlbventacabs)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("ANUL_ALBVENTACAB_FK");
            });

            modelBuilder.Entity<AnulAlbventacupone>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Eancupon })
                    .HasName("ANUL_ALBVENTACUPONES_PK");

                entity.ToTable("ANUL_ALBVENTACUPONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Eancupon)
                    .HasColumnName("EANCUPON")
                    .HasMaxLength(30);

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.AnulAlbventacupones)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ANUL_ALBVENTACUPONES_FK");
            });

            modelBuilder.Entity<AnulAlbventacuponesgenerado>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Idpromocion, e.Eancupon })
                    .HasName("ANUL_ALBVENTACUPONESGENERADOS_PK");

                entity.ToTable("ANUL_ALBVENTACUPONESGENERADOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Eancupon)
                    .HasColumnName("EANCUPON")
                    .HasMaxLength(30);

                entity.Property(e => e.Importedto).HasColumnName("IMPORTEDTO");

                entity.Property(e => e.PromocionesclienteIdpromocion).HasColumnName("PROMOCIONESCLIENTE_IDPROMOCION");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.AnulAlbventacuponesgenerados)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ANUL_ALBVENTACUPONESGENERADOS_FK");
            });

            modelBuilder.Entity<AnulAlbventadto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea })
                    .HasName("ANUL_ALBVENTADTOS_PK");

                entity.ToTable("ANUL_ALBVENTADTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.AnulAlbventadtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N })
                    .HasConstraintName("ANUL_ALBVENTADTOS_FK");
            });

            modelBuilder.Entity<AnulAlbventafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("ANUL_ALBVENTAFIRMAPK");

                entity.ToTable("ANUL_ALBVENTAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.AnulAlbventacab)
                    .WithOne(p => p.AnulAlbventafirma)
                    .HasForeignKey<AnulAlbventafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ANUL_ALBVENTAFIRMAFK");
            });

            modelBuilder.Entity<AnulAlbventalin>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin })
                    .HasName("ANUL_ALBVENTALIN_PK");

                entity.ToTable("ANUL_ALBVENTALIN");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.AbonodeN)
                    .HasColumnName("ABONODE_N")
                    .HasMaxLength(1);

                entity.Property(e => e.AbonodeNumalbaran).HasColumnName("ABONODE_NUMALBARAN");

                entity.Property(e => e.AbonodeNumserie)
                    .HasColumnName("ABONODE_NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato)
                    .HasColumnName("CODFORMATO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmacro)
                    .HasColumnName("CODMACRO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Costeiva)
                    .HasColumnName("COSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtoantespromocion).HasColumnName("DTOANTESPROMOCION");

                entity.Property(e => e.Expandida)
                    .HasColumnName("EXPANDIDA")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('F')");

                entity.Property(e => e.Fechacaducidad)
                    .HasColumnName("FECHACADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importeantespromocion).HasColumnName("IMPORTEANTESPROMOCION");

                entity.Property(e => e.Importeantespromocioniva).HasColumnName("IMPORTEANTESPROMOCIONIVA");

                entity.Property(e => e.Importepromocion).HasColumnName("IMPORTEPROMOCION");

                entity.Property(e => e.Importepromocioniva).HasColumnName("IMPORTEPROMOCIONIVA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lineaoculta)
                    .HasColumnName("LINEAOCULTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Numkgexpansion).HasColumnName("NUMKGEXPANSION");

                entity.Property(e => e.Porcretencion).HasColumnName("PORCRETENCION");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva)
                    .HasColumnName("PRECIOIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prestamo)
                    .HasColumnName("PRESTAMO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totalexpansion).HasColumnName("TOTALEXPANSION");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Udmedida2expansion).HasColumnName("UDMEDIDA2EXPANSION");

                entity.Property(e => e.Udsabonadas).HasColumnName("UDSABONADAS");

                entity.Property(e => e.Udsexpansion).HasColumnName("UDSEXPANSION");

                entity.Property(e => e.Unid1)
                    .HasColumnName("UNID1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid2)
                    .HasColumnName("UNID2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid3)
                    .HasColumnName("UNID3")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid4)
                    .HasColumnName("UNID4")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unidadespagadas).HasColumnName("UNIDADESPAGADAS");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.AnulAlbventalins)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ANUL_ALBVENTALIN_FK");
            });

            modelBuilder.Entity<AnulAlbventalinpromocione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin, e.Idpromocion })
                    .HasName("ANUL_ALBVENTALINPROMOCIONES_PK");

                entity.ToTable("ANUL_ALBVENTALINPROMOCIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importepromocion).HasColumnName("IMPORTEPROMOCION");

                entity.Property(e => e.Importepromocioniva).HasColumnName("IMPORTEPROMOCIONIVA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.AnulAlbventalinpromociones)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N, d.Numlin })
                    .HasConstraintName("ANUL_ALBVENTALINPROMOCIONES_FK");
            });

            modelBuilder.Entity<AnulAlbventapromocione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Idpromocion })
                    .HasName("ANUL_ALBVENTAPROMOCIONES_PK");

                entity.ToTable("ANUL_ALBVENTAPROMOCIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.AnulAlbventapromociones)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ANUL_ALBVENTAPROMOCIONES_FK");
            });

            modelBuilder.Entity<AnulAlbventaseriesresol>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Seriefiscal1, e.Seriefiscal2, e.Numerofiscal })
                    .HasName("ANUL_ALBVENTASERIESRESOL_PK");

                entity.ToTable("ANUL_ALBVENTASERIESRESOL");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seriefiscal1)
                    .HasColumnName("SERIEFISCAL1")
                    .HasMaxLength(15);

                entity.Property(e => e.Seriefiscal2)
                    .HasColumnName("SERIEFISCAL2")
                    .HasMaxLength(15);

                entity.Property(e => e.Numerofiscal).HasColumnName("NUMEROFISCAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.AnulAlbventaseriesresols)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("ANUL_ALBVENTASERIESRESOL_FK");
            });

            modelBuilder.Entity<AnulAlbventatot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("ANUL_ALBVENTATOT_PK");

                entity.ToTable("ANUL_ALBVENTATOT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.HasOne(d => d.AnulAlbventacab)
                    .WithMany(p => p.AnulAlbventatots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ANUL_ALBVENTATOT_FK");
            });

            modelBuilder.Entity<AnulFacturasventacliente>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("ANUL_FACTURASVENTACLIENTES_PK");

                entity.ToTable("ANUL_FACTURASVENTACLIENTES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Clientetarjeta)
                    .HasColumnName("CLIENTETARJETA")
                    .HasMaxLength(50);

                entity.Property(e => e.Codigopostal)
                    .HasColumnName("CODIGOPOSTAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(5);

                entity.Property(e => e.Descpais)
                    .HasColumnName("DESCPAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Devolivaboxvel).HasColumnName("DEVOLIVABOXVEL");

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(250);

                entity.Property(e => e.Docidglobalblue)
                    .HasColumnName("DOCIDGLOBALBLUE")
                    .HasMaxLength(20);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Fechacaducidadtarjeta)
                    .HasColumnName("FECHACADUCIDADTARJETA")
                    .HasMaxLength(5);

                entity.Property(e => e.Fechaenvioboxvel)
                    .HasColumnName("FECHAENVIOBOXVEL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nif)
                    .HasColumnName("NIF")
                    .HasMaxLength(35);

                entity.Property(e => e.Noaplicarimpuestos).HasColumnName("NOAPLICARIMPUESTOS");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(250);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(80);

                entity.Property(e => e.Profesion)
                    .HasColumnName("PROFESION")
                    .HasMaxLength(150);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(80);

                entity.Property(e => e.Tarjetafidelizacion)
                    .HasColumnName("TARJETAFIDELIZACION")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxoffice)
                    .HasColumnName("TAXOFFICE")
                    .HasMaxLength(50);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(35);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.AnulFacturasventacliente)
                    .HasForeignKey<AnulFacturasventacliente>(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("ANUL_FACTURASVENTACLIENTES_FK");
            });

            modelBuilder.Entity<AnulFacturasventafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("ANUL_FACTURASVENTAFIRMA_PK");

                entity.ToTable("ANUL_FACTURASVENTAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.AnulFacturasventum)
                    .WithOne(p => p.AnulFacturasventafirma)
                    .HasForeignKey<AnulFacturasventafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ANUL_FACTURASVENTAFIRMA_FK");
            });

            modelBuilder.Entity<AnulFacturasventum>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("ANUL_FACTURASVENTA_PK");

                entity.ToTable("ANUL_FACTURASVENTA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cambio).HasColumnName("CAMBIO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esinversion)
                    .HasColumnName("ESINVERSION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaanulacion)
                    .HasColumnName("FECHAANULACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Propina).HasColumnName("PROPINA");

                entity.Property(e => e.Sufactura)
                    .HasColumnName("SUFACTURA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcosteiva)
                    .HasColumnName("TOTALCOSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalimpuestos).HasColumnName("TOTALIMPUESTOS");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");

                entity.Property(e => e.Totalretencion).HasColumnName("TOTALRETENCION");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Traspasada)
                    .HasColumnName("TRASPASADA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Vendedormodificado).HasColumnName("VENDEDORMODIFICADO");

                entity.Property(e => e.Vienedefo)
                    .HasColumnName("VIENEDEFO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Arqueo>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Arqueo1, e.Caja, e.Numero })
                    .HasName("ARQUEOS_PK");

                entity.ToTable("ARQUEOS");

                entity.HasIndex(e => new { e.Arqueo1, e.Caja, e.Numero })
                    .HasName("ARQUEOS_ARQUEO_CAJA_NUMERO");

                entity.HasIndex(e => new { e.Caja, e.Numero, e.Arqueo1, e.Fecha })
                    .HasName("ARQUEOS_CAJA_NUMERO_ARQUEO_FECHA");

                entity.HasIndex(e => new { e.Arqueo1, e.Descuadre, e.Fecha, e.Caja, e.Numero })
                    .HasName("ARQUEOS_FECHA_CAJA_NUMERO");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Arqueo1)
                    .HasColumnName("ARQUEO")
                    .HasMaxLength(1);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Acumulado).HasColumnName("ACUMULADO");

                entity.Property(e => e.Acumuladon).HasColumnName("ACUMULADON");

                entity.Property(e => e.Cerrado)
                    .HasColumnName("CERRADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cleancashcontrolcode1)
                    .HasColumnName("CLEANCASHCONTROLCODE1")
                    .HasMaxLength(100);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Descuadre).HasColumnName("DESCUADRE");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasMaxLength(15);

                entity.Property(e => e.Importemesasabiertas).HasColumnName("IMPORTEMESASABIERTAS");

                entity.Property(e => e.Importeventasimpresas).HasColumnName("IMPORTEVENTASIMPRESAS");

                entity.Property(e => e.Numfacn).HasColumnName("NUMFACN");

                entity.Property(e => e.Numfacp).HasColumnName("NUMFACP");

                entity.Property(e => e.Nummesasabiertas).HasColumnName("NUMMESASABIERTAS");

                entity.Property(e => e.Numventasimpresas).HasColumnName("NUMVENTASIMPRESAS");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(255);

                entity.Property(e => e.Punteo).HasColumnName("PUNTEO");

                entity.Property(e => e.Seriefacn)
                    .HasColumnName("SERIEFACN")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefacp)
                    .HasColumnName("SERIEFACP")
                    .HasMaxLength(4);

                entity.Property(e => e.Sesion).HasColumnName("SESION");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<Arqueosmodificado>(entity =>
            {
                entity.HasKey(e => new { e.Caja, e.Numero })
                    .HasName("ARQUEOSMODIFICADOS_PK");

                entity.ToTable("ARQUEOSMODIFICADOS");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");
            });

            modelBuilder.Entity<Arreglo>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Idlin })
                    .HasName("ARREGLOS_PK");

                entity.ToTable("ARREGLOS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlin).HasColumnName("IDLIN");

                entity.Property(e => e.Almacen)
                    .HasColumnName("ALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codarticuloint).HasColumnName("CODARTICULOINT");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Colorint)
                    .IsRequired()
                    .HasColumnName("COLORINT")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecharecogido)
                    .HasColumnName("FECHARECOGIDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaventa)
                    .HasColumnName("FECHAVENTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Impuesto).HasColumnName("IMPUESTO");

                entity.Property(e => e.Incprecio).HasColumnName("INCPRECIO");

                entity.Property(e => e.Incprecioiva).HasColumnName("INCPRECIOIVA");

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Numlineacoment).HasColumnName("NUMLINEACOMENT");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tallaint)
                    .IsRequired()
                    .HasColumnName("TALLAINT")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");
            });

            modelBuilder.Entity<Articulo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_ARTICULOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Ubicacion)
                    .HasColumnName("UBICACION")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Articulo1>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("ARTICULOS_PK");

                entity.ToTable("ARTICULOS");

                entity.HasIndex(e => e.Usarnumserie)
                    .HasName("ARTICULOS_USARNUMSERIE");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ARTICULOSVERSION");

                entity.HasIndex(e => new { e.Dpto, e.Seccion })
                    .HasName("ARTICULOS_DPTO");

                entity.HasIndex(e => new { e.Refproveedor, e.Codarticulo })
                    .HasName("ARTICULOS_REFERENCIA");

                entity.HasIndex(e => new { e.Dpto, e.Seccion, e.Descripcion, e.Codarticulo })
                    .HasName("ARTICULOS_DPTO_SECC_DESC_COD");

                entity.HasIndex(e => new { e.Dpto, e.Seccion, e.Refproveedor, e.Codarticulo })
                    .HasName("ARTICULOS_DPTO_SECC_REF");

                entity.HasIndex(e => new { e.Dpto, e.Seccion, e.Descripcion, e.Refproveedor, e.Codarticulo })
                    .HasName("ARTICULOS_DPTO_SECC_DESC");

                entity.HasIndex(e => new { e.Contrapartidaventa, e.Contrapartidacompra, e.Contrapartidacosteventas, e.Contrapartidaconsumo, e.Contrapartidaventadmn, e.Contrapartidacompradmn, e.Contrapartidacosteventasdmn, e.Contrapartidadevolcompra, e.Contrapartidadevolventa, e.Contrapartidadevolcosteventa, e.Contrapartidadevolcompradmn, e.Contrapartidadevolventadmn, e.Contrapartidadevolcosteventasdm, e.Codarticulo })
                    .HasName("ARTICULOS_CONTRAPARTIDAS");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Articulovirtual)
                    .HasColumnName("ARTICULOVIRTUAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Avisoventa)
                    .HasColumnName("AVISOVENTA")
                    .HasMaxLength(100);

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codcentral).HasColumnName("CODCENTRAL");

                entity.Property(e => e.Coddiseny).HasColumnName("CODDISENY");

                entity.Property(e => e.Codigoaduana).HasColumnName("CODIGOADUANA");

                entity.Property(e => e.Codtalla)
                    .HasColumnName("CODTALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Composicion)
                    .HasColumnName("COMPOSICION")
                    .HasMaxLength(15);

                entity.Property(e => e.Consumadic).HasColumnName("CONSUMADIC");

                entity.Property(e => e.Contrapartidacompra)
                    .HasColumnName("CONTRAPARTIDACOMPRA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidacompradmn)
                    .HasColumnName("CONTRAPARTIDACOMPRADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaconsumo)
                    .HasColumnName("CONTRAPARTIDACONSUMO")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidacosteventas)
                    .HasColumnName("CONTRAPARTIDACOSTEVENTAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidacosteventasdmn)
                    .HasColumnName("CONTRAPARTIDACOSTEVENTASDMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcompra)
                    .HasColumnName("CONTRAPARTIDADEVOLCOMPRA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcompradmn)
                    .HasColumnName("CONTRAPARTIDADEVOLCOMPRADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcosteventa)
                    .HasColumnName("CONTRAPARTIDADEVOLCOSTEVENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcosteventasdm)
                    .HasColumnName("CONTRAPARTIDADEVOLCOSTEVENTASDM")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolventa)
                    .HasColumnName("CONTRAPARTIDADEVOLVENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolventadmn)
                    .HasColumnName("CONTRAPARTIDADEVOLVENTADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolventaexonerada)
                    .HasColumnName("CONTRAPARTIDADEVOLVENTAEXONERADA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidafaltantesinventario)
                    .HasColumnName("CONTRAPARTIDAFALTANTESINVENTARIO")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaordenesfab)
                    .HasColumnName("CONTRAPARTIDAORDENESFAB")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidasobrantesinventario)
                    .HasColumnName("CONTRAPARTIDASOBRANTESINVENTARIO")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaventa)
                    .HasColumnName("CONTRAPARTIDAVENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaventadmn)
                    .HasColumnName("CONTRAPARTIDAVENTADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaventaexonerada)
                    .HasColumnName("CONTRAPARTIDAVENTAEXONERADA")
                    .HasMaxLength(12);

                entity.Property(e => e.Descargado)
                    .HasColumnName("DESCARGADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripadic)
                    .HasColumnName("DESCRIPADIC")
                    .HasMaxLength(25);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Diascaducidad).HasColumnName("DIASCADUCIDAD");

                entity.Property(e => e.Dircontab)
                    .HasColumnName("DIRCONTAB")
                    .HasMaxLength(8);

                entity.Property(e => e.Dpto)
                    .HasColumnName("DPTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Duracion).HasColumnName("DURACION");

                entity.Property(e => e.Eskit)
                    .HasColumnName("ESKIT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Factporhora)
                    .HasColumnName("FACTPORHORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Familia)
                    .HasColumnName("FAMILIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.FijarpvAlcambiarprecio)
                    .HasColumnName("FIJARPV_ALCAMBIARPRECIO")
                    .HasMaxLength(1);

                entity.Property(e => e.FijarpvCadadia)
                    .HasColumnName("FIJARPV_CADADIA")
                    .HasMaxLength(1);

                entity.Property(e => e.Formadepeso).HasColumnName("FORMADEPESO");

                entity.Property(e => e.Forzarudsenterasventa).HasColumnName("FORZARUDSENTERASVENTA");

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Fotosha)
                    .HasColumnName("FOTOSHA")
                    .HasMaxLength(20);

                entity.Property(e => e.Garantiacompra)
                    .HasColumnName("GARANTIACOMPRA")
                    .HasMaxLength(20);

                entity.Property(e => e.Garantiaventa)
                    .HasColumnName("GARANTIAVENTA")
                    .HasMaxLength(20);

                entity.Property(e => e.Generaretiq)
                    .HasColumnName("GENERARETIQ")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Gennumserie)
                    .HasColumnName("GENNUMSERIE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.HioposEbt).HasColumnName("HIOPOS_EBT");

                entity.Property(e => e.HioposImprimircocina).HasColumnName("HIOPOS_IMPRIMIRCOCINA");

                entity.Property(e => e.HioposImprimircocina2)
                    .HasColumnName("HIOPOS_IMPRIMIRCOCINA2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HioposImprimircocina3)
                    .HasColumnName("HIOPOS_IMPRIMIRCOCINA3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HioposIsmodificador)
                    .HasColumnName("HIOPOS_ISMODIFICADOR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HioposTakeaway).HasColumnName("HIOPOS_TAKEAWAY");

                entity.Property(e => e.Idtalonario).HasColumnName("IDTALONARIO");

                entity.Property(e => e.Impuestocompra).HasColumnName("IMPUESTOCOMPRA");

                entity.Property(e => e.Linea)
                    .HasColumnName("LINEA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Marca).HasColumnName("MARCA");

                entity.Property(e => e.Margen).HasColumnName("MARGEN");

                entity.Property(e => e.Medida2)
                    .HasColumnName("MEDIDA2")
                    .HasMaxLength(10);

                entity.Property(e => e.Medidareferencia)
                    .HasColumnName("MEDIDAREFERENCIA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nodtoaplicable).HasColumnName("NODTOAPLICABLE");

                entity.Property(e => e.Norma)
                    .HasColumnName("NORMA")
                    .HasMaxLength(15);

                entity.Property(e => e.Numconsumiciones).HasColumnName("NUMCONSUMICIONES");

                entity.Property(e => e.Porcretencion).HasColumnName("PORCRETENCION");

                entity.Property(e => e.Porpeso)
                    .HasColumnName("PORPESO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Preciolibre)
                    .HasColumnName("PRECIOLIBRE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Preciomaximo).HasColumnName("PRECIOMAXIMO");

                entity.Property(e => e.Preciominimo).HasColumnName("PRECIOMINIMO");

                entity.Property(e => e.Refproveedor)
                    .HasColumnName("REFPROVEEDOR")
                    .HasMaxLength(15);

                entity.Property(e => e.RegimretBaseimponible).HasColumnName("REGIMRET_BASEIMPONIBLE");

                entity.Property(e => e.RegimretIva).HasColumnName("REGIMRET_IVA");

                entity.Property(e => e.Seccion)
                    .HasColumnName("SECCION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Solicitarcomentario)
                    .HasColumnName("SOLICITARCOMENTARIO")
                    .HasMaxLength(1);

                entity.Property(e => e.Subempresa).HasColumnName("SUBEMPRESA");

                entity.Property(e => e.Subfamilia)
                    .HasColumnName("SUBFAMILIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tacon)
                    .HasColumnName("TACON")
                    .HasMaxLength(10);

                entity.Property(e => e.Temporada)
                    .HasColumnName("TEMPORADA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tienetc)
                    .HasColumnName("TIENETC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoarticulo)
                    .HasColumnName("TIPOARTICULO")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('A')");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Tiposat)
                    .HasColumnName("TIPOSAT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Udselaboracion)
                    .HasColumnName("UDSELABORACION")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Udstraspaso).HasColumnName("UDSTRASPASO");

                entity.Property(e => e.Unid1c)
                    .HasColumnName("UNID1C")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid1v)
                    .HasColumnName("UNID1V")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid2c)
                    .HasColumnName("UNID2C")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid2v)
                    .HasColumnName("UNID2V")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid3c)
                    .HasColumnName("UNID3C")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid3v)
                    .HasColumnName("UNID3V")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid4c)
                    .HasColumnName("UNID4C")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid4v)
                    .HasColumnName("UNID4V")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unidadmedida)
                    .HasColumnName("UNIDADMEDIDA")
                    .HasMaxLength(10);

                entity.Property(e => e.Usarnumserie)
                    .HasColumnName("USARNUMSERIE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Usastocks)
                    .HasColumnName("USASTOCKS")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("('T')");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visibleweb)
                    .HasColumnName("VISIBLEWEB")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Articuloscamposlibre>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("ARTICULOSCAMPOSLIBRES_PK");

                entity.ToTable("ARTICULOSCAMPOSLIBRES");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Catalogosat)
                    .HasColumnName("CATALOGOSAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Clasificacion)
                    .HasColumnName("CLASIFICACION")
                    .HasMaxLength(50);

                entity.Property(e => e.Clasificacionv)
                    .HasColumnName("CLASIFICACIONV")
                    .HasMaxLength(50);

                entity.Property(e => e.Entrega)
                    .HasColumnName("ENTREGA")
                    .HasMaxLength(50);

                entity.Property(e => e.FamiliaRw)
                    .HasColumnName("FAMILIA_RW")
                    .HasMaxLength(50);

                entity.Property(e => e.Inventariable)
                    .HasColumnName("INVENTARIABLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Precioproveedor).HasColumnName("PRECIOPROVEEDOR");

                entity.Property(e => e.Proveedor).HasColumnName("PROVEEDOR");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(50);

                entity.Property(e => e.TipoDeArticulo)
                    .HasColumnName("TIPO_DE_ARTICULO")
                    .HasMaxLength(50);

                entity.Property(e => e.Unidadessat)
                    .HasColumnName("UNIDADESSAT")
                    .HasMaxLength(50);

                entity.Property(e => e.UnidadMedida)
                    .HasColumnName("UNIDADMEDIDA_REG")
                    .HasMaxLength(50);

                entity.Property(e => e.ValorAyc).HasColumnName("VALOR_AYC");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Articuloscamposlibre)
                    .HasForeignKey<Articuloscamposlibre>(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Articuloscomentario>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Numcomentario })
                    .HasName("ARTICULOSCOMENTARIOS_PK");

                entity.ToTable("ARTICULOSCOMENTARIOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Numcomentario).HasColumnName("NUMCOMENTARIO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(40);

                entity.Property(e => e.Imprimible)
                    .HasColumnName("IMPRIMIBLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Visibleweb)
                    .HasColumnName("VISIBLEWEB")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articuloscomentarios)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSCOMENTARIOS_FK");
            });

            modelBuilder.Entity<Articuloscomentariosweb>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Codarticulo, e.Codidioma })
                    .HasName("ARTICULOSCOMENTARIOSWEB_PK");

                entity.ToTable("ARTICULOSCOMENTARIOSWEB");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articuloscomentarioswebs)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSCOMENTARIOSWEB_ARTICULOS_FK");
            });

            modelBuilder.Entity<Articuloscommerce>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codidioma })
                    .HasName("ARTICULOSCOMMERCE_PK");

                entity.ToTable("ARTICULOSCOMMERCE");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Desccorta)
                    .HasColumnName("DESCCORTA")
                    .HasColumnType("image");

                entity.Property(e => e.Desccortahtml)
                    .HasColumnName("DESCCORTAHTML")
                    .HasColumnType("ntext");

                entity.Property(e => e.Desclarga)
                    .HasColumnName("DESCLARGA")
                    .HasColumnType("image");

                entity.Property(e => e.Desclargahtml)
                    .HasColumnName("DESCLARGAHTML")
                    .HasColumnType("ntext");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articuloscommerces)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSCOMMERCE_FK_ARTICULO");
            });

            modelBuilder.Entity<Articulosdiarioscliente>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Numlinea })
                    .HasName("ARTICULOSDIARIOSCLIENTE_PK");

                entity.ToTable("ARTICULOSDIARIOSCLIENTE");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Domingo).HasColumnName("DOMINGO");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Jueves).HasColumnName("JUEVES");

                entity.Property(e => e.Lunes).HasColumnName("LUNES");

                entity.Property(e => e.Martes).HasColumnName("MARTES");

                entity.Property(e => e.Miercoles).HasColumnName("MIERCOLES");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Sabado).HasColumnName("SABADO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Viernes).HasColumnName("VIERNES");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Articulosdiariosclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("ARTICULOSDIARIOSCLIENTE_FK");
            });

            modelBuilder.Entity<Articulosdoc>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Tipo })
                    .HasName("ARTICULOSDOC_PK");

                entity.ToTable("ARTICULOSDOC");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Path)
                    .HasColumnName("PATH")
                    .HasMaxLength(100);

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articulosdocs)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSDOC_FK");
            });

            modelBuilder.Entity<Articulosentrada>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("ARTICULOSENTRADAS_PK");

                entity.ToTable("ARTICULOSENTRADAS");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Diasvigencia).HasColumnName("DIASVIGENCIA");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechainicio)
                    .HasColumnName("FECHAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Identhuella).HasColumnName("IDENTHUELLA");

                entity.Property(e => e.Identsalida).HasColumnName("IDENTSALIDA");

                entity.Property(e => e.Numentradasdia).HasColumnName("NUMENTRADASDIA");

                entity.Property(e => e.Numsesiones).HasColumnName("NUMSESIONES");

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Vigencia).HasColumnName("VIGENCIA");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Articulosentrada)
                    .HasForeignKey<Articulosentrada>(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSENTRADAS_FK");
            });

            modelBuilder.Entity<Articulosentradashorario>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Diasemana, e.Horainicio })
                    .HasName("ARTICULOSENTRADASHORARIO_PK");

                entity.ToTable("ARTICULOSENTRADASHORARIO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Diasemana).HasColumnName("DIASEMANA");

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articulosentradashorarios)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSENTRADASHORARIO_FK");
            });

            modelBuilder.Entity<Articulosentradastorno>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Idtorno, e.Idfront })
                    .HasName("ARTICULOSENTRADASTORNOS_PK");

                entity.ToTable("ARTICULOSENTRADASTORNOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Idtorno).HasColumnName("IDTORNO");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Articuloserest>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codidioma })
                    .HasName("ARTICULOSEREST_PK");

                entity.ToTable("ARTICULOSEREST");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(500);

                entity.Property(e => e.Ingredientes)
                    .HasColumnName("INGREDIENTES")
                    .HasMaxLength(500);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(100);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articuloserests)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSEREST_ARTICULOS");
            });

            modelBuilder.Entity<Articulosfactporfranja>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codformato, e.Minini, e.Minfin })
                    .HasName("ARTICULOSFACTPORFRANJA_PK");

                entity.ToTable("ARTICULOSFACTPORFRANJA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Minini).HasColumnName("MININI");

                entity.Property(e => e.Minfin).HasColumnName("MINFIN");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articulosfactporfranjas)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSFACTPORFRANJA_ARTICULOS");

                entity.HasOne(d => d.CodformatoNavigation)
                    .WithMany(p => p.Articulosfactporfranjas)
                    .HasForeignKey(d => d.Codformato)
                    .HasConstraintName("ARTICULOSFACTPORFRANJA_FORMATOS");
            });

            modelBuilder.Entity<Articuloshabitacione>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("PK__ARTICULO__77D0068D68736660");

                entity.ToTable("ARTICULOSHABITACIONES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ARTICULOSHABITACIONESVERSION");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codarticulotot)
                    .HasColumnName("CODARTICULOTOT")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Dtoregpax).HasColumnName("DTOREGPAX");

                entity.Property(e => e.Dtoregpaxbebe).HasColumnName("DTOREGPAXBEBE");

                entity.Property(e => e.Dtoregpaxnen).HasColumnName("DTOREGPAXNEN");

                entity.Property(e => e.Factorcalculo).HasColumnName("FACTORCALCULO");

                entity.Property(e => e.Paxbebes).HasColumnName("PAXBEBES");

                entity.Property(e => e.Paxdefecto).HasColumnName("PAXDEFECTO");

                entity.Property(e => e.Paxnens).HasColumnName("PAXNENS");

                entity.Property(e => e.Precioporhabitacion).HasColumnName("PRECIOPORHABITACION");

                entity.Property(e => e.Suplpax).HasColumnName("SUPLPAX");

                entity.Property(e => e.Suplpaxbebe).HasColumnName("SUPLPAXBEBE");

                entity.Property(e => e.Suplpaxnen).HasColumnName("SUPLPAXNEN");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Articuloshabitacione)
                    .HasForeignKey<Articuloshabitacione>(d => d.Codarticulo)
                    .HasConstraintName("FK__ARTICULOS__CODAR__6B4FD30B");
            });

            modelBuilder.Entity<Articuloshabitacionespaxweb>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Paxadult, e.Paxnen, e.Paxbebe })
                    .HasName("ARTICULOSHABITACIONESPAXWEB_PK");

                entity.ToTable("ARTICULOSHABITACIONESPAXWEB");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Paxadult).HasColumnName("PAXADULT");

                entity.Property(e => e.Paxnen).HasColumnName("PAXNEN");

                entity.Property(e => e.Paxbebe).HasColumnName("PAXBEBE");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articuloshabitacionespaxwebs)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSHABITACIONESPW_FK");
            });

            modelBuilder.Entity<Articulosimagen>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("ARTICULOSIMAGEN_PK");

                entity.ToTable("ARTICULOSIMAGEN");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ARTICULOSIMAGENVERSION");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Articulosimagen)
                    .HasForeignKey<Articulosimagen>(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSIMAGEN_FK");
            });

            modelBuilder.Entity<Articulosimagene>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Idimagen, e.Idhotel })
                    .HasName("ARTICULOSIMAGENES_PK");

                entity.ToTable("ARTICULOSIMAGENES");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Idimagen).HasColumnName("IDIMAGEN");

                entity.Property(e => e.Idhotel)
                    .HasColumnName("IDHOTEL")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articulosimagenes)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSIMAGENES_ARTICULOS_FK");
            });

            modelBuilder.Entity<Articulosimagenerest>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("ARTICULOSIMAGENEREST_PK");

                entity.ToTable("ARTICULOSIMAGENEREST");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Articulosimagenerest)
                    .HasForeignKey<Articulosimagenerest>(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSIMAGENEREST_FK");
            });

            modelBuilder.Entity<Articuloslin>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color })
                    .HasName("ARTICULOSLIN_PK");

                entity.ToTable("ARTICULOSLIN");

                entity.HasIndex(e => e.Codbarras)
                    .HasName("ARTICULOSLIN_CODBARRAS");

                entity.HasIndex(e => e.Codbarras2)
                    .HasName("ARTICULOSLIN_CODBARRAS2");

                entity.HasIndex(e => e.Codbarras3)
                    .HasName("ARTICULOSLIN_CODBARRAS3");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ARTICULOSLINVERSION");

                entity.HasIndex(e => new { e.Codarticulo, e.Color, e.Talla })
                    .HasName("ARTICULOSLIN_COD_COLOR_TALLA");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color, e.Fechaultventa })
                    .HasName("ARTICULOSLIN_FECHAVENTA");

                entity.HasIndex(e => new { e.Orden, e.Codarticulo, e.Color, e.Talla })
                    .HasName("ARTICULOSLIN_ORDEN");

                entity.HasIndex(e => new { e.Posiciontalla, e.Posicioncolor, e.Codarticulo, e.Talla, e.Color })
                    .HasName("ARTICULOSLIN_CODARTICULO_TALLA_COLOR");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Alternativousaprecio)
                    .HasColumnName("ALTERNATIVOUSAPRECIO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cloudid).HasColumnName("CLOUDID");

                entity.Property(e => e.Codalternativo).HasColumnName("CODALTERNATIVO");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Codbarras2)
                    .HasColumnName("CODBARRAS2")
                    .HasMaxLength(50);

                entity.Property(e => e.Codbarras3)
                    .HasColumnName("CODBARRAS3")
                    .HasMaxLength(50);

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codmonedadmn).HasColumnName("CODMONEDADMN");

                entity.Property(e => e.Coloralternativo)
                    .HasColumnName("COLORALTERNATIVO")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Costemedio).HasColumnName("COSTEMEDIO");

                entity.Property(e => e.Costemediodmn).HasColumnName("COSTEMEDIODMN");

                entity.Property(e => e.Costestock).HasColumnName("COSTESTOCK");

                entity.Property(e => e.Costestockdmn).HasColumnName("COSTESTOCKDMN");

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Elaboracion)
                    .HasColumnName("ELABORACION")
                    .HasMaxLength(60);

                entity.Property(e => e.Factormedida2).HasColumnName("FACTORMEDIDA2");

                entity.Property(e => e.Fechaultcompra)
                    .HasColumnName("FECHAULTCOMPRA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaultventa)
                    .HasColumnName("FECHAULTVENTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Garantiacompra)
                    .HasColumnName("GARANTIACOMPRA")
                    .HasMaxLength(20);

                entity.Property(e => e.Garantiaventa)
                    .HasColumnName("GARANTIAVENTA")
                    .HasMaxLength(20);

                entity.Property(e => e.Importecargo1).HasColumnName("IMPORTECARGO1");

                entity.Property(e => e.Importecargo1dmn).HasColumnName("IMPORTECARGO1DMN");

                entity.Property(e => e.Importecargo2).HasColumnName("IMPORTECARGO2");

                entity.Property(e => e.Importecargo2dmn).HasColumnName("IMPORTECARGO2DMN");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Peso).HasColumnName("PESO");

                entity.Property(e => e.Posicioncolor)
                    .HasColumnName("POSICIONCOLOR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Posiciontalla)
                    .HasColumnName("POSICIONTALLA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Preciocomprareal)
                    .HasColumnName("PRECIOCOMPRAREAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Preciocomprarealdmn).HasColumnName("PRECIOCOMPRAREALDMN");

                entity.Property(e => e.Precioultcompra).HasColumnName("PRECIOULTCOMPRA");

                entity.Property(e => e.Precioultcompradmn).HasColumnName("PRECIOULTCOMPRADMN");

                entity.Property(e => e.Tallaalternativa)
                    .HasColumnName("TALLAALTERNATIVA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Udsalternativo).HasColumnName("UDSALTERNATIVO");

                entity.Property(e => e.Ultdesccomercial).HasColumnName("ULTDESCCOMERCIAL");

                entity.Property(e => e.Ultdesccomercialdmn).HasColumnName("ULTDESCCOMERCIALDMN");

                entity.Property(e => e.Ultdtocomercial)
                    .HasColumnName("ULTDTOCOMERCIAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ultdtocomercialdmn).HasColumnName("ULTDTOCOMERCIALDMN");

                entity.Property(e => e.Ultimocoste).HasColumnName("ULTIMOCOSTE");

                entity.Property(e => e.Ultimocostedmn).HasColumnName("ULTIMOCOSTEDMN");

                entity.Property(e => e.Unidadescompradas).HasColumnName("UNIDADESCOMPRADAS");

                entity.Property(e => e.Unidadescompradasdmn).HasColumnName("UNIDADESCOMPRADASDMN");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articuloslins)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSLIN_FK");
            });

            modelBuilder.Entity<Articulosperiodicoscliente>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Numlinea })
                    .HasName("ARTICULOSPERIODICOSCLIENTE_PK");

                entity.ToTable("ARTICULOSPERIODICOSCLIENTE");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Almacen)
                    .HasColumnName("ALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Cadaxmeses).HasColumnName("CADAXMESES");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Diafacturacion).HasColumnName("DIAFACTURACION");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Fechaalta)
                    .HasColumnName("FECHAALTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechabaja)
                    .HasColumnName("FECHABAJA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasiguiente)
                    .HasColumnName("FECHASIGUIENTE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Articulosperiodicosclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("ARTICULOSPERIODICOSCLIENTE_FK");
            });

            modelBuilder.Entity<Articulosregimene>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("PK__ARTICULO__77D0068D7108AC61");

                entity.ToTable("ARTICULOSREGIMENES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ARTICULOSREGIMENESVERSION");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Almuerzo).HasColumnName("ALMUERZO");

                entity.Property(e => e.Alojamiento).HasColumnName("ALOJAMIENTO");

                entity.Property(e => e.Cena).HasColumnName("CENA");

                entity.Property(e => e.Desayuno).HasColumnName("DESAYUNO");

                entity.Property(e => e.Factorcalculo).HasColumnName("FACTORCALCULO");

                entity.Property(e => e.Porcalmuerzo).HasColumnName("PORCALMUERZO");

                entity.Property(e => e.Porcalojamiento).HasColumnName("PORCALOJAMIENTO");

                entity.Property(e => e.Porccena).HasColumnName("PORCCENA");

                entity.Property(e => e.Porcdesayuno).HasColumnName("PORCDESAYUNO");

                entity.Property(e => e.Porcdtobebes).HasColumnName("PORCDTOBEBES");

                entity.Property(e => e.Porcdtonens).HasColumnName("PORCDTONENS");

                entity.Property(e => e.Primerservicio)
                    .HasColumnName("PRIMERSERVICIO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Tarifaextras).HasColumnName("TARIFAEXTRAS");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Articulosregimene)
                    .HasForeignKey<Articulosregimene>(d => d.Codarticulo)
                    .HasConstraintName("FK__ARTICULOS__CODAR__73E5190C");
            });

            modelBuilder.Entity<Articulosrest>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("ARTICULOSREST_PK");

                entity.ToTable("ARTICULOSREST");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alergenos)
                    .HasColumnName("ALERGENOS")
                    .HasMaxLength(50);

                entity.Property(e => e.Codcupon)
                    .HasColumnName("CODCUPON")
                    .HasMaxLength(20);

                entity.Property(e => e.Codtarifafactporhora).HasColumnName("CODTARIFAFACTPORHORA");

                entity.Property(e => e.Completarplatosmenu).HasColumnName("COMPLETARPLATOSMENU");

                entity.Property(e => e.Esoferta)
                    .HasColumnName("ESOFERTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Factporfranja).HasColumnName("FACTPORFRANJA");

                entity.Property(e => e.Impuestoesp).HasColumnName("IMPUESTOESP");

                entity.Property(e => e.Kcal).HasColumnName("KCAL");

                entity.Property(e => e.Menu)
                    .HasColumnName("MENU")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Minfactporhora).HasColumnName("MINFACTPORHORA");

                entity.Property(e => e.Nocombinar)
                    .HasColumnName("NOCOMBINAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Pordosis)
                    .HasColumnName("PORDOSIS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Preciolibre)
                    .HasColumnName("PRECIOLIBRE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Preciomax).HasColumnName("PRECIOMAX");

                entity.Property(e => e.Preciomin).HasColumnName("PRECIOMIN");

                entity.Property(e => e.Refteclado)
                    .HasColumnName("REFTECLADO")
                    .HasMaxLength(8);

                entity.Property(e => e.Rendimiento)
                    .HasColumnName("RENDIMIENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Secompra)
                    .HasColumnName("SECOMPRA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seleccionableallturnos)
                    .HasColumnName("SELECCIONABLEALLTURNOS")
                    .HasMaxLength(1);

                entity.Property(e => e.Sevende)
                    .HasColumnName("SEVENDE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tara)
                    .HasColumnName("TARA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Validoprimeruso)
                    .HasColumnName("VALIDOPRIMERUSO")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Articulosrest)
                    .HasForeignKey<Articulosrest>(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSREST_FK");
            });

            modelBuilder.Entity<Articulosretencionesbase>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codregimenret })
                    .HasName("ARTICULOSRETENCIONESBASE_PK");

                entity.ToTable("ARTICULOSRETENCIONESBASE");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codregimenret).HasColumnName("CODREGIMENRET");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articulosretencionesbases)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSRETENCIONESBASE_ARTICULOS_PK");

                entity.HasOne(d => d.CodregimenretNavigation)
                    .WithMany(p => p.Articulosretencionesbases)
                    .HasForeignKey(d => d.Codregimenret)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ARTICULOSRETENCIONESBASE_REGIMENRET_PK");
            });

            modelBuilder.Entity<Articulosretencionesiva>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codregimenret })
                    .HasName("ARTICULOSRETENCIONESIVA_PK");

                entity.ToTable("ARTICULOSRETENCIONESIVA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codregimenret).HasColumnName("CODREGIMENRET");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Articulosretencionesivas)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOSRETENCIONESIVA_ARTICULOS_PK");

                entity.HasOne(d => d.CodregimenretNavigation)
                    .WithMany(p => p.Articulosretencionesivas)
                    .HasForeignKey(d => d.Codregimenret)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ARTICULOSRETENCIONESIVA_REGIMENRET_PK");
            });

            modelBuilder.Entity<Asignaciondptovendedore>(entity =>
            {
                entity.HasKey(e => new { e.Coddpto, e.Codvendedor })
                    .HasName("ASIGNACIONDPTOVENDEDORES_PK");

                entity.ToTable("ASIGNACIONDPTOVENDEDORES");

                entity.Property(e => e.Coddpto).HasColumnName("CODDPTO");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.HasOne(d => d.CoddptoNavigation)
                    .WithMany(p => p.Asignaciondptovendedores)
                    .HasForeignKey(d => d.Coddpto)
                    .HasConstraintName("DPTOVENDEDORES_ASIGDPTOR_FK");

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithMany(p => p.Asignaciondptovendedores)
                    .HasForeignKey(d => d.Codvendedor)
                    .HasConstraintName("DPTOVENDEDORES_ASIGVENDEDOR_FK");
            });

            modelBuilder.Entity<Asignacionrecurso>(entity =>
            {
                entity.HasKey(e => new { e.Codgrupo, e.Codrecurso })
                    .HasName("ASIGNACIONRECURSOS_PK");

                entity.ToTable("ASIGNACIONRECURSOS");

                entity.Property(e => e.Codgrupo).HasColumnName("CODGRUPO");

                entity.Property(e => e.Codrecurso).HasColumnName("CODRECURSO");

                entity.HasOne(d => d.CodgrupoNavigation)
                    .WithMany(p => p.Asignacionrecursos)
                    .HasForeignKey(d => d.Codgrupo)
                    .HasConstraintName("ASIGNACIONRECURSOS_GRUPO_FK");

                entity.HasOne(d => d.CodrecursoNavigation)
                    .WithMany(p => p.Asignacionrecursos)
                    .HasForeignKey(d => d.Codrecurso)
                    .HasConstraintName("ASIGNACIONRECURSOS_RECURSOS_FK");
            });

            modelBuilder.Entity<Asunto>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero })
                    .HasName("ASUNTOS_PK");

                entity.ToTable("ASUNTOS");

                entity.HasIndex(e => e.Campobusqueda1)
                    .HasName("ASUNTOSPORCAMPO_BUSC1");

                entity.HasIndex(e => e.Campobusqueda2)
                    .HasName("ASUNTOSPORCAMPO_BUSC2");

                entity.HasIndex(e => e.Codcliente)
                    .HasName("ASUNTOS_CLIENTE");

                entity.HasIndex(e => e.Fecha)
                    .HasName("SERVICIOS_FECHA");

                entity.HasIndex(e => e.Suasunto)
                    .HasName("ASUNTOSPORSUAVISO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ASUNTOSVERSION");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Asunto1)
                    .HasColumnName("ASUNTO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Avisarcliente)
                    .HasColumnName("AVISARCLIENTE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Campobusqueda1)
                    .HasColumnName("CAMPOBUSQUEDA1")
                    .HasMaxLength(40);

                entity.Property(e => e.Campobusqueda2)
                    .HasColumnName("CAMPOBUSQUEDA2")
                    .HasMaxLength(20);

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codcondicion)
                    .HasColumnName("CODCONDICION")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codenviosubcontrata)
                    .HasColumnName("CODENVIOSUBCONTRATA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codlugar)
                    .HasColumnName("CODLUGAR")
                    .HasMaxLength(20);

                entity.Property(e => e.Codsubcontrata).HasColumnName("CODSUBCONTRATA");

                entity.Property(e => e.Codurgencia)
                    .HasColumnName("CODURGENCIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Creador).HasColumnName("CREADOR");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha1)
                    .HasColumnName("FECHA1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha2)
                    .HasColumnName("FECHA2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha3)
                    .HasColumnName("FECHA3")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafinalizado)
                    .HasColumnName("FECHAFINALIZADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Finalizado)
                    .HasColumnName("FINALIZADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Haytemaspendientes)
                    .HasColumnName("HAYTEMASPENDIENTES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idcupoweb).HasColumnName("IDCUPOWEB");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Nombrearticulo)
                    .HasColumnName("NOMBREARTICULO")
                    .HasMaxLength(50);

                entity.Property(e => e.Nombrecontacto)
                    .HasColumnName("NOMBRECONTACTO")
                    .HasMaxLength(40);

                entity.Property(e => e.Pendfacturar)
                    .HasColumnName("PENDFACTURAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Suasunto)
                    .HasColumnName("SUASUNTO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoasunto).HasColumnName("TIPOASUNTO");

                entity.Property(e => e.Tipoavisosat)
                    .HasColumnName("TIPOAVISOSAT")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Tituloasunto)
                    .HasColumnName("TITULOASUNTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TipoasuntoNavigation)
                    .WithMany(p => p.Asuntos)
                    .HasForeignKey(d => d.Tipoasunto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ASUNTOS_TIPO_FK");
            });

            modelBuilder.Entity<Asuntopreguntasconfigurable>(entity =>
            {
                entity.HasKey(e => new { e.Idtipoasunto, e.Codpregunta })
                    .HasName("PK_ASUNTOPREGUNTASCONF");

                entity.ToTable("ASUNTOPREGUNTASCONFIGURABLES");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Codpregunta).HasColumnName("CODPREGUNTA");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.HasOne(d => d.IdtipoasuntoNavigation)
                    .WithMany(p => p.Asuntopreguntasconfigurables)
                    .HasForeignKey(d => d.Idtipoasunto)
                    .HasConstraintName("FK_ASUNTOPREGUNTASCONF_TIPO");
            });

            modelBuilder.Entity<Asuntosarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.Idlin })
                    .HasName("ASUNTOSARTICULOS_PK");

                entity.ToTable("ASUNTOSARTICULOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ASUNTOSARTICULOSVERSION");

                entity.HasIndex(e => new { e.Facturado, e.Desde, e.Importe })
                    .HasName("ASUNTOSARTICULOS_FACTURADO");

                entity.HasIndex(e => new { e.Seriefac, e.Numerofac, e.Nfac })
                    .HasName("ASUNTOSARTICULOS_FAC");

                entity.HasIndex(e => new { e.Desde, e.Facturado, e.Numerofac, e.Unidades })
                    .HasName("ASUNTOSARTICULOS_FECHA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Idlin).HasColumnName("IDLIN");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(80);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Espaquete)
                    .HasColumnName("ESPAQUETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechafac)
                    .HasColumnName("FECHAFAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Identificadorabono)
                    .HasColumnName("IDENTIFICADORABONO")
                    .HasMaxLength(17);

                entity.Property(e => e.Idhotelocupante).HasColumnName("IDHOTELOCUPANTE");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Idlineaocupante).HasColumnName("IDLINEAOCUPANTE");

                entity.Property(e => e.Idpaqueterel).HasColumnName("IDPAQUETEREL");

                entity.Property(e => e.Idrango).HasColumnName("IDRANGO");

                entity.Property(e => e.Idreservaocupante).HasColumnName("IDRESERVAOCUPANTE");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Nalb)
                    .HasColumnName("NALB")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nres)
                    .HasColumnName("NRES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numeroalb).HasColumnName("NUMEROALB");

                entity.Property(e => e.Numerofac).HasColumnName("NUMEROFAC");

                entity.Property(e => e.Numerores).HasColumnName("NUMERORES");

                entity.Property(e => e.Numlinalb).HasColumnName("NUMLINALB");

                entity.Property(e => e.Ordenocupante).HasColumnName("ORDENOCUPANTE");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Seriealb)
                    .HasColumnName("SERIEALB")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefac)
                    .HasColumnName("SERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieocupante)
                    .HasColumnName("SERIEOCUPANTE")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieres)
                    .HasColumnName("SERIERES")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoactividad).HasColumnName("TIPOACTIVIDAD");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Asunto)
                    .WithMany(p => p.Asuntosarticulos)
                    .HasForeignKey(d => new { d.Serie, d.Numero })
                    .HasConstraintName("ASUNTOSARTICULOS_FK");
            });

            modelBuilder.Entity<Asuntosautomatico>(entity =>
            {
                entity.HasKey(e => e.Idclave)
                    .HasName("ASUNTOSAUTO_PK");

                entity.ToTable("ASUNTOSAUTOMATICOS");

                entity.Property(e => e.Idclave)
                    .HasColumnName("IDCLAVE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Activado)
                    .HasColumnName("ACTIVADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codlugar)
                    .IsRequired()
                    .HasColumnName("CODLUGAR")
                    .HasMaxLength(10);

                entity.Property(e => e.Codurgencia).HasColumnName("CODURGENCIA");

                entity.Property(e => e.Creador).HasColumnName("CREADOR");

                entity.Property(e => e.Desplazamiento).HasColumnName("DESPLAZAMIENTO");

                entity.Property(e => e.Fechaproximoaviso)
                    .HasColumnName("FECHAPROXIMOAVISO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fintervalo).HasColumnName("FINTERVALO");

                entity.Property(e => e.Funidades)
                    .HasColumnName("FUNIDADES")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Idcliente).HasColumnName("IDCLIENTE");

                entity.Property(e => e.Idcondiciones).HasColumnName("IDCONDICIONES");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Idtipoaviso).HasColumnName("IDTIPOAVISO");

                entity.Property(e => e.Manodeobra).HasColumnName("MANODEOBRA");

                entity.Property(e => e.Para)
                    .HasColumnName("PARA")
                    .HasColumnType("ntext");

                entity.Property(e => e.Recambios).HasColumnName("RECAMBIOS");

                entity.Property(e => e.Serieaviso)
                    .IsRequired()
                    .HasColumnName("SERIEAVISO")
                    .HasMaxLength(4);

                entity.Property(e => e.Subcontrata)
                    .HasColumnName("SUBCONTRATA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Tipoequipo)
                    .HasColumnName("TIPOEQUIPO")
                    .HasMaxLength(40);

                entity.HasOne(d => d.IdclienteNavigation)
                    .WithMany(p => p.Asuntosautomaticos)
                    .HasForeignKey(d => d.Idcliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ASUNTOSAUTO_CLI_FK");
            });

            modelBuilder.Entity<Asuntosbloqueo>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.Idintervencion })
                    .HasName("ASUNTOSBLOQUEOS_PK");

                entity.ToTable("ASUNTOSBLOQUEOS");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Fechainibloqueo)
                    .HasColumnName("FECHAINIBLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainibloqueo)
                    .HasColumnName("HORAINIBLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);

                entity.HasOne(d => d.Asunto)
                    .WithMany(p => p.Asuntosbloqueos)
                    .HasForeignKey(d => new { d.Serie, d.Numero })
                    .HasConstraintName("ASUNTOSBLOQUEOS_FK");
            });

            modelBuilder.Entity<Asuntoscamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero })
                    .HasName("ASUNTOSCAMPOSLIBRES_PK");

                entity.ToTable("ASUNTOSCAMPOSLIBRES");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.HasOne(d => d.Asunto)
                    .WithOne(p => p.Asuntoscamposlibre)
                    .HasForeignKey<Asuntoscamposlibre>(d => new { d.Serie, d.Numero })
                    .HasConstraintName("ASUNTOSCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Asuntoscontador>(entity =>
            {
                entity.HasKey(e => e.Serieasunto)
                    .HasName("ASUNTOSCONTADOR_PK");

                entity.ToTable("ASUNTOSCONTADOR");

                entity.Property(e => e.Serieasunto)
                    .HasColumnName("SERIEASUNTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Idservicio).HasColumnName("IDSERVICIO");

                entity.Property(e => e.Numeroasunto).HasColumnName("NUMEROASUNTO");
            });

            modelBuilder.Entity<Atemparticslin8466357>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATEMPARTICSLIN_84_66357");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Atemparticslin8483108>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATEMPARTICSLIN_84_83108");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Atemparticslin992584>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATEMPARTICSLIN_99_2584");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Atempil8410662>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATEMPIL_84_10662");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");
            });

            modelBuilder.Entity<Atempil8442312>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATEMPIL_84_42312");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");
            });

            modelBuilder.Entity<Atempil9981307>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATEMPIL_99_81307");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");
            });

            modelBuilder.Entity<Balanceoscab>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("BALANCEOSCAB_PK");

                entity.ToTable("BALANCEOSCAB");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Balanceoslin>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Id })
                    .HasName("BALANCEOSLIN_PK");

                entity.ToTable("BALANCEOSLIN");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Almdest)
                    .HasColumnName("ALMDEST")
                    .HasMaxLength(3);

                entity.Property(e => e.Almorig)
                    .HasColumnName("ALMORIG")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Recogertodo)
                    .HasColumnName("RECOGERTODO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Balanceoslins)
                    .HasForeignKey(d => d.Codigo)
                    .HasConstraintName("BALANCEOSLIN_FK");
            });

            modelBuilder.Entity<Balanza>(entity =>
            {
                entity.ToTable("BALANZAS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Activa)
                    .HasColumnName("ACTIVA")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('F')");

                entity.Property(e => e.Bitsdatos)
                    .HasColumnName("BITSDATOS")
                    .HasDefaultValueSql("((8))");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(15);

                entity.Property(e => e.Esmaster)
                    .HasColumnName("ESMASTER")
                    .HasMaxLength(1);

                entity.Property(e => e.Export)
                    .HasColumnName("EXPORT")
                    .HasMaxLength(100);

                entity.Property(e => e.Import)
                    .HasColumnName("IMPORT")
                    .HasMaxLength(100);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(100);

                entity.Property(e => e.Numterminal).HasColumnName("NUMTERMINAL");

                entity.Property(e => e.Paridad)
                    .HasColumnName("PARIDAD")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.Puertocom).HasColumnName("PUERTOCOM");

                entity.Property(e => e.Puertodest)
                    .HasColumnName("PUERTODEST")
                    .HasDefaultValueSql("((2003))");

                entity.Property(e => e.Puertoorig)
                    .HasColumnName("PUERTOORIG")
                    .HasDefaultValueSql("((2003))");

                entity.Property(e => e.Seccion).HasColumnName("SECCION");

                entity.Property(e => e.Tcpip)
                    .HasColumnName("TCPIP")
                    .HasMaxLength(50);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipocom)
                    .HasColumnName("TIPOCOM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Velocidad)
                    .HasColumnName("VELOCIDAD")
                    .HasDefaultValueSql("((19200))");
            });

            modelBuilder.Entity<Balanzasentidade>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Tipo, e.Codigo });

                entity.ToTable("BALANZASENTIDADES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.Balanzasentidades)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_BALANZASENTIDADES_BALANZAS");
            });

            modelBuilder.Entity<Basesdatosexterna>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("BASESDATOSEXTERNAS_PK");

                entity.ToTable("BASESDATOSEXTERNAS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(100);

                entity.Property(e => e.Pathbd)
                    .HasColumnName("PATHBD")
                    .HasMaxLength(100);

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BiInforme>(entity =>
            {
                entity.HasKey(e => e.Idinforme)
                    .HasName("BI_INFORMES_PK");

                entity.ToTable("BI_INFORMES");

                entity.Property(e => e.Idinforme)
                    .HasColumnName("IDINFORME")
                    .ValueGeneratedNever();

                entity.Property(e => e.Nombrecubo)
                    .HasColumnName("NOMBRECUBO")
                    .HasMaxLength(100);

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BiInformesUsuario>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Idusuario })
                    .HasName("BI_INFORMES_USUARIOS_PK");

                entity.ToTable("BI_INFORMES_USUARIOS");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Idusuario).HasColumnName("IDUSUARIO");

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.BiInformesUsuarios)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("BI_INFORMES_USUARIOS_FK");
            });

            modelBuilder.Entity<BiPermisosUsuario>(entity =>
            {
                entity.HasKey(e => e.Idusuario)
                    .HasName("BI_PERMISOS_USUARIOS_PK");

                entity.ToTable("BI_PERMISOS_USUARIOS");

                entity.Property(e => e.Idusuario)
                    .HasColumnName("IDUSUARIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idinformedefecto).HasColumnName("IDINFORMEDEFECTO");

                entity.Property(e => e.Permisos)
                    .HasColumnName("PERMISOS")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdinformedefectoNavigation)
                    .WithMany(p => p.BiPermisosUsuarios)
                    .HasForeignKey(d => d.Idinformedefecto)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("BI_PERMISOS_USUARIOS_INFORMES_FK");
            });

            modelBuilder.Entity<BloqueosCancelado>(entity =>
            {
                entity.ToTable("BLOQUEOS_CANCELADOS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacancelacion)
                    .HasColumnName("FECHACANCELACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Info)
                    .HasColumnName("INFO")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BloqueosExtractopromocionestarjetum>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("BLOQUEOS_EXTRACTOPROMOCIONESTARJETA_PK");

                entity.ToTable("BLOQUEOS_EXTRACTOPROMOCIONESTARJETA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<BotonesretailIdioma>(entity =>
            {
                entity.HasKey(e => new { e.Codboton, e.Codidioma })
                    .HasName("BOTONESRETAIL_IDIOMAS_PK");

                entity.ToTable("BOTONESRETAIL_IDIOMAS");

                entity.Property(e => e.Codboton).HasColumnName("CODBOTON");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(60);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");
            });

            modelBuilder.Entity<Buzonesemail>(entity =>
            {
                entity.HasKey(e => e.Idbuzon)
                    .HasName("BUZONESEMAIL_PK");

                entity.ToTable("BUZONESEMAIL");

                entity.Property(e => e.Idbuzon)
                    .HasColumnName("IDBUZON")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cc)
                    .HasColumnName("CC")
                    .HasMaxLength(100);

                entity.Property(e => e.Fromadress)
                    .HasColumnName("FROMADRESS")
                    .HasMaxLength(100);

                entity.Property(e => e.Fromname)
                    .HasColumnName("FROMNAME")
                    .HasMaxLength(100);

                entity.Property(e => e.Host)
                    .HasColumnName("HOST")
                    .HasMaxLength(100);

                entity.Property(e => e.Iduser)
                    .HasColumnName("IDUSER")
                    .HasMaxLength(100);

                entity.Property(e => e.Nombreconexion)
                    .HasColumnName("NOMBRECONEXION")
                    .HasMaxLength(100);

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(100);

                entity.Property(e => e.Puerto).HasColumnName("PUERTO");

                entity.Property(e => e.Tipoautentificacion).HasColumnName("TIPOAUTENTIFICACION");
            });

            modelBuilder.Entity<C3bca2022e2f4f359214F5c77a8b3077>(entity =>
            {
                entity.ToTable("{C3BCA202-2E2F-4F35-9214-F5C77A8B3077}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<C88d22d2229b4847B74d6bab21e5b82c>(entity =>
            {
                entity.ToTable("{C88D22D2-229B-4847-B74D-6BAB21E5B82C}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Cajasasignada>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Codvendedor, e.Caja })
                    .HasName("CAJASASIGNADAS_PK");

                entity.ToTable("CAJASASIGNADAS");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.HasOne(d => d.IdterminalNavigation)
                    .WithMany(p => p.Cajasasignada)
                    .HasForeignKey(d => d.Idterminal)
                    .HasConstraintName("CAJASASIGNADAS_FK");
            });

            modelBuilder.Entity<Camposlibresconfig>(entity =>
            {
                entity.HasKey(e => new { e.Tabla, e.Campo })
                    .HasName("CAMPOSLIBRESCONFIG_PK");

                entity.ToTable("CAMPOSLIBRESCONFIG");

                entity.Property(e => e.Tabla).HasColumnName("TABLA");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(20);

                entity.Property(e => e.AvisarVacio).HasColumnName("AVISAR_VACIO");

                entity.Property(e => e.CampoRelacion)
                    .HasColumnName("CAMPO_RELACION")
                    .HasMaxLength(60);

                entity.Property(e => e.Campofisico)
                    .HasColumnName("CAMPOFISICO")
                    .HasMaxLength(40);

                entity.Property(e => e.Etiqueta)
                    .IsRequired()
                    .HasColumnName("ETIQUETA")
                    .HasMaxLength(60);

                entity.Property(e => e.Obligatorio).HasColumnName("OBLIGATORIO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.TablaRelacion).HasColumnName("TABLA_RELACION");

                entity.Property(e => e.Tablafisica)
                    .HasColumnName("TABLAFISICA")
                    .HasMaxLength(40);

                entity.Property(e => e.Tamany).HasColumnName("TAMANY");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipovalor).HasColumnName("TIPOVALOR");

                entity.Property(e => e.ValorMaximo)
                    .HasColumnName("VALOR_MAXIMO")
                    .HasMaxLength(100);

                entity.Property(e => e.ValorMinimo)
                    .HasColumnName("VALOR_MINIMO")
                    .HasMaxLength(100);

                entity.Property(e => e.Valordefecto)
                    .HasColumnName("VALORDEFECTO")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Camposlibresporsubtipo>(entity =>
            {
                entity.HasKey(e => new { e.Tabla, e.Campo, e.Subtipo })
                    .HasName("CAMPOSLIBRESPORTIPO_PK");

                entity.ToTable("CAMPOSLIBRESPORSUBTIPO");

                entity.Property(e => e.Tabla).HasColumnName("TABLA");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(20);

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.Camposlibresconfig)
                    .WithMany(p => p.Camposlibresporsubtipos)
                    .HasForeignKey(d => new { d.Tabla, d.Campo })
                    .HasConstraintName("FK_CAMPOSLIBRESPORSUBTIPO_CAL");
            });

            modelBuilder.Entity<Camposlibresportipoasunto>(entity =>
            {
                entity.HasKey(e => new { e.Idtipoasunto, e.Camp })
                    .HasName("CAMPOSLIBRESPORTIPOASUNTO_PK");

                entity.ToTable("CAMPOSLIBRESPORTIPOASUNTO");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Camp)
                    .HasColumnName("CAMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.HasOne(d => d.IdtipoasuntoNavigation)
                    .WithMany(p => p.Camposlibresportipoasuntos)
                    .HasForeignKey(d => d.Idtipoasunto)
                    .HasConstraintName("CAMPOSLIBRESPORTIPOASUNTO_FK");
            });

            modelBuilder.Entity<Camposlibresposible>(entity =>
            {
                entity.HasKey(e => new { e.Tabla, e.Campo, e.Posicion })
                    .HasName("CAMPOSLIBRESPOSIBLES_PK");

                entity.ToTable("CAMPOSLIBRESPOSIBLES");

                entity.Property(e => e.Tabla).HasColumnName("TABLA");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(20);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Camposlibresconfig)
                    .WithMany(p => p.Camposlibresposibles)
                    .HasForeignKey(d => new { d.Tabla, d.Campo })
                    .HasConstraintName("FK_CAMPOSLIBRESPOSIBLES_CAL");
            });

            modelBuilder.Entity<Caracteristicashabitacione>(entity =>
            {
                entity.HasKey(e => e.Idcaracteristica)
                    .HasName("CARACTERISTICASHABITACIONES_PK");

                entity.ToTable("CARACTERISTICASHABITACIONES");

                entity.Property(e => e.Idcaracteristica)
                    .HasColumnName("IDCARACTERISTICA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Texto)
                    .HasColumnName("TEXTO")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<Cargodtohotel>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("CARGODTOHOTEL_PK");

                entity.ToTable("CARGODTOHOTEL");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CARGODTOHOTELVERSION");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Acumulable)
                    .IsRequired()
                    .HasColumnName("ACUMULABLE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Adulto).HasColumnName("ADULTO");

                entity.Property(e => e.Alojamiento).HasColumnName("ALOJAMIENTO");

                entity.Property(e => e.Aplicarahabitacion).HasColumnName("APLICARAHABITACION");

                entity.Property(e => e.Aplicaren).HasColumnName("APLICAREN");

                entity.Property(e => e.Aplicarsiempre)
                    .IsRequired()
                    .HasColumnName("APLICARSIEMPRE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Aplicarsintarifa).HasColumnName("APLICARSINTARIFA");

                entity.Property(e => e.Bebe).HasColumnName("BEBE");

                entity.Property(e => e.Conagencia).HasColumnName("CONAGENCIA");

                entity.Property(e => e.Diagratis).HasColumnName("DIAGRATIS");

                entity.Property(e => e.Diasantelacion).HasColumnName("DIASANTELACION");

                entity.Property(e => e.Edadmax)
                    .HasColumnName("EDADMAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Edadmin)
                    .HasColumnName("EDADMIN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Extras).HasColumnName("EXTRAS");

                entity.Property(e => e.Fechaentradadesde)
                    .HasColumnName("FECHAENTRADADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentradahasta)
                    .HasColumnName("FECHAENTRADAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaestanciadesde)
                    .HasColumnName("FECHAESTANCIADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaestanciahasta)
                    .HasColumnName("FECHAESTANCIAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechareservadesde)
                    .HasColumnName("FECHARESERVADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechareservahasta)
                    .HasColumnName("FECHARESERVAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Habitaciongratis).HasColumnName("HABITACIONGRATIS");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Impuestosincluidos).HasColumnName("IMPUESTOSINCLUIDOS");

                entity.Property(e => e.Minpaxadulto).HasColumnName("MINPAXADULTO");

                entity.Property(e => e.Minpaxbebe).HasColumnName("MINPAXBEBE");

                entity.Property(e => e.Minpaxnen).HasColumnName("MINPAXNEN");

                entity.Property(e => e.Minunidades).HasColumnName("MINUNIDADES");

                entity.Property(e => e.Nen).HasColumnName("NEN");

                entity.Property(e => e.Numnoches).HasColumnName("NUMNOCHES");

                entity.Property(e => e.Numnochesmax)
                    .HasColumnName("NUMNOCHESMAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Porcentaje).HasColumnName("PORCENTAJE");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Regimen).HasColumnName("REGIMEN");

                entity.Property(e => e.Sinagencia).HasColumnName("SINAGENCIA");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.Property(e => e.Valorx).HasColumnName("VALORX");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithOne(p => p.Cargodtohotel)
                    .HasForeignKey<Cargodtohotel>(d => d.Codarticulo)
                    .HasConstraintName("FK_CARGODTOHOTEL_ARTICULOS");
            });

            modelBuilder.Entity<Cargodtohotelhabitacione>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codhabitacion })
                    .HasName("CARGODTOHOTELHABITACIONES_PK");

                entity.ToTable("CARGODTOHOTELHABITACIONES");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codhabitacion).HasColumnName("CODHABITACION");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Cargodtohotelhabitaciones)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("FK_CARGODTOHOTELHABITACIONES_CARGODTOHOTEL");

                entity.HasOne(d => d.CodhabitacionNavigation)
                    .WithMany(p => p.Cargodtohotelhabitaciones)
                    .HasForeignKey(d => d.Codhabitacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CARGODTOHOTELHABITACIONES_ARTICULOSHABITACIONES");
            });

            modelBuilder.Entity<Cargodtohotelprecio>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codtarifa, e.Codcliente, e.Idtemporada, e.Idrango })
                    .HasName("CARGODTOHOTELPRECIOS_PK");

                entity.ToTable("CARGODTOHOTELPRECIOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CARGODTOHOTELPRECIOSVERSION");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Idrango).HasColumnName("IDRANGO");

                entity.Property(e => e.Diasantelacion).HasColumnName("DIASANTELACION");

                entity.Property(e => e.Fechaentradadesde)
                    .HasColumnName("FECHAENTRADADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentradahasta)
                    .HasColumnName("FECHAENTRADAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaestanciadesde)
                    .HasColumnName("FECHAESTANCIADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaestanciahasta)
                    .HasColumnName("FECHAESTANCIAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechareservadesde)
                    .HasColumnName("FECHARESERVADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechareservahasta)
                    .HasColumnName("FECHARESERVAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numnoches).HasColumnName("NUMNOCHES");

                entity.Property(e => e.Numnochesmax)
                    .HasColumnName("NUMNOCHESMAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.Property(e => e.Valorx).HasColumnName("VALORX");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Cargodtohotelprecios)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("CARGODTOHOTELPRECIOS_CARGODTOHOTEL_FK");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Cargodtohotelprecios)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("FK_CARGODTOHOTELPRECIOS_CLIENTES");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Cargodtohotelprecios)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("FK_CARGODTOHOTELPRECIOS_TARIFASHOTEL");

                entity.HasOne(d => d.IdrangoNavigation)
                    .WithMany(p => p.Cargodtohotelprecios)
                    .HasForeignKey(d => d.Idrango)
                    .HasConstraintName("FK_CARGODTOHOTELPRECIOS_TARIFASHOTELRANGOS");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Cargodtohotelprecios)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("FK_CARGODTOHOTELPRECIOS_TEMPORADASHOTEL");
            });

            modelBuilder.Entity<Cargodtohotelregimene>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codregimen })
                    .HasName("CARGODTOHOTELREGIMENES_PK");

                entity.ToTable("CARGODTOHOTELREGIMENES");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codregimen).HasColumnName("CODREGIMEN");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Cargodtohotelregimenes)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("FK_CARGODTOHOTELREGIMENES_CARGODTOHOTEL");

                entity.HasOne(d => d.CodregimenNavigation)
                    .WithMany(p => p.Cargodtohotelregimenes)
                    .HasForeignKey(d => d.Codregimen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CARGODTOHOTELREGIMENES_ARTICULOSREGIMENES");
            });

            modelBuilder.Entity<Cargodtohoteltarifa>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codtarifa });

                entity.ToTable("CARGODTOHOTELTARIFAS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Cargodtohoteltarifas)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("FK_CARGODTOHOTELTARIFAS_TARIFASHOTEL");
            });

            modelBuilder.Entity<Cargosdto>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("CARGOSDTOS_PK");

                entity.ToTable("CARGOSDTOS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codigofiscal)
                    .HasColumnName("CODIGOFISCAL")
                    .HasMaxLength(3);

                entity.Property(e => e.Codimpuesto).HasColumnName("CODIMPUESTO");

                entity.Property(e => e.Definicion).HasColumnName("DEFINICION");

                entity.Property(e => e.Importeminimo).HasColumnName("IMPORTEMINIMO");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(35);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Siglas)
                    .HasColumnName("SIGLAS")
                    .HasMaxLength(2);

                entity.Property(e => e.Subcuentacompras)
                    .HasColumnName("SUBCUENTACOMPRAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Subcuentaventas)
                    .HasColumnName("SUBCUENTAVENTAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoiva).HasColumnName("TIPOIVA");

                entity.Property(e => e.Tipovalor).HasColumnName("TIPOVALOR");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Visiblecompra)
                    .HasColumnName("VISIBLECOMPRA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Visibleventa)
                    .HasColumnName("VISIBLEVENTA")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Cargosdtoscliente>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codigo })
                    .HasName("CARGOSDTOSCLIENTE_PK");

                entity.ToTable("CARGOSDTOSCLIENTE");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Cargosdtosclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("CARGOSDTOSCLIENTE_FK");
            });

            modelBuilder.Entity<Cargosdtosproveedor>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Codigo })
                    .HasName("CARGOSDTOSPROVEEDOR_PK");

                entity.ToTable("CARGOSDTOSPROVEEDOR");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Cargosdtosproveedors)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("CARGOSDTOSPROVEEDOR_FK");
            });

            modelBuilder.Entity<Carritocab>(entity =>
            {
                entity.HasKey(e => e.Idcarrito);

                entity.ToTable("CARRITOCAB");

                entity.Property(e => e.Idcarrito)
                    .HasColumnName("IDCARRITO")
                    .HasMaxLength(50);

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Carritolin>(entity =>
            {
                entity.HasKey(e => new { e.Idcarrito, e.Idlinea });

                entity.ToTable("CARRITOLIN");

                entity.Property(e => e.Idcarrito)
                    .HasColumnName("IDCARRITO")
                    .HasMaxLength(50);

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descuento).HasColumnName("DESCUENTO");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Udsregalo1).HasColumnName("UDSREGALO1");

                entity.Property(e => e.Udsregalo2).HasColumnName("UDSREGALO2");

                entity.Property(e => e.Unidades1).HasColumnName("UNIDADES1");

                entity.Property(e => e.Unidades2).HasColumnName("UNIDADES2");

                entity.HasOne(d => d.IdcarritoNavigation)
                    .WithMany(p => p.Carritolins)
                    .HasForeignKey(d => d.Idcarrito)
                    .HasConstraintName("FK_CARRITOLIN_CARRITOCAB");
            });

            modelBuilder.Entity<Categorium>(entity =>
            {
                entity.HasKey(e => e.Codcategoria);

                entity.ToTable("CATEGORIA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CATEGORIAVERSION");

                entity.Property(e => e.Codcategoria)
                    .HasColumnName("CODCATEGORIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Centrale>(entity =>
            {
                entity.HasKey(e => e.Idcentral)
                    .HasName("CENTRALES_PK");

                entity.ToTable("CENTRALES");

                entity.Property(e => e.Idcentral)
                    .HasColumnName("IDCENTRAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Frecuenciaexport).HasColumnName("FRECUENCIAEXPORT");

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(30);

                entity.Property(e => e.Maparticulo).HasColumnName("MAPARTICULO");

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(20);

                entity.Property(e => e.Puerto).HasColumnName("PUERTO");

                entity.Property(e => e.Terminalexport).HasColumnName("TERMINALEXPORT");

                entity.Property(e => e.Tipocomunicacion).HasColumnName("TIPOCOMUNICACION");

                entity.Property(e => e.Tipoexport).HasColumnName("TIPOEXPORT");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Centralespermiso>(entity =>
            {
                entity.HasKey(e => new { e.Idcentral, e.Idpermiso })
                    .HasName("CENTRALESPERMISOS_PK");

                entity.ToTable("CENTRALESPERMISOS");

                entity.Property(e => e.Idcentral).HasColumnName("IDCENTRAL");

                entity.Property(e => e.Idpermiso).HasColumnName("IDPERMISO");

                entity.Property(e => e.Seleccionado)
                    .HasColumnName("SELECCIONADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.HasOne(d => d.IdcentralNavigation)
                    .WithMany(p => p.Centralespermisos)
                    .HasForeignKey(d => d.Idcentral)
                    .HasConstraintName("CENTRALESPERMISOS_FK");
            });

            modelBuilder.Entity<Centralesvalore>(entity =>
            {
                entity.HasKey(e => new { e.Idcentral, e.Idpermiso, e.Orden })
                    .HasName("CENTRALESVALORES_PK");

                entity.ToTable("CENTRALESVALORES");

                entity.Property(e => e.Idcentral).HasColumnName("IDCENTRAL");

                entity.Property(e => e.Idpermiso).HasColumnName("IDPERMISO");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(80);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Centralesvalores)
                    .HasForeignKey(d => new { d.Idcentral, d.Idpermiso })
                    .HasConstraintName("CENTRALESVALORES_FK");
            });

            modelBuilder.Entity<Chequeotemp>(entity =>
            {
                entity.HasKey(e => new { e.Tipodoc, e.Serie, e.Numero, e.Numlinea, e.Caja })
                    .HasName("CHEQUEOTEMP_PK");

                entity.ToTable("CHEQUEOTEMP");

                entity.Property(e => e.Tipodoc)
                    .HasColumnName("TIPODOC")
                    .HasMaxLength(2);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.DocfinNumero).HasColumnName("DOCFIN_NUMERO");

                entity.Property(e => e.DocfinSerie)
                    .HasColumnName("DOCFIN_SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Uds1).HasColumnName("UDS1");

                entity.Property(e => e.Uds2).HasColumnName("UDS2");

                entity.Property(e => e.Uds3).HasColumnName("UDS3");

                entity.Property(e => e.Uds4).HasColumnName("UDS4");
            });

            modelBuilder.Entity<Ciclosplan>(entity =>
            {
                entity.HasKey(e => e.Codciclo);

                entity.ToTable("CICLOSPLAN");

                entity.Property(e => e.Codciclo)
                    .HasColumnName("CODCICLO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Ciclosplanlin>(entity =>
            {
                entity.HasKey(e => new { e.Codciclo, e.Coddia });

                entity.ToTable("CICLOSPLANLIN");

                entity.Property(e => e.Codciclo).HasColumnName("CODCICLO");

                entity.Property(e => e.Coddia).HasColumnName("CODDIA");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");
            });

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.HasKey(e => e.Codcliente)
                    .HasName("CLIENTES_PK");

                entity.ToTable("CLIENTES");

                entity.HasIndex(e => e.Codclisuyo)
                    .HasName("CLIENTES_CODCLISUYO");

                entity.HasIndex(e => e.Telefono1)
                    .HasName("CLIENTES_TELEFONO1");

                entity.HasIndex(e => e.Telefono2)
                    .HasName("CLIENTES_TELEFONO2");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CLIENTESVERSION");

                entity.HasIndex(e => new { e.Codcontable, e.Nif20, e.Nombrecliente, e.Nombrecomercial, e.Telefono1, e.Poblacion, e.Provincia, e.Fax, e.Tipo, e.Direccion1, e.Alias, e.Codvisible, e.Codclisuyo, e.Codpais, e.Codcliente, e.Descatalogado })
                    .HasName("CLIENTES_EFCLIENTES");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alias)
                    .HasColumnName("ALIAS")
                    .HasMaxLength(255);

                entity.Property(e => e.Almacen)
                    .HasColumnName("ALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Apdocorreos)
                    .HasColumnName("APDOCORREOS")
                    .HasMaxLength(12);

                entity.Property(e => e.B2bIdmapping).HasColumnName("B2B_IDMAPPING");

                entity.Property(e => e.Bloqueado)
                    .HasColumnName("BLOQUEADO")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('F')");

                entity.Property(e => e.Camposlibrestotalizar).HasColumnName("CAMPOSLIBRESTOTALIZAR");

                entity.Property(e => e.Cantportespag).HasColumnName("CANTPORTESPAG");

                entity.Property(e => e.Cargosextrasa).HasColumnName("CARGOSEXTRASA");

                entity.Property(e => e.Cargosfijosa)
                    .HasColumnName("CARGOSFIJOSA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cif)
                    .HasColumnName("CIF")
                    .HasMaxLength(12);

                entity.Property(e => e.Clienteedi)
                    .HasColumnName("CLIENTEEDI")
                    .HasMaxLength(13);

                entity.Property(e => e.Codbanco)
                    .HasColumnName("CODBANCO")
                    .HasMaxLength(4);

                entity.Property(e => e.Codcliasoc).HasColumnName("CODCLIASOC");

                entity.Property(e => e.Codclisuyo)
                    .HasColumnName("CODCLISUYO")
                    .HasMaxLength(12);

                entity.Property(e => e.Codcontable)
                    .HasColumnName("CODCONTABLE")
                    .HasMaxLength(12);

                entity.Property(e => e.Codcontabledmn)
                    .HasColumnName("CODCONTABLEDMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Codentrega)
                    .HasColumnName("CODENTREGA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Codigoiban)
                    .HasColumnName("CODIGOIBAN")
                    .HasMaxLength(100);

                entity.Property(e => e.Codigoprocedencia).HasColumnName("CODIGOPROCEDENCIA");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Codpostalbanco)
                    .HasColumnName("CODPOSTALBANCO")
                    .HasMaxLength(8);

                entity.Property(e => e.Codswift)
                    .HasColumnName("CODSWIFT")
                    .HasMaxLength(15);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codvisible).HasColumnName("CODVISIBLE");

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Comisionesfacturables).HasColumnName("COMISIONESFACTURABLES");

                entity.Property(e => e.Compradoredi)
                    .HasColumnName("COMPRADOREDI")
                    .HasMaxLength(13);

                entity.Property(e => e.Condentrega)
                    .HasColumnName("CONDENTREGA")
                    .HasMaxLength(3);

                entity.Property(e => e.Condentregaedi)
                    .HasColumnName("CONDENTREGAEDI")
                    .HasMaxLength(3);

                entity.Property(e => e.Cvc)
                    .HasColumnName("CVC")
                    .HasMaxLength(4);

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Diapago1).HasColumnName("DIAPAGO1");

                entity.Property(e => e.Diapago2).HasColumnName("DIAPAGO2");

                entity.Property(e => e.Digcontrolbanco)
                    .HasColumnName("DIGCONTROLBANCO")
                    .HasMaxLength(2);

                entity.Property(e => e.Direccion1)
                    .HasColumnName("DIRECCION1")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccionbanco)
                    .HasColumnName("DIRECCIONBANCO")
                    .HasMaxLength(255);

                entity.Property(e => e.DisenyoCamposlibres).HasColumnName("DISENYO_CAMPOSLIBRES");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.EMail)
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

                entity.Property(e => e.Enviocodpostal)
                    .HasColumnName("ENVIOCODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Enviodirecion)
                    .HasColumnName("ENVIODIRECION")
                    .HasMaxLength(255);

                entity.Property(e => e.Enviopais)
                    .HasColumnName("ENVIOPAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Enviopoblacion)
                    .HasColumnName("ENVIOPOBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Envioprovincia)
                    .HasColumnName("ENVIOPROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Esclientedelgrupo)
                    .HasColumnName("ESCLIENTEDELGRUPO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Facturarconimpuesto).HasColumnName("FACTURARCONIMPUESTO");

                entity.Property(e => e.Facturarsinimpuestos)
                    .HasColumnName("FACTURARSINIMPUESTOS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Faxpedidos)
                    .HasColumnName("FAXPEDIDOS")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechafirmaordenadeudo)
                    .HasColumnName("FECHAFIRMAORDENADEUDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechanacimiento)
                    .HasColumnName("FECHANACIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fotocliente)
                    .HasColumnName("FOTOCLIENTE")
                    .HasColumnType("image");

                entity.Property(e => e.Grupoimpresion).HasColumnName("GRUPOIMPRESION");

                entity.Property(e => e.Idsucursal).HasColumnName("IDSUCURSAL");

                entity.Property(e => e.LocalRemota)
                    .HasColumnName("LOCAL_REMOTA")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('L')");

                entity.Property(e => e.Localizadorobligatorio).HasColumnName("LOCALIZADOROBLIGATORIO");

                entity.Property(e => e.Mesvacaciones).HasColumnName("MESVACACIONES");

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Nif20)
                    .HasColumnName("NIF20")
                    .HasMaxLength(20);

                entity.Property(e => e.Nocalcularcargo1artic)
                    .HasColumnName("NOCALCULARCARGO1ARTIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nocalcularcargo2artic)
                    .HasColumnName("NOCALCULARCARGO2ARTIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrebanco)
                    .HasColumnName("NOMBREBANCO")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecliente)
                    .HasColumnName("NOMBRECLIENTE")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial)
                    .HasColumnName("NOMBRECOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Numcopiasfactura).HasColumnName("NUMCOPIASFACTURA");

                entity.Property(e => e.Numcuenta)
                    .HasColumnName("NUMCUENTA")
                    .HasMaxLength(10);

                entity.Property(e => e.Numdiasentrega).HasColumnName("NUMDIASENTREGA");

                entity.Property(e => e.Numsucursal)
                    .HasColumnName("NUMSUCURSAL")
                    .HasMaxLength(4);

                entity.Property(e => e.Numtarjeta)
                    .HasColumnName("NUMTARJETA")
                    .HasMaxLength(20);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Ordenadeudo)
                    .HasColumnName("ORDENADEUDO")
                    .HasMaxLength(35);

                entity.Property(e => e.Pagadoredi)
                    .HasColumnName("PAGADOREDI")
                    .HasMaxLength(31);

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Pass)
                    .HasColumnName("PASS")
                    .HasMaxLength(8);

                entity.Property(e => e.Passwordcommerce)
                    .HasColumnName("PASSWORDCOMMERCE")
                    .HasMaxLength(32);

                entity.Property(e => e.Personacontacto)
                    .HasColumnName("PERSONACONTACTO")
                    .HasMaxLength(255);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Poblacionbanco)
                    .HasColumnName("POBLACIONBANCO")
                    .HasMaxLength(100);

                entity.Property(e => e.Procedencia)
                    .HasColumnName("PROCEDENCIA")
                    .HasMaxLength(30);

                entity.Property(e => e.Proveedorcomision).HasColumnName("PROVEEDORCOMISION");

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Recargo)
                    .HasColumnName("RECARGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Recc).HasColumnName("RECC");

                entity.Property(e => e.Receptoredi)
                    .HasColumnName("RECEPTOREDI")
                    .HasMaxLength(13);

                entity.Property(e => e.Regimfact)
                    .HasColumnName("REGIMFACT")
                    .HasMaxLength(1);

                entity.Property(e => e.Regimret)
                    .HasColumnName("REGIMRET")
                    .HasMaxLength(1);

                entity.Property(e => e.RetFechafinexclusion)
                    .HasColumnName("RET_FECHAFINEXCLUSION")
                    .HasColumnType("datetime");

                entity.Property(e => e.RetFechainiexclusion)
                    .HasColumnName("RET_FECHAINIEXCLUSION")
                    .HasColumnType("datetime");

                entity.Property(e => e.RetPorcexclusion).HasColumnName("RET_PORCEXCLUSION");

                entity.Property(e => e.RetTiporetencioniva).HasColumnName("RET_TIPORETENCIONIVA");

                entity.Property(e => e.Riesgoconcedido).HasColumnName("RIESGOCONCEDIDO");

                entity.Property(e => e.Secuenciaadeudo).HasColumnName("SECUENCIAADEUDO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Sexo)
                    .HasColumnName("SEXO")
                    .HasMaxLength(1);

                entity.Property(e => e.Subnorma).HasColumnName("SUBNORMA");

                entity.Property(e => e.Tarcaducidad)
                    .HasColumnName("TARCADUCIDAD")
                    .HasMaxLength(4);

                entity.Property(e => e.Telefono1)
                    .HasColumnName("TELEFONO1")
                    .HasMaxLength(15);

                entity.Property(e => e.Telefono2)
                    .HasColumnName("TELEFONO2")
                    .HasMaxLength(15);

                entity.Property(e => e.Telex)
                    .HasColumnName("TELEX")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipocliente).HasColumnName("TIPOCLIENTE");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipoportes)
                    .HasColumnName("TIPOPORTES")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('D')");

                entity.Property(e => e.Tiporeserva).HasColumnName("TIPORESERVA");

                entity.Property(e => e.Tiporet).HasColumnName("TIPORET");

                entity.Property(e => e.Tipotarjeta).HasColumnName("TIPOTARJETA");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(15);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Zona)
                    .HasColumnName("ZONA")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<Clientesactividad>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codactividad })
                    .HasName("CLIENTESACTIVIDAD_PK");

                entity.ToTable("CLIENTESACTIVIDAD");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codactividad).HasColumnName("CODACTIVIDAD");

                entity.Property(e => e.Codcompetencia).HasColumnName("CODCOMPETENCIA");

                entity.Property(e => e.Compras).HasColumnName("COMPRAS");

                entity.HasOne(d => d.CodactividadNavigation)
                    .WithMany(p => p.Clientesactividads)
                    .HasForeignKey(d => d.Codactividad)
                    .HasConstraintName("CLIENTESACTIVIDADACT_FK");
            });

            modelBuilder.Entity<Clientescamposlibre>(entity =>
            {
                entity.HasKey(e => e.Codcliente)
                    .HasName("CLIENTESCAMPOSLIBRES_PK");

                entity.ToTable("CLIENTESCAMPOSLIBRES");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(3);

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithOne(p => p.Clientescamposlibre)
                    .HasForeignKey<Clientescamposlibre>(d => d.Codcliente)
                    .HasConstraintName("CLIENTESCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Clientesenvio>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codenvio })
                    .HasName("CLIENTESENVIO_PK");

                entity.ToTable("CLIENTESENVIO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Cantportespag).HasColumnName("CANTPORTESPAG");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Codtransporte).HasColumnName("CODTRANSPORTE");

                entity.Property(e => e.Defecto)
                    .HasColumnName("DEFECTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Direccion1)
                    .HasColumnName("DIRECCION1")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Kms).HasColumnName("KMS");

                entity.Property(e => e.Nombrecomercial)
                    .HasColumnName("NOMBRECOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(4000);

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Personacontacto)
                    .HasColumnName("PERSONACONTACTO")
                    .HasMaxLength(255);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Poperacional)
                    .HasColumnName("POPERACIONAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipoportes)
                    .HasColumnName("TIPOPORTES")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('D')");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Clientesenvios)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("CLIENTESENVIO_FK");
            });

            modelBuilder.Entity<Clientesintere>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codinteres })
                    .HasName("CLIENTESINTERES_PK");

                entity.ToTable("CLIENTESINTERES");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codinteres).HasColumnName("CODINTERES");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Gradointeres).HasColumnName("GRADOINTERES");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(50);

                entity.HasOne(d => d.CodinteresNavigation)
                    .WithMany(p => p.Clientesinteres)
                    .HasForeignKey(d => d.Codinteres)
                    .HasConstraintName("CLIENTESINTERESINT_FK");
            });

            modelBuilder.Entity<Clientestarifascompra>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codproveedor, e.Idtarifac })
                    .HasName("CLIENTESTARIFASCOMPRA_PK");

                entity.ToTable("CLIENTESTARIFASCOMPRA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CLIENTESTARIFASCOMPRAVERSION");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Idtarifac).HasColumnName("IDTARIFAC");

                entity.Property(e => e.Compradirecta).HasColumnName("COMPRADIRECTA");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Clientestarifascompras)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("CLIENTESTARIFASCOMPRA_CL_FK");

                entity.HasOne(d => d.Tarifascompra)
                    .WithMany(p => p.Clientestarifascompras)
                    .HasForeignKey(d => new { d.Codproveedor, d.Idtarifac })
                    .HasConstraintName("CLIENTESTARIFASCOMPRA_TA_FK");
            });

            modelBuilder.Entity<Clientestemporale>(entity =>
            {
                entity.HasKey(e => e.Codcliente)
                    .HasName("CLIENTESTEMPORALES_PK");

                entity.ToTable("CLIENTESTEMPORALES");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alias)
                    .HasColumnName("ALIAS")
                    .HasMaxLength(255);

                entity.Property(e => e.Cif)
                    .HasColumnName("CIF")
                    .HasMaxLength(12);

                entity.Property(e => e.Codigoprocedencia).HasColumnName("CODIGOPROCEDENCIA");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Crearcomovario)
                    .HasColumnName("CREARCOMOVARIO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Direccion1)
                    .HasColumnName("DIRECCION1")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.EMail)
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Facturarconimpuesto).HasColumnName("FACTURARCONIMPUESTO");

                entity.Property(e => e.Facturarsinimpuestos)
                    .HasColumnName("FACTURARSINIMPUESTOS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Nif20)
                    .HasColumnName("NIF20")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombrecliente)
                    .HasColumnName("NOMBRECLIENTE")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial)
                    .HasColumnName("NOMBRECOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Personacontacto)
                    .HasColumnName("PERSONACONTACTO")
                    .HasMaxLength(255);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Procedencia)
                    .HasColumnName("PROCEDENCIA")
                    .HasMaxLength(30);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Recargo)
                    .HasColumnName("RECARGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Telefono1)
                    .HasColumnName("TELEFONO1")
                    .HasMaxLength(15);

                entity.Property(e => e.Telefono2)
                    .HasColumnName("TELEFONO2")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Clientestemporalescamposlibre>(entity =>
            {
                entity.HasKey(e => e.Codcliente)
                    .HasName("CLIENTESTEMPORALESCAMPOSLIBRES_PK");

                entity.ToTable("CLIENTESTEMPORALESCAMPOSLIBRES");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(3);

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithOne(p => p.Clientestemporalescamposlibre)
                    .HasForeignKey<Clientestemporalescamposlibre>(d => d.Codcliente)
                    .HasConstraintName("CLIENTESTEMPORALESCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Clientestemporalesinfo>(entity =>
            {
                entity.HasKey(e => e.Codcliente)
                    .HasName("CLIENTESTEMPORALESINFO_PK");

                entity.ToTable("CLIENTESTEMPORALESINFO");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<Clientesterminal>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Id })
                    .HasName("CLIENTESTERMINAL_PK");

                entity.ToTable("CLIENTESTERMINAL");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");

                entity.HasOne(d => d.IdterminalNavigation)
                    .WithMany(p => p.Clientesterminals)
                    .HasForeignKey(d => d.Idterminal)
                    .HasConstraintName("CLIENTESTERMINAL_FK");
            });

            modelBuilder.Entity<Clientesvariosinfo>(entity =>
            {
                entity.HasKey(e => e.Codcliente)
                    .HasName("CLIENTESVARIOSINFO_PK");

                entity.ToTable("CLIENTESVARIOSINFO");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<CmrcCamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Nombrecampo });

                entity.ToTable("CMRC_CAMPOSLIBRES");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Nombrecampo)
                    .HasColumnName("NOMBRECAMPO")
                    .HasMaxLength(50);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CmrcEnlace>(entity =>
            {
                entity.HasKey(e => e.Idenlace);

                entity.ToTable("CMRC_ENLACES");

                entity.HasIndex(e => new { e.Idenlacepadre, e.Posicion })
                    .HasName("IX_POSICION")
                    .IsUnique();

                entity.Property(e => e.Idenlace)
                    .HasColumnName("IDENLACE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idenlacepadre).HasColumnName("IDENLACEPADRE");

                entity.Property(e => e.Identificacion).HasColumnName("IDENTIFICACION");

                entity.Property(e => e.Nivel).HasColumnName("NIVEL");

                entity.Property(e => e.Nuevaventana).HasColumnName("NUEVAVENTANA");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(50);

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CmrcEnlacesidioma>(entity =>
            {
                entity.HasKey(e => new { e.Idenlace, e.Ididioma });

                entity.ToTable("CMRC_ENLACESIDIOMAS");

                entity.Property(e => e.Idenlace).HasColumnName("IDENLACE");

                entity.Property(e => e.Ididioma).HasColumnName("IDIDIOMA");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdenlaceNavigation)
                    .WithMany(p => p.CmrcEnlacesidiomas)
                    .HasForeignKey(d => d.Idenlace)
                    .HasConstraintName("FK_CMRC_ENLACESIDIOMAS_CMRC_ENLACES");
            });

            modelBuilder.Entity<CmrcFoto>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("CMRC_FOTOSPK");

                entity.ToTable("CMRC_FOTOS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CmrcFotosarticulo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CMRC_FOTOSARTICULOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codfoto).HasColumnName("CODFOTO");

                entity.Property(e => e.Idimageps)
                    .HasColumnName("IDIMAGEPS")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Portada)
                    .HasColumnName("PORTADA")
                    .HasMaxLength(1);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("CMRC_FOTOSARTICULOSFK");
            });

            modelBuilder.Entity<CmrcFotosarticuloslin>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color, e.Codfoto })
                    .HasName("CMRC_FOTOSARTICULOSLINPK");

                entity.ToTable("CMRC_FOTOSARTICULOSLIN");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Codfoto).HasColumnName("CODFOTO");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.CmrcFotosarticuloslins)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("CMRC_FOTOSARTICULOSLINFK");
            });

            modelBuilder.Entity<CmrcInforme>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Ididioma });

                entity.ToTable("CMRC_INFORMES");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Ididioma).HasColumnName("IDIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Texto)
                    .HasColumnName("TEXTO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Texto2)
                    .HasColumnName("TEXTO2")
                    .HasColumnType("ntext");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Xtrareport)
                    .HasColumnName("XTRAREPORT")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<CmrcParametro>(entity =>
            {
                entity.ToTable("CMRC_PARAMETROS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.ValorBool).HasColumnName("VALOR_BOOL");

                entity.Property(e => e.ValorDecimal)
                    .HasColumnName("VALOR_DECIMAL")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ValorFecha)
                    .HasColumnName("VALOR_FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.ValorFloat).HasColumnName("VALOR_FLOAT");

                entity.Property(e => e.ValorInt).HasColumnName("VALOR_INT");

                entity.Property(e => e.ValorString)
                    .HasColumnName("VALOR_STRING")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<Cobrospago>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Caja, e.Tipo, e.Numero, e.N, e.Cajaorigen })
                    .HasName("COBROSPAGOS_PK");

                entity.ToTable("COBROSPAGOS");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cajaorigen)
                    .HasColumnName("CAJAORIGEN")
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cajafactura).HasColumnName("CAJAFACTURA");

                entity.Property(e => e.Cajastr)
                    .HasColumnName("CAJASTR")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(50);

                entity.Property(e => e.Factor).HasColumnName("FACTOR");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatiquet)
                    .HasColumnName("FECHATIQUET")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fofactura).HasColumnName("FOFACTURA");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.Numtiquet).HasColumnName("NUMTIQUET");

                entity.Property(e => e.Numvencim).HasColumnName("NUMVENCIM");

                entity.Property(e => e.Venorigen).HasColumnName("VENORIGEN");

                entity.Property(e => e.Venpendiente).HasColumnName("VENPENDIENTE");
            });

            modelBuilder.Entity<Codigopostal>(entity =>
            {
                entity.HasKey(e => e.Idcodpostal);

                entity.ToTable("CODIGOPOSTAL");

                entity.Property(e => e.Idcodpostal)
                    .HasColumnName("IDCODPOSTAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codpais)
                    .IsRequired()
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .IsRequired()
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Zona)
                    .HasColumnName("ZONA")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Colore>(entity =>
            {
                entity.HasKey(e => new { e.Codcolor, e.Posicion, e.Color })
                    .HasName("COLORES_PK");

                entity.ToTable("COLORES");

                entity.Property(e => e.Codcolor)
                    .HasColumnName("CODCOLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Posicion)
                    .HasColumnName("POSICION")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");
            });

            modelBuilder.Entity<Columnaslistado>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Idcol })
                    .HasName("COLUMNASLISTADOS_PK");

                entity.ToTable("COLUMNASLISTADOS");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Idcol).HasColumnName("IDCOL");

                entity.Property(e => e.Ancho).HasColumnName("ANCHO");

                entity.Property(e => e.Decimales).HasColumnName("DECIMALES");

                entity.Property(e => e.Nombrecol)
                    .HasColumnName("NOMBRECOL")
                    .HasMaxLength(50);

                entity.Property(e => e.Tipocol)
                    .HasColumnName("TIPOCOL")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Columnaslistadosorg>(entity =>
            {
                entity.HasKey(e => new { e.Idcol, e.Tipo })
                    .HasName("COLUMNASLISTADOSORG_PK");

                entity.ToTable("COLUMNASLISTADOSORG");

                entity.Property(e => e.Idcol).HasColumnName("IDCOL");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Ancho).HasColumnName("ANCHO");

                entity.Property(e => e.Descrip)
                    .HasColumnName("DESCRIP")
                    .HasMaxLength(25);

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ComConfigtrama>(entity =>
            {
                entity.HasKey(e => new { e.Iddispositivo, e.Idoperacion, e.Idtrama, e.Idcampo })
                    .HasName("COM_CONFIGTRAMAS_PK");

                entity.ToTable("COM_CONFIGTRAMAS");

                entity.Property(e => e.Iddispositivo).HasColumnName("IDDISPOSITIVO");

                entity.Property(e => e.Idoperacion).HasColumnName("IDOPERACION");

                entity.Property(e => e.Idtrama).HasColumnName("IDTRAMA");

                entity.Property(e => e.Idcampo).HasColumnName("IDCAMPO");

                entity.Property(e => e.Alineacion)
                    .HasColumnName("ALINEACION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Longitud).HasColumnName("LONGITUD");

                entity.Property(e => e.Nombrecampo)
                    .HasColumnName("NOMBRECAMPO")
                    .HasMaxLength(80);

                entity.Property(e => e.Posinicio).HasColumnName("POSINICIO");

                entity.Property(e => e.Relleno)
                    .HasColumnName("RELLENO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipocampo).HasColumnName("TIPOCAMPO");

                entity.Property(e => e.Valordefecto)
                    .HasColumnName("VALORDEFECTO")
                    .HasMaxLength(80);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ComConfigtramas)
                    .HasForeignKey(d => new { d.Iddispositivo, d.Idoperacion, d.Idtrama })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_CONFIGTRAMAS_TRAMAS_FK");
            });

            modelBuilder.Entity<ComDispositivo>(entity =>
            {
                entity.HasKey(e => e.Iddispositivo)
                    .HasName("COM_DISPOSITIVOS_PK");

                entity.ToTable("COM_DISPOSITIVOS");

                entity.Property(e => e.Iddispositivo)
                    .HasColumnName("IDDISPOSITIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Keyws)
                    .HasColumnName("KEYWS")
                    .HasMaxLength(50);

                entity.Property(e => e.Listacodigos1)
                    .HasColumnName("LISTACODIGOS1")
                    .HasMaxLength(80);

                entity.Property(e => e.Listacodigos2)
                    .HasColumnName("LISTACODIGOS2")
                    .HasMaxLength(80);

                entity.Property(e => e.Listacodigos3)
                    .HasColumnName("LISTACODIGOS3")
                    .HasMaxLength(80);

                entity.Property(e => e.Nombredispositivo)
                    .HasColumnName("NOMBREDISPOSITIVO")
                    .HasMaxLength(80);

                entity.Property(e => e.Tipows).HasColumnName("TIPOWS");

                entity.Property(e => e.Urlws)
                    .HasColumnName("URLWS")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ComOperacione>(entity =>
            {
                entity.HasKey(e => e.Idoperacion)
                    .HasName("COM_OPERACIONES_PK");

                entity.ToTable("COM_OPERACIONES");

                entity.Property(e => e.Idoperacion)
                    .HasColumnName("IDOPERACION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Inputoutput)
                    .HasColumnName("INPUTOUTPUT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nombreoperacion)
                    .HasColumnName("NOMBREOPERACION")
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<ComTrama>(entity =>
            {
                entity.HasKey(e => new { e.Iddispositivo, e.Idoperacion, e.Idtrama })
                    .HasName("COM_TRAMAS_PK");

                entity.ToTable("COM_TRAMAS");

                entity.Property(e => e.Iddispositivo).HasColumnName("IDDISPOSITIVO");

                entity.Property(e => e.Idoperacion).HasColumnName("IDOPERACION");

                entity.Property(e => e.Idtrama).HasColumnName("IDTRAMA");

                entity.Property(e => e.Activo)
                    .HasColumnName("ACTIVO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idtramaresp).HasColumnName("IDTRAMARESP");

                entity.Property(e => e.Longitud).HasColumnName("LONGITUD");

                entity.Property(e => e.Marcafin)
                    .HasColumnName("MARCAFIN")
                    .HasMaxLength(4);

                entity.Property(e => e.Marcainicio)
                    .HasColumnName("MARCAINICIO")
                    .HasMaxLength(4);

                entity.HasOne(d => d.IddispositivoNavigation)
                    .WithMany(p => p.ComTramas)
                    .HasForeignKey(d => d.Iddispositivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_TRAMAS_DISP_FK");

                entity.HasOne(d => d.IdoperacionNavigation)
                    .WithMany(p => p.ComTramas)
                    .HasForeignKey(d => d.Idoperacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COM_TRAMAS_OP_FK");
            });

            modelBuilder.Entity<Comentario>(entity =>
            {
                entity.HasKey(e => e.Codcomentario)
                    .HasName("COMENTARIOS_PK");

                entity.ToTable("COMENTARIOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_COMENTARIOSVERSION");

                entity.Property(e => e.Codcomentario)
                    .HasColumnName("CODCOMENTARIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Comentarioscocina>(entity =>
            {
                entity.HasKey(e => e.Codcomentario)
                    .HasName("COMENTARIOSCOCINA_PK");

                entity.ToTable("COMENTARIOSCOCINA");

                entity.Property(e => e.Codcomentario)
                    .HasColumnName("CODCOMENTARIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Comentariosidioma>(entity =>
            {
                entity.HasKey(e => new { e.Codcomentario, e.Codidioma });

                entity.ToTable("COMENTARIOSIDIOMAS");

                entity.Property(e => e.Codcomentario).HasColumnName("CODCOMENTARIO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.HasOne(d => d.CodcomentarioNavigation)
                    .WithMany(p => p.Comentariosidiomas)
                    .HasForeignKey(d => d.Codcomentario)
                    .HasConstraintName("FK_COMENTARIOSIDIOMAS_COMENTARIOS");

                entity.HasOne(d => d.CodidiomaNavigation)
                    .WithMany(p => p.Comentariosidiomas)
                    .HasForeignKey(d => d.Codidioma)
                    .HasConstraintName("FK_COMENTARIOSIDIOMAS_IDIOMAS");
            });

            modelBuilder.Entity<Comentariosservicio>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("COMENTARIOSSERVICIOS_PK");

                entity.ToTable("COMENTARIOSSERVICIOS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Comisionescab>(entity =>
            {
                entity.HasKey(e => e.Codcomision)
                    .HasName("COMISIONESCAB_PK");

                entity.ToTable("COMISIONESCAB");

                entity.Property(e => e.Codcomision)
                    .HasColumnName("CODCOMISION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1);

                entity.Property(e => e.Modoaplicacion)
                    .HasColumnName("MODOAPLICACION")
                    .HasMaxLength(2);

                entity.Property(e => e.Modocalculo)
                    .HasColumnName("MODOCALCULO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipocomision)
                    .HasColumnName("TIPOCOMISION")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<Comisionesdoc>(entity =>
            {
                entity.HasKey(e => e.Contador)
                    .HasName("COMISIONESDOC_PK");

                entity.ToTable("COMISIONESDOC");

                entity.HasIndex(e => new { e.Idcalculo, e.Codvendedor, e.Codlinea, e.Serie, e.Numero, e.N })
                    .HasName("COMISIONESDOC_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.Contador).HasColumnName("CONTADOR");

                entity.Property(e => e.Codlinea).HasColumnName("CODLINEA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Idcalculo).HasColumnName("IDCALCULO");

                entity.Property(e => e.Importedoc).HasColumnName("IMPORTEDOC");

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nfactura)
                    .HasColumnName("NFACTURA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numerofactura).HasColumnName("NUMEROFACTURA");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefactura)
                    .HasColumnName("SERIEFACTURA")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipodocumento).HasColumnName("TIPODOCUMENTO");

                entity.HasOne(d => d.Histocomisionescab)
                    .WithMany(p => p.Comisionesdocs)
                    .HasForeignKey(d => new { d.Idcalculo, d.Codvendedor })
                    .HasConstraintName("COMISIONESDOC_FK");
            });

            modelBuilder.Entity<Comisioneshecha>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Fechaini, e.Fechafin })
                    .HasName("COMISIONESHECHAS_PK");

                entity.ToTable("COMISIONESHECHAS");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Ret).HasColumnName("RET");

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithMany(p => p.Comisioneshechas)
                    .HasForeignKey(d => d.Codvendedor)
                    .HasConstraintName("COMISIONESHECHAS_FK");
            });

            modelBuilder.Entity<Comisioneslin>(entity =>
            {
                entity.HasKey(e => new { e.Cod, e.Grupoarticulo, e.Desde, e.Hasta })
                    .HasName("COMISIONESLIN_PK");

                entity.ToTable("COMISIONESLIN");

                entity.Property(e => e.Cod).HasColumnName("COD");

                entity.Property(e => e.Grupoarticulo).HasColumnName("GRUPOARTICULO");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Porcentaje).HasColumnName("PORCENTAJE");

                entity.HasOne(d => d.CodNavigation)
                    .WithMany(p => p.Comisioneslins)
                    .HasForeignKey(d => d.Cod)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMISION_FK");
            });

            modelBuilder.Entity<Comisionesporvendedor>(entity =>
            {
                entity.HasKey(e => e.Linea)
                    .HasName("COMISIONESPORVENDEDOR_PK");

                entity.ToTable("COMISIONESPORVENDEDOR");

                entity.Property(e => e.Linea)
                    .HasColumnName("LINEA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Areaneg)
                    .HasColumnName("AREANEG")
                    .HasMaxLength(4);

                entity.Property(e => e.Codcomision).HasColumnName("CODCOMISION");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Filtroventas).HasColumnName("FILTROVENTAS");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modo).HasColumnName("MODO");

                entity.Property(e => e.Tipocliente)
                    .HasColumnName("TIPOCLIENTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipousuario).HasColumnName("TIPOUSUARIO");

                entity.HasOne(d => d.CodcomisionNavigation)
                    .WithMany(p => p.Comisionesporvendedors)
                    .HasForeignKey(d => d.Codcomision)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COMISIONESPORVENDEDOR_COMIFK");
            });

            modelBuilder.Entity<Comisionesvendedor>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Desde, e.Hasta, e.Codcomision })
                    .HasName("COMISIONESVENDEDOR_PK");

                entity.ToTable("COMISIONESVENDEDOR");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Codcomision).HasColumnName("CODCOMISION");

                entity.HasOne(d => d.CodcomisionNavigation)
                    .WithMany(p => p.Comisionesvendedors)
                    .HasForeignKey(d => d.Codcomision)
                    .HasConstraintName("COMISIONESVENDEDOR_FK2");

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithMany(p => p.Comisionesvendedors)
                    .HasForeignKey(d => d.Codvendedor)
                    .HasConstraintName("COMISIONESVENDEDOR_FK1");
            });

            modelBuilder.Entity<CommerceId>(entity =>
            {
                entity.ToTable("COMMERCE_IDS");

                entity.HasIndex(e => new { e.Idtabla, e.Identidad, e.Str1, e.Int1, e.Int2, e.Int3 })
                    .HasName("COMMERCE_IDS_ATC");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Identidad).HasColumnName("IDENTIDAD");

                entity.Property(e => e.Idtabla).HasColumnName("IDTABLA");

                entity.Property(e => e.Int1).HasColumnName("INT1");

                entity.Property(e => e.Int2).HasColumnName("INT2");

                entity.Property(e => e.Int3).HasColumnName("INT3");

                entity.Property(e => e.Int4)
                    .HasColumnName("INT4")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Str1)
                    .HasColumnName("STR1")
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<CommerceIdsTracking>(entity =>
            {
                entity.HasKey(e => new { e.Idtabla, e.Id, e.Str1, e.Int1, e.Int2 });

                entity.ToTable("COMMERCE_IDS_TRACKING");

                entity.Property(e => e.Idtabla).HasColumnName("IDTABLA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Str1)
                    .HasColumnName("STR1")
                    .HasMaxLength(256);

                entity.Property(e => e.Int1).HasColumnName("INT1");

                entity.Property(e => e.Int2).HasColumnName("INT2");
            });

            modelBuilder.Entity<CommerceParametro>(entity =>
            {
                entity.HasKey(e => new { e.Identidad, e.Tipo, e.Str1, e.Int1, e.Int2 });

                entity.ToTable("COMMERCE_PARAMETROS");

                entity.Property(e => e.Identidad).HasColumnName("IDENTIDAD");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Str1)
                    .HasColumnName("STR1")
                    .HasMaxLength(256);

                entity.Property(e => e.Int1).HasColumnName("INT1");

                entity.Property(e => e.Int2).HasColumnName("INT2");
            });

            modelBuilder.Entity<CommerceVersione>(entity =>
            {
                entity.ToTable("COMMERCE_VERSIONES");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Version).HasColumnName("VERSION");
            });

            modelBuilder.Entity<Compensacione>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("COMPENSACIONES_PK");

                entity.ToTable("COMPENSACIONES");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<Competencium>(entity =>
            {
                entity.HasKey(e => e.Codcompetencia)
                    .HasName("COMPETENCIA_PK");

                entity.ToTable("COMPETENCIA");

                entity.Property(e => e.Codcompetencia)
                    .HasColumnName("CODCOMPETENCIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<Complemento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_COMPLEMENTO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(250);

                entity.Property(e => e.Noidentificacion)
                    .IsRequired()
                    .HasColumnName("NOIDENTIFICACION")
                    .HasMaxLength(50);

                entity.Property(e => e.Refproveedor)
                    .HasColumnName("REFPROVEEDOR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasColumnName("RFC")
                    .HasMaxLength(13);

                entity.Property(e => e.Uds)
                    .HasColumnName("UDS")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Umedida)
                    .IsRequired()
                    .HasColumnName("UMEDIDA")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Composicione>(entity =>
            {
                entity.HasKey(e => e.Codcomposicion)
                    .HasName("COMPOSICIONES_PK");

                entity.ToTable("COMPOSICIONES");

                entity.Property(e => e.Codcomposicion)
                    .HasColumnName("CODCOMPOSICION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Composicion)
                    .HasColumnName("COMPOSICION")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Comunicacionlog>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo, e.Fechahoraini })
                    .HasName("COMUNICACIONLOG_PK");

                entity.ToTable("COMUNICACIONLOG");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.Fechahoraini)
                    .HasColumnName("FECHAHORAINI")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Automatico)
                    .HasColumnName("AUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cms)
                    .HasColumnName("CMS")
                    .HasMaxLength(15);

                entity.Property(e => e.Comprimidodesc)
                    .HasColumnName("COMPRIMIDODESC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .HasColumnName("CONTENIDO")
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('0000000000000000000000000')");

                entity.Property(e => e.Enviado)
                    .HasColumnName("ENVIADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fechahoracms)
                    .HasColumnName("FECHAHORACMS")
                    .HasColumnType("datetime");

                entity.Property(e => e.Realizado)
                    .IsRequired()
                    .HasColumnName("REALIZADO")
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('0000000000000000000000000')");
            });

            modelBuilder.Entity<Comunidade>(entity =>
            {
                entity.HasKey(e => new { e.Codpais, e.Codigo })
                    .HasName("COMUNIDADES_PK");

                entity.ToTable("COMUNIDADES");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.HasOne(d => d.CodpaisNavigation)
                    .WithMany(p => p.Comunidades)
                    .HasForeignKey(d => d.Codpais)
                    .HasConstraintName("PAISES_COMUNIDADES");
            });

            modelBuilder.Entity<Concepto>(entity =>
            {
                entity.HasKey(e => new { e.Tipoconcepto, e.Codconcepto })
                    .HasName("CONCEPTOS_PK");

                entity.ToTable("CONCEPTOS");

                entity.Property(e => e.Tipoconcepto).HasColumnName("TIPOCONCEPTO");

                entity.Property(e => e.Codconcepto).HasColumnName("CODCONCEPTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(45);
            });

            modelBuilder.Entity<Conceptosajuste>(entity =>
            {
                entity.ToTable("CONCEPTOSAJUSTE");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CONCEPTOSAJUSTEVERSION");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cuentagastos)
                    .HasColumnName("CUENTAGASTOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Conceptosbancario>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("CONCEPTOSBANCARIOS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Concepto)
                    .HasColumnName("CONCEPTO")
                    .HasMaxLength(120);
            });

            modelBuilder.Entity<Conceptospago>(entity =>
            {
                entity.ToTable("CONCEPTOSPAGO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CONCEPTOSPAGOVERSION");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cuentagastos)
                    .HasColumnName("CUENTAGASTOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Movcaja)
                    .HasColumnName("MOVCAJA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visiblehojacierre)
                    .HasColumnName("VISIBLEHOJACIERRE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Condicione>(entity =>
            {
                entity.HasKey(e => e.Codcondicion)
                    .HasName("CONDICIONES_PK");

                entity.ToTable("CONDICIONES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CONDICIONESVERSION");

                entity.Property(e => e.Codcondicion)
                    .HasColumnName("CODCONDICION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Conddescripcion)
                    .HasColumnName("CONDDESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Desplazamiento)
                    .HasColumnName("DESPLAZAMIENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Facturable)
                    .HasColumnName("FACTURABLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Manodeobra)
                    .HasColumnName("MANODEOBRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Recambios)
                    .HasColumnName("RECAMBIOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Condicionescliente>(entity =>
            {
                entity.HasKey(e => new { e.Idtarifav, e.Numlinea })
                    .HasName("CONDICIONESCLIENTE_PK");

                entity.ToTable("CONDICIONESCLIENTE");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Condiciones)
                    .HasColumnName("CONDICIONES")
                    .HasMaxLength(60);

                entity.Property(e => e.Dpto).HasColumnName("DPTO");

                entity.Property(e => e.Familia).HasColumnName("FAMILIA");

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Marca).HasColumnName("MARCA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Seccion).HasColumnName("SECCION");

                entity.Property(e => e.Subfamilia).HasColumnName("SUBFAMILIA");
            });

            modelBuilder.Entity<Condicionesgruposarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Grupoand, e.Grupoor, e.Incluir })
                    .HasName("CONDICIONESGRUPOSARTICULOS_PK");

                entity.ToTable("CONDICIONESGRUPOSARTICULOS");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Grupoand).HasColumnName("GRUPOAND");

                entity.Property(e => e.Grupoor).HasColumnName("GRUPOOR");

                entity.Property(e => e.Incluir)
                    .HasColumnName("INCLUIR")
                    .HasMaxLength(1);

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(50);

                entity.Property(e => e.Operador)
                    .HasColumnName("OPERADOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Tabla).HasColumnName("TABLA");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.Condicionesgruposarticulos)
                    .HasForeignKey(d => d.Idgrupo)
                    .HasConstraintName("CONDICIONESGRUPOSARTICULOS_FK");
            });

            modelBuilder.Entity<Condicionesgruposcliente>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Grupoand, e.Grupoor, e.Incluir })
                    .HasName("CONDICIONESGRUPOSCLIENTES_PK");

                entity.ToTable("CONDICIONESGRUPOSCLIENTES");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Grupoand).HasColumnName("GRUPOAND");

                entity.Property(e => e.Grupoor).HasColumnName("GRUPOOR");

                entity.Property(e => e.Incluir)
                    .HasColumnName("INCLUIR")
                    .HasMaxLength(1);

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(50);

                entity.Property(e => e.Operador)
                    .HasColumnName("OPERADOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Tabla).HasColumnName("TABLA");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.Condicionesgruposclientes)
                    .HasForeignKey(d => d.Idgrupo)
                    .HasConstraintName("CONDICIONESGRUPOSCLIENTES_FK");
            });

            modelBuilder.Entity<Condicionesgruposocupante>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Grupoand, e.Grupoor, e.Incluir })
                    .HasName("CONDICIONESGRUPOSOCUPANTES_PK");

                entity.ToTable("CONDICIONESGRUPOSOCUPANTES");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Grupoand).HasColumnName("GRUPOAND");

                entity.Property(e => e.Grupoor).HasColumnName("GRUPOOR");

                entity.Property(e => e.Incluir)
                    .HasColumnName("INCLUIR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operador)
                    .HasColumnName("OPERADOR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla).HasColumnName("TABLA");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.Condicionesgruposocupantes)
                    .HasForeignKey(d => d.Idgrupo)
                    .HasConstraintName("CONDICIONESGRUPOSOCUPANTES_FK");
            });

            modelBuilder.Entity<Condicionesproveedor>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Idtarifac, e.Numlinea })
                    .HasName("CONDICIONESPROVEEDOR_PK");

                entity.ToTable("CONDICIONESPROVEEDOR");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Idtarifac).HasColumnName("IDTARIFAC");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Condiciones)
                    .HasColumnName("CONDICIONES")
                    .HasMaxLength(60);

                entity.Property(e => e.Dpto)
                    .HasColumnName("DPTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Familia)
                    .HasColumnName("FAMILIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Linea)
                    .HasColumnName("LINEA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Marca)
                    .HasColumnName("MARCA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Seccion)
                    .HasColumnName("SECCION")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Subfamilia)
                    .HasColumnName("SUBFAMILIA")
                    .HasDefaultValueSql("((-1))");

                entity.HasOne(d => d.Tarifascompra)
                    .WithMany(p => p.Condicionesproveedors)
                    .HasForeignKey(d => new { d.Codproveedor, d.Idtarifac })
                    .HasConstraintName("CONDICIONESPROVEEDOR_FK");
            });

            modelBuilder.Entity<Condicionesrappelsproveedor>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Codrappel, e.Numlinea })
                    .HasName("CONDICIONESRAPPELSPROVEEDOR_PK");

                entity.ToTable("CONDICIONESRAPPELSPROVEEDOR");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codrappel).HasColumnName("CODRAPPEL");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Dpto)
                    .HasColumnName("DPTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Familia)
                    .HasColumnName("FAMILIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Linea)
                    .HasColumnName("LINEA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Marca)
                    .HasColumnName("MARCA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Masmenos)
                    .HasColumnName("MASMENOS")
                    .HasMaxLength(1);

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Seccion)
                    .HasColumnName("SECCION")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Subfamilia)
                    .HasColumnName("SUBFAMILIA")
                    .HasDefaultValueSql("((-1))");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Condicionesrappelsproveedors)
                    .HasForeignKey(d => new { d.Codproveedor, d.Codrappel })
                    .HasConstraintName("CONDICIONESRAPPELSPROVEEDOR_FK");
            });

            modelBuilder.Entity<Configactualizacion>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idprograma })
                    .HasName("PK_CONFIGUPDATEPROGRAM");

                entity.ToTable("CONFIGACTUALIZACION");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idprograma).HasColumnName("IDPROGRAMA");

                entity.Property(e => e.Directorio)
                    .HasColumnName("DIRECTORIO")
                    .HasMaxLength(255);

                entity.Property(e => e.Directorioftp)
                    .HasColumnName("DIRECTORIOFTP")
                    .HasMaxLength(255);

                entity.Property(e => e.Errordescargaftp)
                    .HasColumnName("ERRORDESCARGAFTP")
                    .HasColumnType("ntext");

                entity.Property(e => e.Estadoftp).HasColumnName("ESTADOFTP");

                entity.Property(e => e.Passwordftp)
                    .HasColumnName("PASSWORDFTP")
                    .HasMaxLength(50);

                entity.Property(e => e.Puertoftp).HasColumnName("PUERTOFTP");

                entity.Property(e => e.Serverftp)
                    .HasColumnName("SERVERFTP")
                    .HasMaxLength(40);

                entity.Property(e => e.Terminalftp)
                    .HasColumnName("TERMINALFTP")
                    .HasMaxLength(50);

                entity.Property(e => e.Usuarioftp)
                    .HasColumnName("USUARIOFTP")
                    .HasMaxLength(50);

                entity.Property(e => e.Versionexe).HasColumnName("VERSIONEXE");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.Configactualizacions)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("FK_CONFIGACTUALIZACION_REM_FRONTS");
            });

            modelBuilder.Entity<Configbotone>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Codigo, e.Clave, e.Indice })
                    .HasName("CONFIGBOTONES_PK");

                entity.ToTable("CONFIGBOTONES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CONFIGBOTONESVERSION");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(4);

                entity.Property(e => e.Indice).HasColumnName("INDICE");

                entity.Property(e => e.Caption)
                    .HasColumnName("CAPTION")
                    .HasMaxLength(50);

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Confighabitacione>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Planta, e.Numobjeto })
                    .HasName("CONFIGHABITACIONES_PK");

                entity.ToTable("CONFIGHABITACIONES");

                entity.HasIndex(e => new { e.Eshabitacion, e.Nummesa, e.Extension })
                    .HasName("CONFIGHABITACIONES_ESHAB");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Planta).HasColumnName("PLANTA");

                entity.Property(e => e.Numobjeto).HasColumnName("NUMOBJETO");

                entity.Property(e => e.Caracteristicas)
                    .HasColumnName("CARACTERISTICAS")
                    .HasMaxLength(100);

                entity.Property(e => e.Cargo).HasColumnName("CARGO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Eshabitacion).HasColumnName("ESHABITACION");

                entity.Property(e => e.Extension).HasColumnName("EXTENSION");

                entity.Property(e => e.Nombrehabitacion)
                    .HasColumnName("NOMBREHABITACION")
                    .HasMaxLength(20);

                entity.Property(e => e.Nummesa).HasColumnName("NUMMESA");

                entity.Property(e => e.Opciones)
                    .HasColumnName("OPCIONES")
                    .HasMaxLength(10);

                entity.Property(e => e.Posx).HasColumnName("POSX");

                entity.Property(e => e.Posy).HasColumnName("POSY");

                entity.Property(e => e.Prioridad).HasColumnName("PRIORIDAD");

                entity.Property(e => e.Tarifa).HasColumnName("TARIFA");

                entity.Property(e => e.Tipoobjeto).HasColumnName("TIPOOBJETO");

                entity.Property(e => e.Unidadasociada)
                    .HasColumnName("UNIDADASOCIADA")
                    .HasMaxLength(20);

                entity.HasOne(d => d.PlantaNavigation)
                    .WithMany(p => p.Confighabitaciones)
                    .HasForeignKey(d => new { d.Idhotel, d.Planta })
                    .HasConstraintName("CONFIGHABITACIONES_PLANTA");
            });

            modelBuilder.Entity<Confighorasextra>(entity =>
            {
                entity.HasKey(e => e.Codturno)
                    .HasName("CONFIGHORASEXTRA_PK");

                entity.ToTable("CONFIGHORASEXTRA");

                entity.Property(e => e.Codturno)
                    .HasColumnName("CODTURNO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ddomingo)
                    .HasColumnName("DDOMINGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(70);

                entity.Property(e => e.Djueves)
                    .HasColumnName("DJUEVES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dlunes)
                    .HasColumnName("DLUNES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dmartes)
                    .HasColumnName("DMARTES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dmiercoles)
                    .HasColumnName("DMIERCOLES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dsabado)
                    .HasColumnName("DSABADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dviernes)
                    .HasColumnName("DVIERNES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasMaxLength(10);

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Recargo).HasColumnName("RECARGO");
            });

            modelBuilder.Entity<Configmulticaja>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Caja })
                    .HasName("CONFIGMULTICAJA_PK");

                entity.ToTable("CONFIGMULTICAJA");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Numvendedores).HasColumnName("NUMVENDEDORES");

                entity.Property(e => e.Serieresolucion)
                    .HasColumnName("SERIERESOLUCION")
                    .HasMaxLength(4);

                entity.HasOne(d => d.IdterminalNavigation)
                    .WithMany(p => p.Configmulticajas)
                    .HasForeignKey(d => d.Idterminal)
                    .HasConstraintName("CONFIGMULTICAJA_FK");
            });

            modelBuilder.Entity<Configmulticajaseries>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Caja, e.Tipodoc })
                    .HasName("CONFIGMULTICAJASERIES_PK");

                entity.ToTable("CONFIGMULTICAJASERIES");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.IdterminalNavigation)
                    .WithMany(p => p.Configmulticajaseries)
                    .HasForeignKey(d => d.Idterminal)
                    .HasConstraintName("CONFIGMULTICAJASERIES_FK");
            });

            modelBuilder.Entity<Configturno>(entity =>
            {
                entity.HasKey(e => new { e.Diasemana, e.Posicion })
                    .HasName("CONFIGTURNOS_PK");

                entity.ToTable("CONFIGTURNOS");

                entity.Property(e => e.Diasemana).HasColumnName("DIASEMANA");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Conocimiento>(entity =>
            {
                entity.HasKey(e => new { e.Codempleado, e.Codtipoaviso })
                    .HasName("CONOCIMIENTOS_PK");

                entity.ToTable("CONOCIMIENTOS");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codtipoaviso).HasColumnName("CODTIPOAVISO");

                entity.HasOne(d => d.CodempleadoNavigation)
                    .WithMany(p => p.Conocimientos)
                    .HasForeignKey(d => d.Codempleado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CODEMPLEADOCONOC_FK");

                entity.HasOne(d => d.CodtipoavisoNavigation)
                    .WithMany(p => p.Conocimientos)
                    .HasForeignKey(d => d.Codtipoaviso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CODTIPOAVISOSCONOC_FK");
            });

            modelBuilder.Entity<Consumoscab>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero });

                entity.ToTable("CONSUMOSCAB");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Contabilizado)
                    .HasColumnName("CONTABILIZADO")
                    .HasMaxLength(1);

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tipovaloracion).HasColumnName("TIPOVALORACION");
            });

            modelBuilder.Entity<Contactoscliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONTACTOSCLIENTES");

                entity.Property(e => e.Cargo)
                    .IsRequired()
                    .HasColumnName("CARGO")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Dptoedi)
                    .HasColumnName("DPTOEDI")
                    .HasMaxLength(13);

                entity.Property(e => e.EMail)
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Facturacion).HasColumnName("FACTURACION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tesoreria).HasColumnName("TESORERIA");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("CONTACTOSCLIENTES_FK");
            });

            modelBuilder.Entity<Contactosclientestemporale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONTACTOSCLIENTESTEMPORALES");

                entity.Property(e => e.Cargo)
                    .IsRequired()
                    .HasColumnName("CARGO")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Dptoedi)
                    .HasColumnName("DPTOEDI")
                    .HasMaxLength(13);

                entity.Property(e => e.EMail)
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Facturacion)
                    .HasColumnName("FACTURACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tesoreria)
                    .HasColumnName("TESORERIA")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("CONTACTOSCLIENTESTEMPORALES_FK");
            });

            modelBuilder.Entity<Contactosproveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONTACTOSPROVEEDORES");

                entity.Property(e => e.Cargo)
                    .IsRequired()
                    .HasColumnName("CARGO")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.EMail)
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Facturacion).HasColumnName("FACTURACION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tesoreria).HasColumnName("TESORERIA");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("CONTACTOSPROVEEDORES_FK");
            });

            modelBuilder.Entity<Contadore>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Valor })
                    .HasName("CONTADORES_PK");

                entity.ToTable("CONTADORES");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Valor).HasColumnName("VALOR");
            });

            modelBuilder.Entity<Contrato>(entity =>
            {
                entity.HasKey(e => e.Codcontrato);

                entity.ToTable("CONTRATO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_CONTRATOVERSION");

                entity.Property(e => e.Codcontrato)
                    .HasColumnName("CODCONTRATO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Controltrigger>(entity =>
            {
                entity.HasKey(e => new { e.Spid, e.Trigger })
                    .HasName("CONTROLTRIGGERS_PK");

                entity.ToTable("CONTROLTRIGGERS");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Trigger)
                    .HasColumnName("TRIGGER")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Costesporalmacen>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacen })
                    .HasName("COSTESPORALMACEN_PK");

                entity.ToTable("COSTESPORALMACEN");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codmonedadmn).HasColumnName("CODMONEDADMN");

                entity.Property(e => e.Costemedio)
                    .HasColumnName("COSTEMEDIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costemediodmn).HasColumnName("COSTEMEDIODMN");

                entity.Property(e => e.Costestock)
                    .HasColumnName("COSTESTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costestockdmn).HasColumnName("COSTESTOCKDMN");

                entity.Property(e => e.Fechaultcompra)
                    .HasColumnName("FECHAULTCOMPRA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importecargo1).HasColumnName("IMPORTECARGO1");

                entity.Property(e => e.Importecargo1dmn).HasColumnName("IMPORTECARGO1DMN");

                entity.Property(e => e.Importecargo2).HasColumnName("IMPORTECARGO2");

                entity.Property(e => e.Importecargo2dmn).HasColumnName("IMPORTECARGO2DMN");

                entity.Property(e => e.Preciocomprareal)
                    .HasColumnName("PRECIOCOMPRAREAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Preciocomprarealdmn).HasColumnName("PRECIOCOMPRAREALDMN");

                entity.Property(e => e.Precioultcompra)
                    .HasColumnName("PRECIOULTCOMPRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Precioultcompradmn).HasColumnName("PRECIOULTCOMPRADMN");

                entity.Property(e => e.Ultdesccomercial)
                    .HasColumnName("ULTDESCCOMERCIAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ultdesccomercialdmn).HasColumnName("ULTDESCCOMERCIALDMN");

                entity.Property(e => e.Ultdtocomercial)
                    .HasColumnName("ULTDTOCOMERCIAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ultdtocomercialdmn).HasColumnName("ULTDTOCOMERCIALDMN");

                entity.Property(e => e.Ultimocoste)
                    .HasColumnName("ULTIMOCOSTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ultimocostedmn).HasColumnName("ULTIMOCOSTEDMN");

                entity.Property(e => e.Unidadescompradas)
                    .HasColumnName("UNIDADESCOMPRADAS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unidadescompradasdmn).HasColumnName("UNIDADESCOMPRADASDMN");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Costesporalmacens)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("COSTESPORALMACEN_FK");
            });

            modelBuilder.Entity<Cotizacione>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Codmoneda })
                    .HasName("COTIZACIONES_PK");

                entity.ToTable("COTIZACIONES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_COTIZACIONESVERSION");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodmonedaNavigation)
                    .WithMany(p => p.Cotizaciones)
                    .HasForeignKey(d => d.Codmoneda)
                    .HasConstraintName("COTIZACIONES_FK");
            });

            modelBuilder.Entity<Cuentastraspaso>(entity =>
            {
                entity.HasKey(e => new { e.Nombreconfiguracion, e.Tipo })
                    .HasName("CUENTASTRASPASO_PK");

                entity.ToTable("CUENTASTRASPASO");

                entity.Property(e => e.Nombreconfiguracion)
                    .HasColumnName("NOMBRECONFIGURACION")
                    .HasMaxLength(20);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(4);

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Comentariogastos)
                    .HasColumnName("COMENTARIOGASTOS")
                    .HasMaxLength(30);

                entity.Property(e => e.Concepto).HasColumnName("CONCEPTO");

                entity.Property(e => e.Cuentacompras)
                    .HasColumnName("CUENTACOMPRAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentacosteventas)
                    .HasColumnName("CUENTACOSTEVENTAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentadtopp)
                    .HasColumnName("CUENTADTOPP")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentagrupo67)
                    .HasColumnName("CUENTAGRUPO67")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaiva)
                    .HasColumnName("CUENTAIVA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentare)
                    .HasColumnName("CUENTARE")
                    .HasMaxLength(12);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<D4578086530f40e798c880b127ac47ef>(entity =>
            {
                entity.ToTable("{D4578086-530F-40E7-98C8-80B127AC47EF}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<D7548accEcfb4f10B3239457d74478bd>(entity =>
            {
                entity.ToTable("{D7548ACC-ECFB-4F10-B323-9457D74478BD}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Datoscamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codrespuesta })
                    .HasName("DATOSCAMPOSLIBRES_PK");

                entity.ToTable("DATOSCAMPOSLIBRES");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codrespuesta).HasColumnName("CODRESPUESTA");

                entity.Property(e => e.Boolea)
                    .HasColumnName("BOOLEA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Pregunta)
                    .HasColumnName("PREGUNTA")
                    .HasMaxLength(40);

                entity.Property(e => e.Texto)
                    .HasColumnName("TEXTO")
                    .HasMaxLength(40);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<Datosclientelibre>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codrespuesta })
                    .HasName("DATOSCLIENTELIBRES_PK");

                entity.ToTable("DATOSCLIENTELIBRES");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codrespuesta).HasColumnName("CODRESPUESTA");

                entity.Property(e => e.Boolea)
                    .HasColumnName("BOOLEA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Pregunta)
                    .HasColumnName("PREGUNTA")
                    .HasMaxLength(40);

                entity.Property(e => e.Texto)
                    .HasColumnName("TEXTO")
                    .HasMaxLength(40);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.HasOne(d => d.CodrespuestaNavigation)
                    .WithMany(p => p.Datosclientelibres)
                    .HasForeignKey(d => d.Codrespuesta)
                    .HasConstraintName("DATOSCLIENTELIBRES_FK");
            });

            modelBuilder.Entity<Db8d364095c147bb8a73324a4595b5e4>(entity =>
            {
                entity.ToTable("{DB8D3640-95C1-47BB-8A73-324A4595B5E4}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Declaradoz>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Caja, e.Numz, e.Codmoneda, e.Codmediopago })
                    .HasName("DECLARADOZ_PK");

                entity.ToTable("DECLARADOZ");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Numz).HasColumnName("NUMZ");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codmediopago)
                    .HasColumnName("CODMEDIOPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Idmotivo).HasColumnName("IDMOTIVO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Departamento>(entity =>
            {
                entity.HasKey(e => e.Numdpto)
                    .HasName("DEPARTAMENTO_PK");

                entity.ToTable("DEPARTAMENTO");

                entity.HasIndex(e => e.Numdpto)
                    .HasName("IDX_DEPARTAMENTONUMDPTO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_DEPARTAMENTOVERSION");

                entity.Property(e => e.Numdpto)
                    .HasColumnName("NUMDPTO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Centrocoste)
                    .HasColumnName("CENTROCOSTE")
                    .HasMaxLength(6);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Departamentoidioma>(entity =>
            {
                entity.HasKey(e => new { e.Numdpto, e.Numseccion, e.Numfamilia, e.Numsubfamilia, e.Codidioma });

                entity.ToTable("DEPARTAMENTOIDIOMAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_DEPARTAMENTOIDIOMASVERSION");

                entity.Property(e => e.Numdpto).HasColumnName("NUMDPTO");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.Property(e => e.Numfamilia).HasColumnName("NUMFAMILIA");

                entity.Property(e => e.Numsubfamilia).HasColumnName("NUMSUBFAMILIA");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodidiomaNavigation)
                    .WithMany(p => p.Departamentoidiomas)
                    .HasForeignKey(d => d.Codidioma)
                    .HasConstraintName("FK_DEPARTAMENTOIDIOMAS_IDIOMAS");

                entity.HasOne(d => d.NumdptoNavigation)
                    .WithMany(p => p.Departamentoidiomas)
                    .HasForeignKey(d => d.Numdpto)
                    .HasConstraintName("FK_DEPARTAMENTOIDIOMAS_DEPARTAMENTO");
            });

            modelBuilder.Entity<Descestado>(entity =>
            {
                entity.HasKey(e => e.Estado)
                    .HasName("DESCESTADOS_PK");

                entity.ToTable("DESCESTADOS");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Descuentosclientetipoaviso>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codtipoaviso })
                    .HasName("DESCUENTOSCLIENTETIPOAVISO_PK");

                entity.ToTable("DESCUENTOSCLIENTETIPOAVISO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codtipoaviso).HasColumnName("CODTIPOAVISO");

                entity.Property(e => e.Articulos)
                    .HasColumnName("ARTICULOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Consumibles)
                    .HasColumnName("CONSUMIBLES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Desplazamiento)
                    .HasColumnName("DESPLAZAMIENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Manodeobra)
                    .HasColumnName("MANODEOBRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Desgloseefectivoporz>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Caja, e.Z, e.N, e.Cuenta })
                    .HasName("DESGLOSEEFECTIVOPORZ_PK");

                entity.ToTable("DESGLOSEEFECTIVOPORZ");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta).HasColumnName("CUENTA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");
            });

            modelBuilder.Entity<Devoluciontemp>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Numterminal, e.Numlinea })
                    .HasName("DEVOLUCIONTEMP_PK");

                entity.ToTable("DEVOLUCIONTEMP");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Numterminal).HasColumnName("NUMTERMINAL");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idmotivo).HasColumnName("IDMOTIVO");

                entity.Property(e => e.Idmotivocab).HasColumnName("IDMOTIVOCAB");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Uds).HasColumnName("UDS");
            });

            modelBuilder.Entity<Diasfestivo>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.AO, e.Mes, e.Dia })
                    .HasName("DIASFESTIVOS_PK");

                entity.ToTable("DIASFESTIVOS");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.AO).HasColumnName("A_O");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Dia).HasColumnName("DIA");
            });

            modelBuilder.Entity<Dingustazzy>(entity =>
            {
                entity.HasKey(e => e.Idhotel);

                entity.ToTable("DINGUSTAZZY");

                entity.Property(e => e.Idhotel)
                    .HasColumnName("IDHOTEL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descarga).HasColumnName("DESCARGA");

                entity.Property(e => e.Enproduccion).HasColumnName("ENPRODUCCION");

                entity.Property(e => e.Fieldagencias)
                    .HasColumnName("FIELDAGENCIAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Fieldarticulos)
                    .HasColumnName("FIELDARTICULOS")
                    .HasMaxLength(50);

                entity.Property(e => e.Hotelcode)
                    .IsRequired()
                    .HasColumnName("HOTELCODE")
                    .HasMaxLength(10);

                entity.Property(e => e.Mapagencias).HasColumnName("MAPAGENCIAS");

                entity.Property(e => e.Maparticulos).HasColumnName("MAPARTICULOS");

                entity.Property(e => e.Mapear).HasColumnName("MAPEAR");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50);

                entity.Property(e => e.Subida).HasColumnName("SUBIDA");

                entity.Property(e => e.Syncrosvcurl)
                    .IsRequired()
                    .HasColumnName("SYNCROSVCURL")
                    .HasMaxLength(250);

                entity.Property(e => e.Tiporeserva).HasColumnName("TIPORESERVA");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasColumnName("USERNAME")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithOne(p => p.Dingustazzy)
                    .HasForeignKey<Dingustazzy>(d => d.Idhotel)
                    .HasConstraintName("FK_DINGUSTAZZY_HOTELES");
            });

            modelBuilder.Entity<Dispositivo>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Tipodispositivo, e.Nombre })
                    .HasName("DISPOSITIVOS_PK");

                entity.ToTable("DISPOSITIVOS");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Tipodispositivo)
                    .HasColumnName("TIPODISPOSITIVO")
                    .HasMaxLength(5);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Caracs).HasColumnName("CARACS");

                entity.Property(e => e.Directoriocashdro)
                    .HasColumnName("DIRECTORIOCASHDRO")
                    .HasMaxLength(255);

                entity.Property(e => e.Directoriorespuestas)
                    .HasColumnName("DIRECTORIORESPUESTAS")
                    .HasMaxLength(255);

                entity.Property(e => e.Formato)
                    .HasColumnName("FORMATO")
                    .HasMaxLength(60);

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Impresoracajon)
                    .HasColumnName("IMPRESORACAJON")
                    .HasMaxLength(255);

                entity.Property(e => e.Longitud1).HasColumnName("LONGITUD1");

                entity.Property(e => e.Longitud2).HasColumnName("LONGITUD2");

                entity.Property(e => e.Opciones)
                    .HasColumnName("OPCIONES")
                    .HasMaxLength(20);

                entity.Property(e => e.Secuencia1)
                    .HasColumnName("SECUENCIA1")
                    .HasMaxLength(40);

                entity.Property(e => e.Secuencia2)
                    .HasColumnName("SECUENCIA2")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Dispositivoslin>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Tipodispositivo, e.Nombre, e.Posicion })
                    .HasName("DISPOSITIVOSLIN_PK");

                entity.ToTable("DISPOSITIVOSLIN");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Tipodispositivo)
                    .HasColumnName("TIPODISPOSITIVO")
                    .HasMaxLength(5);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Secuencia)
                    .HasColumnName("SECUENCIA")
                    .HasMaxLength(40);

                entity.HasOne(d => d.Dispositivo)
                    .WithMany(p => p.Dispositivoslins)
                    .HasForeignKey(d => new { d.Idterminal, d.Tipodispositivo, d.Nombre })
                    .HasConstraintName("DISPOSITIVOSLIN_FK");
            });

            modelBuilder.Entity<Dissenycamposlibre>(entity =>
            {
                entity.HasKey(e => e.Codrespuesta)
                    .HasName("DISSENYCAMPOSLIBRES_PK");

                entity.ToTable("DISSENYCAMPOSLIBRES");

                entity.Property(e => e.Codrespuesta)
                    .HasColumnName("CODRESPUESTA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Captioninforme)
                    .HasColumnName("CAPTIONINFORME")
                    .HasMaxLength(25);

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Pregunta)
                    .HasColumnName("PREGUNTA")
                    .HasMaxLength(40);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<Documsdisenyid>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Diseny, e.Tipobanda, e.Linea, e.Columna, e.Numeroelemento })
                    .HasName("DOCUMSDISENYID_PK");

                entity.ToTable("DOCUMSDISENYID");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Diseny).HasColumnName("DISENY");

                entity.Property(e => e.Tipobanda).HasColumnName("TIPOBANDA");

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Columna).HasColumnName("COLUMNA");

                entity.Property(e => e.Numeroelemento).HasColumnName("NUMEROELEMENTO");

                entity.Property(e => e.Alta)
                    .HasColumnName("ALTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Ancha)
                    .HasColumnName("ANCHA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Cursiva)
                    .HasColumnName("CURSIVA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Formato).HasColumnName("FORMATO");

                entity.Property(e => e.Negrita)
                    .HasColumnName("NEGRITA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SecEscAnterior)
                    .HasColumnName("SEC_ESC_ANTERIOR")
                    .HasMaxLength(50);

                entity.Property(e => e.SecEscPosterior)
                    .HasColumnName("SEC_ESC_POSTERIOR")
                    .HasMaxLength(50);

                entity.Property(e => e.Subrallado)
                    .HasColumnName("SUBRALLADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tamany).HasColumnName("TAMANY");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(4000);

                entity.HasOne(d => d.Nombresdocsid)
                    .WithMany(p => p.Documsdisenyids)
                    .HasForeignKey(d => new { d.Grupo, d.Diseny })
                    .HasConstraintName("DOCUMSDISENYID_FK");
            });

            modelBuilder.Entity<Docword>(entity =>
            {
                entity.HasKey(e => new { e.Tipodoc, e.Serie, e.Numero, e.N })
                    .HasName("DOCWORD_PK");

                entity.ToTable("DOCWORD");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Fichero)
                    .HasColumnName("FICHERO")
                    .HasMaxLength(150);

                entity.HasOne(d => d.TipodocNavigation)
                    .WithMany(p => p.Docwords)
                    .HasForeignKey(d => d.Tipodoc)
                    .HasConstraintName("DOCWORD_TIPOSDOC");
            });

            modelBuilder.Entity<Docwordconfig>(entity =>
            {
                entity.HasKey(e => e.Tipodoc)
                    .HasName("DOCWORDCONFIG_PK");

                entity.ToTable("DOCWORDCONFIG");

                entity.Property(e => e.Tipodoc)
                    .HasColumnName("TIPODOC")
                    .ValueGeneratedNever();

                entity.Property(e => e.Path)
                    .HasColumnName("PATH")
                    .HasMaxLength(150);

                entity.Property(e => e.Plantilla)
                    .HasColumnName("PLANTILLA")
                    .HasMaxLength(150);

                entity.HasOne(d => d.TipodocNavigation)
                    .WithOne(p => p.Docwordconfig)
                    .HasForeignKey<Docwordconfig>(d => d.Tipodoc)
                    .HasConstraintName("DOCWORDCONFIG_TIPOSDOC");
            });

            modelBuilder.Entity<Doorbook>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Id });

                entity.ToTable("DOORBOOK");

                entity.HasIndex(e => e.Printed)
                    .HasName("DOORBOOK_PRINTED");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agencia)
                    .HasColumnName("AGENCIA")
                    .HasMaxLength(255);

                entity.Property(e => e.Cliente)
                    .HasColumnName("CLIENTE")
                    .HasMaxLength(255);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasalida)
                    .HasColumnName("FECHASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Lastid).HasColumnName("LASTID");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(255);

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.Property(e => e.Printed).HasColumnName("PRINTED");

                entity.Property(e => e.Regimen)
                    .HasColumnName("REGIMEN")
                    .HasMaxLength(15);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipocliente).HasColumnName("TIPOCLIENTE");
            });

            modelBuilder.Entity<Dptovendedore>(entity =>
            {
                entity.HasKey(e => e.Coddpto)
                    .HasName("DTPOVENDEDORES_PK");

                entity.ToTable("DPTOVENDEDORES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_DPTOVENDEDORESVERSION");

                entity.Property(e => e.Coddpto)
                    .HasColumnName("CODDPTO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Altura).HasColumnName("ALTURA");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Dias).HasColumnName("DIAS");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Intervalo).HasColumnName("INTERVALO");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Dtosocupacionrango>(entity =>
            {
                entity.ToTable("DTOSOCUPACIONRANGOS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Porcentaje).HasColumnName("PORCENTAJE");
            });

            modelBuilder.Entity<Dtosocupaciontemporadum>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Idtemporada, e.Idrango, e.Codcliente });

                entity.ToTable("DTOSOCUPACIONTEMPORADA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Idrango).HasColumnName("IDRANGO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Dto0).HasColumnName("DTO0");

                entity.Property(e => e.Dto1).HasColumnName("DTO1");

                entity.Property(e => e.Dto2).HasColumnName("DTO2");

                entity.Property(e => e.Dto3).HasColumnName("DTO3");

                entity.Property(e => e.Dto4).HasColumnName("DTO4");

                entity.Property(e => e.Dto5).HasColumnName("DTO5");

                entity.Property(e => e.Dto6).HasColumnName("DTO6");

                entity.Property(e => e.Dto7).HasColumnName("DTO7");

                entity.Property(e => e.Dto8).HasColumnName("DTO8");

                entity.Property(e => e.Dto9).HasColumnName("DTO9");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Dtosocupaciontemporada)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("FK_DTOSOCUPACIONTEMPORADA_TARIFASHOTEL");

                entity.HasOne(d => d.IdrangoNavigation)
                    .WithMany(p => p.Dtosocupaciontemporada)
                    .HasForeignKey(d => d.Idrango)
                    .HasConstraintName("FK_DTOSOCUPACIONTEMPORADA_TARIFASHOTELRANGOS");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Dtosocupaciontemporada)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("FK_DTOSOCUPACIONTEMPORADA_TEMPORADASHOTEL");
            });

            modelBuilder.Entity<Dtostarifa>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Orden })
                    .HasName("DTOSTARIFAS_PK");

                entity.ToTable("DTOSTARIFAS");

                entity.HasIndex(e => e.Idtarifav)
                    .HasName("DTOSTARIFAS_TARIFA");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Dtostarifas)
                    .HasForeignKey(d => d.Idtarifav)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("DTOSTARIFAS_FK");
            });

            modelBuilder.Entity<Dtostipoartic>(entity =>
            {
                entity.HasKey(e => new { e.Tipoarticulo, e.Desde, e.Hasta })
                    .HasName("DTOSTIPOARTIC_PK");

                entity.ToTable("DTOSTIPOARTIC");

                entity.Property(e => e.Tipoarticulo).HasColumnName("TIPOARTICULO");

                entity.Property(e => e.Desde).HasColumnName("DESDE");

                entity.Property(e => e.Hasta).HasColumnName("HASTA");

                entity.Property(e => e.Dto).HasColumnName("DTO");
            });

            modelBuilder.Entity<E637deb0F58a4b279d1aD08034f43ce1>(entity =>
            {
                entity.ToTable("{E637DEB0-F58A-4B27-9D1A-D08034F43CE1}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<EcuaTipoidentificacioncomprador>(entity =>
            {
                entity.HasKey(e => e.Regimfact)
                    .HasName("ECUA_TIPOIDENTIFICADORCOMPRADOR_PK");

                entity.ToTable("ECUA_TIPOIDENTIFICACIONCOMPRADOR");

                entity.Property(e => e.Regimfact)
                    .HasColumnName("REGIMFACT")
                    .HasMaxLength(1);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<EcuaTiposidentificadorsujetoretenido>(entity =>
            {
                entity.HasKey(e => e.Regimfact)
                    .HasName("ECUA_TIPOSIDENTIFICADORSUJETORETENIDO_PK");

                entity.ToTable("ECUA_TIPOSIDENTIFICADORSUJETORETENIDO");

                entity.Property(e => e.Regimfact)
                    .HasColumnName("REGIMFACT")
                    .HasMaxLength(1);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<EcuaTiposimpuestosespeciale>(entity =>
            {
                entity.HasKey(e => e.Cargodto)
                    .HasName("ECUA_TIPOSIMPUESTOSESPECIALES_PK");

                entity.ToTable("ECUA_TIPOSIMPUESTOSESPECIALES");

                entity.Property(e => e.Cargodto)
                    .HasColumnName("CARGODTO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Elementosgrupo>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Codarticulo })
                    .HasName("ELEMENTOSGRUPO_PK");

                entity.ToTable("ELEMENTOSGRUPO");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.Elementosgrupos)
                    .HasForeignKey(d => d.Idgrupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ELEMENTOSGRUPO_FK");
            });

            modelBuilder.Entity<Embalaje>(entity =>
            {
                entity.HasKey(e => e.Codembalaje)
                    .HasName("EMBALAJES_PK");

                entity.ToTable("EMBALAJES");

                entity.Property(e => e.Codembalaje)
                    .HasColumnName("CODEMBALAJE")
                    .HasMaxLength(2);

                entity.Property(e => e.Altura).HasColumnName("ALTURA");

                entity.Property(e => e.Anchura).HasColumnName("ANCHURA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Longitud).HasColumnName("LONGITUD");
            });

            modelBuilder.Entity<Entregascuentaproforma>(entity =>
            {
                entity.HasKey(e => new { e.Origen, e.Tipodocumento, e.Serie, e.Numero, e.N, e.Posicion })
                    .HasName("ENTREGASCUENTAPROFORMA_PK")
                    .IsClustered(false);

                entity.ToTable("ENTREGASCUENTAPROFORMA");

                entity.Property(e => e.Origen)
                    .HasColumnName("ORIGEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodocumento)
                    .HasColumnName("TIPODOCUMENTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Entregastarjetum>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Caja, e.Idtarjeta, e.Idlinea })
                    .HasName("ENTREGASTARJETA_PK");

                entity.ToTable("ENTREGASTARJETA");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Consumiciones).HasColumnName("CONSUMICIONES");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Puntos).HasColumnName("PUNTOS");

                entity.Property(e => e.Tickets).HasColumnName("TICKETS");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<Esquematraspaso>(entity =>
            {
                entity.HasKey(e => new { e.Configuracion, e.Esquema, e.Linea })
                    .HasName("ESQUEMATRASPASO_PK");

                entity.ToTable("ESQUEMATRASPASO");

                entity.Property(e => e.Configuracion)
                    .HasColumnName("CONFIGURACION")
                    .HasMaxLength(20);

                entity.Property(e => e.Esquema)
                    .HasColumnName("ESQUEMA")
                    .HasMaxLength(4);

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Clavecuentastraspaso)
                    .HasColumnName("CLAVECUENTASTRASPASO")
                    .HasMaxLength(4);

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Concepto)
                    .HasColumnName("CONCEPTO")
                    .HasMaxLength(10);

                entity.Property(e => e.Cuenta)
                    .HasColumnName("CUENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Debe)
                    .HasColumnName("DEBE")
                    .HasMaxLength(10);

                entity.Property(e => e.Haber)
                    .HasColumnName("HABER")
                    .HasMaxLength(10);

                entity.Property(e => e.Libroiva)
                    .HasColumnName("LIBROIVA")
                    .HasMaxLength(10);

                entity.Property(e => e.Opcional)
                    .HasColumnName("OPCIONAL")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Estadistica>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Idinforme })
                    .HasName("ESTADISTICA_PK");

                entity.ToTable("ESTADISTICA");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Subgrupo).HasColumnName("SUBGRUPO");

                entity.HasOne(d => d.GrupoNavigation)
                    .WithMany(p => p.Estadisticas)
                    .HasForeignKey(d => d.Grupo)
                    .HasConstraintName("ESTADISTICA_FK");

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.Estadisticas)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("ESTADISTICAINFORME_FK");
            });

            modelBuilder.Entity<EstadisticaConfig>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Codusuario });

                entity.ToTable("ESTADISTICA_CONFIG");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Columns)
                    .HasColumnName("COLUMNS")
                    .HasColumnType("image");

                entity.Property(e => e.Report)
                    .HasColumnName("REPORT")
                    .HasColumnType("image");

                entity.Property(e => e.Styles)
                    .HasColumnName("STYLES")
                    .HasColumnType("image");

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.EstadisticaConfigs)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("FK_ESTADISTICA_CONFIG_INFORME");
            });

            modelBuilder.Entity<EstadisticaGrupo>(entity =>
            {
                entity.HasKey(e => e.Idgrupo)
                    .HasName("ESTADISTICA_GRUPOS_PK");

                entity.ToTable("ESTADISTICA_GRUPOS");

                entity.Property(e => e.Idgrupo)
                    .HasColumnName("IDGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EstadisticaSubgrupo>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Idsubgrupo })
                    .HasName("ESTADISTICA_SUBGRUPOS_PK");

                entity.ToTable("ESTADISTICA_SUBGRUPOS");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Idsubgrupo).HasColumnName("IDSUBGRUPO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.EstadisticaSubgrupos)
                    .HasForeignKey(d => d.Idgrupo)
                    .HasConstraintName("ESTADISTICA_SUBGRUPOS_FK");
            });

            modelBuilder.Entity<EstadisticaUsuario>(entity =>
            {
                entity.HasKey(e => new { e.Idusuario, e.Tipo, e.Idinforme })
                    .HasName("ESTADISTICA_USUARIO_PK");

                entity.ToTable("ESTADISTICA_USUARIO");

                entity.Property(e => e.Idusuario).HasColumnName("IDUSUARIO");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Favorito)
                    .HasColumnName("FAVORITO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.Estadistica)
                    .WithMany(p => p.EstadisticaUsuarios)
                    .HasForeignKey(d => new { d.Tipo, d.Idinforme })
                    .HasConstraintName("ESTADISTICA_USUARIO_FK");
            });

            modelBuilder.Entity<EstadisticactrlConfig>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Codusuario });

                entity.ToTable("ESTADISTICACTRL_CONFIG");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Columns)
                    .HasColumnName("COLUMNS")
                    .HasColumnType("image");

                entity.Property(e => e.Datosadicionales)
                    .HasColumnName("DATOSADICIONALES")
                    .HasMaxLength(255);

                entity.Property(e => e.Report)
                    .HasColumnName("REPORT")
                    .HasColumnType("image");

                entity.Property(e => e.Styles)
                    .HasColumnName("STYLES")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<Estadostipodoc>(entity =>
            {
                entity.ToTable("ESTADOSTIPODOC");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasMaxLength(25);

                entity.Property(e => e.Idtipodoc).HasColumnName("IDTIPODOC");

                entity.HasOne(d => d.IdtipodocNavigation)
                    .WithMany(p => p.Estadostipodocs)
                    .HasForeignKey(d => d.Idtipodoc)
                    .HasConstraintName("ESTADOSTIPODOC_FK");
            });

            modelBuilder.Entity<Etiquetasenvio>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numpartida })
                    .HasName("ETIQUETASENVIO_PK");

                entity.ToTable("ETIQUETASENVIO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numpartida).HasColumnName("NUMPARTIDA");

                entity.Property(e => e.Codembalaje)
                    .HasColumnName("CODEMBALAJE")
                    .HasMaxLength(2);

                entity.Property(e => e.Codmanipulacion)
                    .HasColumnName("CODMANIPULACION")
                    .HasMaxLength(3);

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Codtransporte)
                    .HasColumnName("CODTRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Empresaenvio)
                    .HasColumnName("EMPRESAENVIO")
                    .HasMaxLength(255);

                entity.Property(e => e.Etiqporbulto)
                    .HasColumnName("ETIQPORBULTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechaenvio)
                    .HasColumnName("FECHAENVIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importecr).HasColumnName("IMPORTECR");

                entity.Property(e => e.Impreso)
                    .HasColumnName("IMPRESO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nombrecomercial)
                    .HasColumnName("NOMBRECOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Numbultos).HasColumnName("NUMBULTOS");

                entity.Property(e => e.Numexpedicion)
                    .HasColumnName("NUMEXPEDICION")
                    .HasMaxLength(20);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(50);

                entity.Property(e => e.Observaciones2)
                    .HasColumnName("OBSERVACIONES2")
                    .HasMaxLength(50);

                entity.Property(e => e.Observaciones3)
                    .HasColumnName("OBSERVACIONES3")
                    .HasMaxLength(50);

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Personacontacto)
                    .HasColumnName("PERSONACONTACTO")
                    .HasMaxLength(255);

                entity.Property(e => e.Peso).HasColumnName("PESO");

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Poperacional)
                    .HasColumnName("POPERACIONAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipoportes)
                    .HasColumnName("TIPOPORTES")
                    .HasMaxLength(1);

                entity.HasOne(d => d.Albventacab)
                    .WithMany(p => p.Etiquetasenvios)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("ETIQUETASENVIO_FK");
            });

            modelBuilder.Entity<Etiquetasenviocab>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numpartida, e.Numembalaje })
                    .HasName("ETIQUETASENVIOCAB_PK");

                entity.ToTable("ETIQUETASENVIOCAB");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numpartida).HasColumnName("NUMPARTIDA");

                entity.Property(e => e.Numembalaje).HasColumnName("NUMEMBALAJE");

                entity.Property(e => e.Altura).HasColumnName("ALTURA");

                entity.Property(e => e.Anchura).HasColumnName("ANCHURA");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Codembalaje)
                    .HasColumnName("CODEMBALAJE")
                    .HasMaxLength(2);

                entity.Property(e => e.Longitud).HasColumnName("LONGITUD");

                entity.Property(e => e.Numbultos).HasColumnName("NUMBULTOS");

                entity.Property(e => e.Pesobruto).HasColumnName("PESOBRUTO");

                entity.Property(e => e.Pesoneto).HasColumnName("PESONETO");

                entity.HasOne(d => d.Etiquetasenvio)
                    .WithMany(p => p.Etiquetasenviocabs)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N, d.Numpartida })
                    .HasConstraintName("ETIQUETASENVIOCAB_FK");
            });

            modelBuilder.Entity<Etiquetasenviolin>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numpartida, e.Numembalaje, e.Numlinea })
                    .HasName("ETIQUETASENVIOLIN_PK");

                entity.ToTable("ETIQUETASENVIOLIN");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numpartida).HasColumnName("NUMPARTIDA");

                entity.Property(e => e.Numembalaje).HasColumnName("NUMEMBALAJE");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.Etiquetasenviocab)
                    .WithMany(p => p.Etiquetasenviolins)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N, d.Numpartida, d.Numembalaje })
                    .HasConstraintName("ETIQUETASENVIOLIN_FK");
            });

            modelBuilder.Entity<Extractopromocionestarjetum>(entity =>
            {
                entity.HasKey(e => e.Idlinea)
                    .HasName("EXTRACTOPROMOCIONESTARJETA_PK");

                entity.ToTable("EXTRACTOPROMOCIONESTARJETA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Alias)
                    .HasColumnName("ALIAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Consumiciones).HasColumnName("CONSUMICIONES");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Puntos).HasColumnName("PUNTOS");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tickets).HasColumnName("TICKETS");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<FactCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACT_CLIENTES");

                entity.Property(e => e.Banco).HasMaxLength(100);

                entity.Property(e => e.Calle).HasMaxLength(255);

                entity.Property(e => e.CodigoPostal)
                    .HasColumnName("Codigo_Postal")
                    .HasMaxLength(5);

                entity.Property(e => e.Colonia).HasMaxLength(255);

                entity.Property(e => e.CorreoElectronico)
                    .HasColumnName("Correo_Electronico")
                    .HasMaxLength(120);

                entity.Property(e => e.Estado).HasMaxLength(80);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Localidad).HasMaxLength(80);

                entity.Property(e => e.NoExterior).HasMaxLength(100);

                entity.Property(e => e.NoInterior).HasMaxLength(100);

                entity.Property(e => e.NombreFiscal)
                    .HasColumnName("Nombre_Fiscal")
                    .HasMaxLength(255);

                entity.Property(e => e.NumCuenta)
                    .HasColumnName("Num_Cuenta")
                    .HasMaxLength(4);

                entity.Property(e => e.Rfc)
                    .HasColumnName("RFC")
                    .HasMaxLength(20);

                entity.Property(e => e.Telefono).HasMaxLength(50);

                entity.Property(e => e.TipoTransaccion)
                    .HasColumnName("Tipo_Transaccion")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<FactConcepto>(entity =>
            {
                entity.HasKey(e => e.IdConcepto);

                entity.ToTable("FACT_CONCEPTOS");

                entity.Property(e => e.IdConcepto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Codigo).HasMaxLength(50);

                entity.Property(e => e.DescripcionConcepto).HasMaxLength(150);

                entity.Property(e => e.DescuentoPorc).HasColumnType("numeric(19, 5)");

                entity.Property(e => e.IdFactura)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ImporteNeto).HasColumnType("numeric(19, 5)");

                entity.Property(e => e.Impuesto).HasColumnType("numeric(19, 5)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("numeric(19, 5)");

                entity.Property(e => e.Unidades).HasMaxLength(50);
            });

            modelBuilder.Entity<FactEmpresa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACT_EMPRESAS");

                entity.Property(e => e.Calle).HasMaxLength(250);

                entity.Property(e => e.CalleExpedicion)
                    .HasColumnName("Calle_Expedicion")
                    .HasMaxLength(250);

                entity.Property(e => e.ClaveLlave)
                    .HasColumnName("Clave_Llave")
                    .HasMaxLength(500);

                entity.Property(e => e.CodigoPostal)
                    .HasColumnName("Codigo_Postal")
                    .HasMaxLength(5);

                entity.Property(e => e.CodigoPostalExpedicion)
                    .HasColumnName("Codigo_Postal_Expedicion")
                    .HasMaxLength(50);

                entity.Property(e => e.Colonia).HasMaxLength(100);

                entity.Property(e => e.ColoniaExpedicion)
                    .HasColumnName("Colonia_Expedicion")
                    .HasMaxLength(100);

                entity.Property(e => e.Estado).HasMaxLength(100);

                entity.Property(e => e.EstadoExpedicion)
                    .HasColumnName("Estado_Expedicion")
                    .HasMaxLength(100);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Localidad).HasMaxLength(100);

                entity.Property(e => e.LocalidadExpedicion)
                    .HasColumnName("Localidad_Expedicion")
                    .HasMaxLength(100);

                entity.Property(e => e.Municipio).HasMaxLength(100);

                entity.Property(e => e.MunicipioExpedicion)
                    .HasColumnName("Municipio_Expedicion")
                    .HasMaxLength(100);

                entity.Property(e => e.NoExterior)
                    .HasColumnName("No_Exterior")
                    .HasMaxLength(15);

                entity.Property(e => e.NoExteriorExpedicion)
                    .HasColumnName("No_Exterior_Expedicion")
                    .HasMaxLength(15);

                entity.Property(e => e.NoInterior)
                    .HasColumnName("No_Interior")
                    .HasMaxLength(15);

                entity.Property(e => e.NoInteriorExpedicion)
                    .HasColumnName("No_Interior_Expedicion")
                    .HasMaxLength(15);

                entity.Property(e => e.NombreFiscal)
                    .HasColumnName("Nombre_Fiscal")
                    .HasMaxLength(250);

                entity.Property(e => e.Pais).HasMaxLength(100);

                entity.Property(e => e.PaisExpedicion)
                    .HasColumnName("Pais_Expedicion")
                    .HasMaxLength(100);

                entity.Property(e => e.Referencia).HasMaxLength(100);

                entity.Property(e => e.ReferenciaExpedicion)
                    .HasColumnName("Referencia_Expedicion")
                    .HasMaxLength(100);

                entity.Property(e => e.Rfc)
                    .HasColumnName("RFC")
                    .HasMaxLength(50);

                entity.Property(e => e.RutaCertificado)
                    .HasColumnName("Ruta_Certificado")
                    .HasMaxLength(500);

                entity.Property(e => e.RutaLlave)
                    .HasColumnName("Ruta_Llave")
                    .HasMaxLength(500);

                entity.Property(e => e.SerieTickets)
                    .HasColumnName("Serie_Tickets")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<FactFactura>(entity =>
            {
                entity.HasKey(e => e.IdFactura);

                entity.ToTable("FACT_FACTURAS");

                entity.Property(e => e.IdFactura).ValueGeneratedNever();

                entity.Property(e => e.Condicion).HasMaxLength(255);

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.IdCliente).HasMaxLength(100);

                entity.Property(e => e.IdEmpresa).HasMaxLength(50);

                entity.Property(e => e.IdSerie).HasMaxLength(8);

                entity.Property(e => e.IdTicket).HasMaxLength(8);

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.IvaPorc).HasColumnName("IVA_Porc");

                entity.Property(e => e.LeyendaPieFactura).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(2);
            });

            modelBuilder.Entity<FactUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACT_USUARIOS");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(9);

                entity.Property(e => e.NombreUsuario)
                    .HasColumnName("Nombre_Usuario")
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);
            });

            modelBuilder.Entity<Facturacionparking>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Importe })
                    .HasName("FACTURACIONPARKING_PK");

                entity.ToTable("FACTURACIONPARKING");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Minutos).HasColumnName("MINUTOS");
            });

            modelBuilder.Entity<Facturacionprovcab>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Numconcepto })
                    .HasName("FACTURACIONPROVCAB_PK");

                entity.ToTable("FACTURACIONPROVCAB");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Numconcepto).HasColumnName("NUMCONCEPTO");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacobro)
                    .HasColumnName("FECHACOBRO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numfac).HasColumnName("NUMFAC");

                entity.Property(e => e.Numseriefac)
                    .HasColumnName("NUMSERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Siglas)
                    .HasColumnName("SIGLAS")
                    .HasMaxLength(2);

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Facturacionprovcabs)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("FACTURACIONPROVCAB_FK");
            });

            modelBuilder.Entity<Facturacionprovlin>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Numconcepto, e.Numlin })
                    .HasName("FACTURACIONPROVLIN_PK");

                entity.ToTable("FACTURACIONPROVLIN");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Numconcepto).HasColumnName("NUMCONCEPTO");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.HasOne(d => d.Facturacionprovcab)
                    .WithMany(p => p.Facturacionprovlins)
                    .HasForeignKey(d => new { d.Codproveedor, d.Numconcepto })
                    .HasConstraintName("FACTURACIONPROVLIN_FK");
            });

            modelBuilder.Entity<Facturasaborrar>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("FACTURASABORRAR_PK");

                entity.ToTable("FACTURASABORRAR");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Facturascompra>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACTURASCOMPRA_PK");

                entity.ToTable("FACTURASCOMPRA");

                entity.HasIndex(e => e.Codproveedor)
                    .HasName("FACTURASCOMPRA_PROVEEDOR");

                entity.HasIndex(e => e.Fecha)
                    .HasName("FACTURASCOMPRA_FECHA");

                entity.HasIndex(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACCOMPRA_DESC");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esentregaacuenta)
                    .HasColumnName("ESENTREGAACUENTA")
                    .HasMaxLength(1);

                entity.Property(e => e.Esinversion)
                    .HasColumnName("ESINVERSION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasufactura)
                    .HasColumnName("FECHASUFACTURA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Regimfact)
                    .HasColumnName("REGIMFACT")
                    .HasMaxLength(1);

                entity.Property(e => e.Sufactura)
                    .HasColumnName("SUFACTURA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalimpuestos).HasColumnName("TOTALIMPUESTOS");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");

                entity.Property(e => e.Totalretencion).HasColumnName("TOTALRETENCION");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Traspasado)
                    .HasColumnName("TRASPASADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Usuariodescuadre).HasColumnName("USUARIODESCUADRE");
            });

            modelBuilder.Entity<Facturascompracamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACTURASCOMPRACAMPOSLIBRES_PK");

                entity.ToTable("FACTURASCOMPRACAMPOSLIBRES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Sucursal)
                    .HasColumnName("SUCURSAL")
                    .HasMaxLength(50);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Facturascompracamposlibre)
                    .HasForeignKey<Facturascompracamposlibre>(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASCOMPRACAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Facturascompracomprobanteret>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACTURASCOMPRACOMPROBANTERET_PK");

                entity.ToTable("FACTURASCOMPRACOMPROBANTERET");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Electronica).HasColumnName("ELECTRONICA");

                entity.Property(e => e.Manual).HasColumnName("MANUAL");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Facturascompracomprobanteret)
                    .HasForeignKey<Facturascompracomprobanteret>(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASCOMPRACOMPROBANTERET_FK");
            });

            modelBuilder.Entity<Facturascompracuenta>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Numlinea })
                    .HasName("FACTURASCOMPRACUENTAS_PK");

                entity.ToTable("FACTURASCOMPRACUENTAS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Centrocoste)
                    .HasColumnName("CENTROCOSTE")
                    .HasMaxLength(6);

                entity.Property(e => e.Cuenta)
                    .HasColumnName("CUENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturascompracuenta)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASCOMPRACUENTAS_FK");
            });

            modelBuilder.Entity<Facturascompradto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea })
                    .HasName("FACTURASCOMPRADTOS_PK");

                entity.ToTable("FACTURASCOMPRADTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturascompradtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N })
                    .HasConstraintName("FACTURASCOMPRADTOS_FK");
            });

            modelBuilder.Entity<Facturascomprafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("FACTURASCOMPRAFIRMA_PK");

                entity.ToTable("FACTURASCOMPRAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.Facturascompra)
                    .WithOne(p => p.Facturascomprafirma)
                    .HasForeignKey<Facturascomprafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("FACTURASCOMPRAFIRMA_FK");
            });

            modelBuilder.Entity<Facturascompraret>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Numlin });

                entity.ToTable("FACTURASCOMPRARET");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Porcret).HasColumnName("PORCRET");

                entity.Property(e => e.Regimret).HasColumnName("REGIMRET");

                entity.Property(e => e.Tiporet).HasColumnName("TIPORET");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturascomprarets)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASCOMPRARET_FK");
            });

            modelBuilder.Entity<Facturascompraseriesresol>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Seriefiscal1, e.Seriefiscal2, e.Numerofiscal })
                    .HasName("FACTURASCOMPRASERIESRESOL_PK");

                entity.ToTable("FACTURASCOMPRASERIESRESOL");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seriefiscal1)
                    .HasColumnName("SERIEFISCAL1")
                    .HasMaxLength(15);

                entity.Property(e => e.Seriefiscal2)
                    .HasColumnName("SERIEFISCAL2")
                    .HasMaxLength(15);

                entity.Property(e => e.Numerofiscal).HasColumnName("NUMEROFISCAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturascompraseriesresols)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASCOMPRASERIESRESOL_FK");
            });

            modelBuilder.Entity<Facturascompratot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("FACTURASCOMPRATOT_PK");

                entity.ToTable("FACTURASCOMPRATOT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Descuadre).HasColumnName("DESCUADRE");

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.Property(e => e.Verificado).HasColumnName("VERIFICADO");

                entity.HasOne(d => d.Facturascompra)
                    .WithMany(p => p.Facturascompratots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("FACTURASCOMPRATOT_FK");
            });

            modelBuilder.Entity<Facturasventacamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACTURASVENTACAMPOSLIBRES_PK");

                entity.ToTable("FACTURASVENTACAMPOSLIBRES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Factura)
                    .HasColumnName("FACTURA")
                    .HasMaxLength(50);

                entity.Property(e => e.Formapago)
                    .HasColumnName("FORMAPAGO")
                    .HasMaxLength(50);

                entity.Property(e => e.Metodopago)
                    .HasColumnName("METODOPAGO")
                    .HasMaxLength(50);

                entity.Property(e => e.Requisicion)
                    .HasColumnName("REQUISICION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tiporelacion)
                    .HasColumnName("TIPORELACION")
                    .HasMaxLength(50);

                entity.Property(e => e.Usocfdi)
                    .HasColumnName("USOCFDI")
                    .HasMaxLength(50);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Facturasventacamposlibre)
                    .HasForeignKey<Facturasventacamposlibre>(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASVENTACAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Facturasventacliente>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACTURASVENTACLIENTES_PK");

                entity.ToTable("FACTURASVENTACLIENTES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Clientetarjeta)
                    .HasColumnName("CLIENTETARJETA")
                    .HasMaxLength(50);

                entity.Property(e => e.Codigopostal)
                    .HasColumnName("CODIGOPOSTAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(5);

                entity.Property(e => e.Descpais)
                    .HasColumnName("DESCPAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Devolivaboxvel).HasColumnName("DEVOLIVABOXVEL");

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(250);

                entity.Property(e => e.Docidglobalblue)
                    .HasColumnName("DOCIDGLOBALBLUE")
                    .HasMaxLength(20);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Fechacaducidadtarjeta)
                    .HasColumnName("FECHACADUCIDADTARJETA")
                    .HasMaxLength(5);

                entity.Property(e => e.Fechaenvioboxvel)
                    .HasColumnName("FECHAENVIOBOXVEL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nif)
                    .HasColumnName("NIF")
                    .HasMaxLength(35);

                entity.Property(e => e.Noaplicarimpuestos).HasColumnName("NOAPLICARIMPUESTOS");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(250);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(80);

                entity.Property(e => e.Profesion)
                    .HasColumnName("PROFESION")
                    .HasMaxLength(150);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(80);

                entity.Property(e => e.Tarjetafidelizacion)
                    .HasColumnName("TARJETAFIDELIZACION")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxoffice)
                    .HasColumnName("TAXOFFICE")
                    .HasMaxLength(50);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(35);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Facturasventacliente)
                    .HasForeignKey<Facturasventacliente>(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASVENTACLIENTES_FK");
            });

            modelBuilder.Entity<Facturasventadto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea })
                    .HasName("FACTURASVENTADTOS_PK");

                entity.ToTable("FACTURASVENTADTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturasventadtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N })
                    .HasConstraintName("FACTURASVENTADTOS_FK");
            });

            modelBuilder.Entity<Facturasventafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("FACTURASVENTAFIRMA_PK");

                entity.ToTable("FACTURASVENTAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.Facturasventum)
                    .WithOne(p => p.Facturasventafirma)
                    .HasForeignKey<Facturasventafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("FACTURASVENTAFIRMA_FK");
            });

            modelBuilder.Entity<Facturasventahotel>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Numlin })
                    .HasName("FACTURASVENTAHOTEL_PK");

                entity.ToTable("FACTURASVENTAHOTEL");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Actividad)
                    .HasColumnName("ACTIVIDAD")
                    .HasMaxLength(255);

                entity.Property(e => e.Captionhabitacion)
                    .HasColumnName("CAPTIONHABITACION")
                    .HasMaxLength(255);

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Dpto).HasColumnName("DPTO");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasalida)
                    .HasColumnName("FECHASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Grupoocupante)
                    .HasColumnName("GRUPOOCUPANTE")
                    .HasMaxLength(255);

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.Property(e => e.Paxbebe).HasColumnName("PAXBEBE");

                entity.Property(e => e.Paxnen).HasColumnName("PAXNEN");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Reserva)
                    .HasColumnName("RESERVA")
                    .HasMaxLength(255);

                entity.Property(e => e.Seccion).HasColumnName("SECCION");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Sureserva)
                    .HasColumnName("SURESERVA")
                    .HasMaxLength(255);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturasventahotels)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASVENTAHOTEL_FK");
            });

            modelBuilder.Entity<Facturasventanota>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Numserienotas, e.Numfacturanotas, e.Nnotas })
                    .HasName("FACTURASVENTANOTAS_PK");

                entity.ToTable("FACTURASVENTANOTAS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numserienotas)
                    .HasColumnName("NUMSERIENOTAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfacturanotas).HasColumnName("NUMFACTURANOTAS");

                entity.Property(e => e.Nnotas)
                    .HasColumnName("NNOTAS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturasventanota)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASVENTANOTAS_FK");
            });

            modelBuilder.Entity<Facturasventapromocione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Idpromocion })
                    .HasName("FACTURASVENTAPROMOCIONES_PK");

                entity.ToTable("FACTURASVENTAPROMOCIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturasventapromociones)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASVENTAPROMOCIONES_FK");
            });

            modelBuilder.Entity<Facturasventaret>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Numlin });

                entity.ToTable("FACTURASVENTARET");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Porcret).HasColumnName("PORCRET");

                entity.Property(e => e.Regimret).HasColumnName("REGIMRET");

                entity.Property(e => e.Tiporet).HasColumnName("TIPORET");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturasventarets)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASVENTARET_FK");
            });

            modelBuilder.Entity<Facturasventaseriesresol>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Seriefiscal1, e.Seriefiscal2, e.Numerofiscal })
                    .HasName("FACTURASVENTASERIESRESOL_PK");

                entity.ToTable("FACTURASVENTASERIESRESOL");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seriefiscal1)
                    .HasColumnName("SERIEFISCAL1")
                    .HasMaxLength(15);

                entity.Property(e => e.Seriefiscal2)
                    .HasColumnName("SERIEFISCAL2")
                    .HasMaxLength(15);

                entity.Property(e => e.Numerofiscal).HasColumnName("NUMEROFISCAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Facturasventaseriesresols)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("FACTURASVENTASERIESRESOL_FK");
            });

            modelBuilder.Entity<Facturasventatot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("FACTURASVENTATOT_PK");

                entity.ToTable("FACTURASVENTATOT");

                entity.HasIndex(e => new { e.Baseimponible, e.Totiva, e.Totreq, e.Serie, e.Numero, e.N, e.Iva, e.Req })
                    .HasName("FACTURASVENTATOT_IVA_REQ");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.HasOne(d => d.Facturasventum)
                    .WithMany(p => p.Facturasventatots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("FACTURASVENTATOT_FK");
            });

            modelBuilder.Entity<Facturasventum>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACTURASVENTA_PK");

                entity.ToTable("FACTURASVENTA");

                entity.HasIndex(e => e.Codcliente)
                    .HasName("FACTURASVENTA_CODCLIENTE");

                entity.HasIndex(e => e.Fecha)
                    .HasName("FACTURASVENTA_FECHA");

                entity.HasIndex(e => new { e.Z, e.Caja })
                    .HasName("FACTURASVENTA_PORZCAJA");

                entity.HasIndex(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FACVENTA_DESC");

                entity.HasIndex(e => new { e.Tipodoc, e.Fecha, e.Numserie })
                    .HasName("FACTURASVENTA_FECHA_TIPODOC");

                entity.HasIndex(e => new { e.Traspasada, e.EnlaceEjercicio, e.EnlaceEmpresa, e.EnlaceUsuario, e.EnlaceAsiento })
                    .HasName("FACTURASVENTA_ENLACECONTABLE");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Agrupacion).HasColumnName("AGRUPACION");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cambio).HasColumnName("CAMBIO");

                entity.Property(e => e.Cleancashcontrolcode1)
                    .HasColumnName("CLEANCASHCONTROLCODE1")
                    .HasMaxLength(100);

                entity.Property(e => e.Cleancashcontrolcode2)
                    .HasColumnName("CLEANCASHCONTROLCODE2")
                    .HasMaxLength(100);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esentregaacuenta)
                    .HasColumnName("ESENTREGAACUENTA")
                    .HasMaxLength(1);

                entity.Property(e => e.Esinversion)
                    .HasColumnName("ESINVERSION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Propina).HasColumnName("PROPINA");

                entity.Property(e => e.Regimfact)
                    .HasColumnName("REGIMFACT")
                    .HasMaxLength(1);

                entity.Property(e => e.Sufactura)
                    .HasColumnName("SUFACTURA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcosteiva)
                    .HasColumnName("TOTALCOSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalimpuestos).HasColumnName("TOTALIMPUESTOS");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");

                entity.Property(e => e.Totalretencion).HasColumnName("TOTALRETENCION");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Traspasada)
                    .HasColumnName("TRASPASADA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Vendedormodificado).HasColumnName("VENDEDORMODIFICADO");

                entity.Property(e => e.Vienedefo)
                    .HasColumnName("VIENEDEFO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Falta>(entity =>
            {
                entity.HasKey(e => new { e.Digitocontrol, e.Tipo, e.Numero })
                    .HasName("FALTAS_PK");

                entity.ToTable("FALTAS");

                entity.Property(e => e.Digitocontrol)
                    .HasColumnName("DIGITOCONTROL")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Numero)
                    .HasColumnName("NUMERO")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Familia>(entity =>
            {
                entity.HasKey(e => new { e.Numdpto, e.Numseccion, e.Numfamilia })
                    .HasName("FAMILIAS_PK");

                entity.ToTable("FAMILIAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_FAMILIASVERSION");

                entity.Property(e => e.Numdpto).HasColumnName("NUMDPTO");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.Property(e => e.Numfamilia).HasColumnName("NUMFAMILIA");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Num)
                    .WithMany(p => p.Familia)
                    .HasForeignKey(d => new { d.Numdpto, d.Numseccion })
                    .HasConstraintName("FAMILIAS_FK");
            });

            modelBuilder.Entity<Favoritoscab>(entity =>
            {
                entity.HasKey(e => e.Codfavorito)
                    .HasName("FAVORITOSCAB_PK");

                entity.ToTable("FAVORITOSCAB");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_FAVORITOSCABVERSION");

                entity.Property(e => e.Codfavorito)
                    .HasColumnName("CODFAVORITO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Centro)
                    .HasColumnName("CENTRO")
                    .HasMaxLength(100);

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visibleweb)
                    .HasColumnName("VISIBLEWEB")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Favoritosidioma>(entity =>
            {
                entity.HasKey(e => new { e.Codfavorito, e.Codidioma });

                entity.ToTable("FAVORITOSIDIOMAS");

                entity.Property(e => e.Codfavorito).HasColumnName("CODFAVORITO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Desclarga)
                    .HasColumnName("DESCLARGA")
                    .HasMaxLength(500);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodfavoritoNavigation)
                    .WithMany(p => p.Favoritosidiomas)
                    .HasForeignKey(d => d.Codfavorito)
                    .HasConstraintName("FK_FAVORITOSIDIOMAS_FAVORITOSCAB");

                entity.HasOne(d => d.CodidiomaNavigation)
                    .WithMany(p => p.Favoritosidiomas)
                    .HasForeignKey(d => d.Codidioma)
                    .HasConstraintName("FK_FAVORITOSIDIOMAS_IDIOMAS");
            });

            modelBuilder.Entity<Favoritoslin>(entity =>
            {
                entity.HasKey(e => new { e.Codfavorito, e.Posicion })
                    .HasName("FAVORITOSLIN_PK");

                entity.ToTable("FAVORITOSLIN");

                entity.Property(e => e.Codfavorito).HasColumnName("CODFAVORITO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.HasOne(d => d.CodfavoritoNavigation)
                    .WithMany(p => p.Favoritoslins)
                    .HasForeignKey(d => d.Codfavorito)
                    .HasConstraintName("FAVORITOSLIN_FAVORITOSCAB");
            });

            modelBuilder.Entity<Favoritostiposterminal>(entity =>
            {
                entity.HasKey(e => new { e.Idtipoterminal, e.Posicion })
                    .HasName("FAVORITOSTIPOSTERMINAL_PK");

                entity.ToTable("FAVORITOSTIPOSTERMINAL");

                entity.Property(e => e.Idtipoterminal).HasColumnName("IDTIPOTERMINAL");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codfavorito).HasColumnName("CODFAVORITO");

                entity.HasOne(d => d.IdtipoterminalNavigation)
                    .WithMany(p => p.Favoritostiposterminals)
                    .HasForeignKey(d => d.Idtipoterminal)
                    .HasConstraintName("FT_TIPOSTERMINAL_FK");
            });

            modelBuilder.Entity<Favoritosturno>(entity =>
            {
                entity.HasKey(e => new { e.Codturno, e.Posicion })
                    .HasName("FAVORITOSTURNO_PK");

                entity.ToTable("FAVORITOSTURNO");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codfavorito).HasColumnName("CODFAVORITO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodturnoNavigation)
                    .WithMany(p => p.Favoritosturnos)
                    .HasForeignKey(d => d.Codturno)
                    .HasConstraintName("FAVORITOSTURNO_TURNOS");
            });

            modelBuilder.Entity<Festivoshotel>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Year })
                    .HasName("FESTIVOSHOTEL_PK");

                entity.ToTable("FESTIVOSHOTEL");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Year).HasColumnName("YEAR");

                entity.Property(e => e.Color1).HasColumnName("COLOR1");

                entity.Property(e => e.Color2).HasColumnName("COLOR2");

                entity.Property(e => e.Festivos)
                    .HasColumnName("FESTIVOS")
                    .HasMaxLength(1400);

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Festivoshotels)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("FESTIVOSHOTEL_FK");
            });

            modelBuilder.Entity<Fianza>(entity =>
            {
                entity.HasKey(e => e.Idfianza);

                entity.ToTable("FIANZAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_FIANZASVERSION");

                entity.Property(e => e.Idfianza)
                    .HasColumnName("IDFIANZA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cuentagasto)
                    .HasColumnName("CUENTAGASTO")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaingreso)
                    .HasColumnName("CUENTAINGRESO")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Importedef).HasColumnName("IMPORTEDEF");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Fondocaja>(entity =>
            {
                entity.HasKey(e => new { e.Caja, e.Numero });

                entity.ToTable("FONDOCAJA");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Automatico).HasColumnName("AUTOMATICO");

                entity.Property(e => e.Cajadeclarado)
                    .HasColumnName("CAJADECLARADO")
                    .HasMaxLength(3);

                entity.Property(e => e.Cajafuerte)
                    .HasColumnName("CAJAFUERTE")
                    .HasMaxLength(3);

                entity.Property(e => e.Codconceptopago).HasColumnName("CODCONCEPTOPAGO");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Numerodeclarado).HasColumnName("NUMERODECLARADO");

                entity.Property(e => e.Tipomov).HasColumnName("TIPOMOV");

                entity.Property(e => e.Zdeclarado).HasColumnName("ZDECLARADO");
            });

            modelBuilder.Entity<Formaspago>(entity =>
            {
                entity.HasKey(e => e.Codformapago)
                    .HasName("FORMASPAGO_PK");

                entity.ToTable("FORMASPAGO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_FORMASPAGOVERSION");

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Abrircajon).HasColumnName("ABRIRCAJON");

                entity.Property(e => e.Aplicableconotras)
                    .HasColumnName("APLICABLECONOTRAS")
                    .HasMaxLength(1);

                entity.Property(e => e.Aproximacionredondeo).HasColumnName("APROXIMACIONREDONDEO");

                entity.Property(e => e.Cantotalizar)
                    .HasColumnName("CANTOTALIZAR")
                    .HasMaxLength(1);

                entity.Property(e => e.Clienteoblig)
                    .HasColumnName("CLIENTEOBLIG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codformapagosobrepago)
                    .HasColumnName("CODFORMAPAGOSOBREPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Descidcobro)
                    .HasColumnName("DESCIDCOBRO")
                    .HasMaxLength(255);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Dllasoc)
                    .HasColumnName("DLLASOC")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Idpasarela).HasColumnName("IDPASARELA");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Imprimiragrup)
                    .HasColumnName("IMPRIMIRAGRUP")
                    .HasMaxLength(1);

                entity.Property(e => e.Marcastarjeta)
                    .HasColumnName("MARCASTARJETA")
                    .HasMaxLength(30);

                entity.Property(e => e.Numvencimientos).HasColumnName("NUMVENCIMIENTOS");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Pediridcobro)
                    .HasColumnName("PEDIRIDCOBRO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Sinsobrepago)
                    .HasColumnName("SINSOBREPAGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Textoimp)
                    .HasColumnName("TEXTOIMP")
                    .HasMaxLength(45);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tiporedondeo).HasColumnName("TIPOREDONDEO");

                entity.Property(e => e.Tiposobrepago).HasColumnName("TIPOSOBREPAGO");

                entity.Property(e => e.Usarlawround)
                    .HasColumnName("USARLAWROUND")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visiblefront)
                    .HasColumnName("VISIBLEFRONT")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Formaspagocajaraiz>(entity =>
            {
                entity.HasKey(e => new { e.Codformapago, e.Caja })
                    .HasName("FORMASPAGOCAJARAIZ_PK");

                entity.ToTable("FORMASPAGOCAJARAIZ");

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Raizcobro)
                    .HasColumnName("RAIZCOBRO")
                    .HasMaxLength(12);
            });

            modelBuilder.Entity<Formato>(entity =>
            {
                entity.HasKey(e => e.Codformato)
                    .HasName("FORMATOS_PK");

                entity.ToTable("FORMATOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_FORMATOSVERSION");

                entity.Property(e => e.Codformato)
                    .HasColumnName("CODFORMATO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codfavorito).HasColumnName("CODFAVORITO");

                entity.Property(e => e.Combinado)
                    .HasColumnName("COMBINADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Coste2aprox).HasColumnName("COSTE2APROX");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Dosis1).HasColumnName("DOSIS1");

                entity.Property(e => e.Dosis2).HasColumnName("DOSIS2");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Formatosarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codformato })
                    .HasName("FORMATOSARTICULOS_PK");

                entity.ToTable("FORMATOSARTICULOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Compra)
                    .HasColumnName("COMPRA")
                    .HasMaxLength(1);

                entity.Property(e => e.Venta)
                    .HasColumnName("VENTA")
                    .HasMaxLength(1);

                entity.Property(e => e.Visibleencompra)
                    .HasColumnName("VISIBLEENCOMPRA")
                    .HasMaxLength(1);

                entity.Property(e => e.Visibleenventa)
                    .HasColumnName("VISIBLEENVENTA")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<Formatosidioma>(entity =>
            {
                entity.HasKey(e => new { e.Codformato, e.Codidioma });

                entity.ToTable("FORMATOSIDIOMAS");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.HasOne(d => d.CodformatoNavigation)
                    .WithMany(p => p.Formatosidiomas)
                    .HasForeignKey(d => d.Codformato)
                    .HasConstraintName("FK_FORMATOSIDIOMAS_FORMATOS");

                entity.HasOne(d => d.CodidiomaNavigation)
                    .WithMany(p => p.Formatosidiomas)
                    .HasForeignKey(d => d.Codidioma)
                    .HasConstraintName("FK_FORMATOSIDIOMAS_IDIOMAS");
            });

            modelBuilder.Entity<Foto>(entity =>
            {
                entity.HasKey(e => e.Idfoto)
                    .HasName("FOTOS_PK");

                entity.ToTable("FOTOS");

                entity.Property(e => e.Idfoto)
                    .HasColumnName("IDFOTO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Foto1)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<Fotoshotel>(entity =>
            {
                entity.HasKey(e => e.Idhotel)
                    .HasName("FOTOSHOTEL_PK");

                entity.ToTable("FOTOSHOTEL");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_FOTOSHOTELVERSION");

                entity.Property(e => e.Idhotel)
                    .HasColumnName("IDHOTEL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idfoto).HasColumnName("IDFOTO");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Fpagocliente>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Tipo, e.Codformapago, e.Coddtopp })
                    .HasName("FPAGOCLIENTE_PK");

                entity.ToTable("FPAGOCLIENTE");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(15);

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Coddtopp)
                    .HasColumnName("CODDTOPP")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Fpagoclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("FPAGOCLIENTE_FK1");

                entity.HasOne(d => d.CodformapagoNavigation)
                    .WithMany(p => p.Fpagoclientes)
                    .HasForeignKey(d => d.Codformapago)
                    .HasConstraintName("FPAGOCLIENTE_FK2");
            });

            modelBuilder.Entity<Fpagoproveedor>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Tipo, e.Codformapago, e.Coddtopp })
                    .HasName("FPAGOPROVEEDOR_PK");

                entity.ToTable("FPAGOPROVEEDOR");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(15);

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Coddtopp)
                    .HasColumnName("CODDTOPP")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CodformapagoNavigation)
                    .WithMany(p => p.Fpagoproveedors)
                    .HasForeignKey(d => d.Codformapago)
                    .HasConstraintName("FPAGOPROVEEDOR_FK2");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Fpagoproveedors)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("FPAGOPROVEEDOR_FK1");
            });

            modelBuilder.Entity<Frontsusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Id })
                    .HasName("FRONTSUSUARIO_PK");

                entity.ToTable("FRONTSUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Ftp>(entity =>
            {
                entity.HasKey(e => e.Idftp)
                    .HasName("FTPS_PK");

                entity.ToTable("FTPS");

                entity.Property(e => e.Idftp)
                    .HasColumnName("IDFTP")
                    .ValueGeneratedNever();

                entity.Property(e => e.Carpetaexport)
                    .HasColumnName("CARPETAEXPORT")
                    .HasMaxLength(600);

                entity.Property(e => e.Carpetaimport)
                    .HasColumnName("CARPETAIMPORT")
                    .HasMaxLength(600);

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(100);

                entity.Property(e => e.Puerto).HasColumnName("PUERTO");

                entity.Property(e => e.Servidor)
                    .HasColumnName("SERVIDOR")
                    .HasMaxLength(100);

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Galeriaarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Idgaleria, e.Codarticulo })
                    .HasName("GALERIAARTICULOS_PK");

                entity.ToTable("GALERIAARTICULOS");

                entity.Property(e => e.Idgaleria).HasColumnName("IDGALERIA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Numdpto).HasColumnName("NUMDPTO");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.HasOne(d => d.Galeriaseccione)
                    .WithMany(p => p.Galeriaarticulos)
                    .HasForeignKey(d => new { d.Idgaleria, d.Numseccion })
                    .HasConstraintName("GALERIAARTICULOS_FK");
            });

            modelBuilder.Entity<Galeriaarticulosidioma>(entity =>
            {
                entity.HasKey(e => new { e.Idgaleria, e.Codarticulo, e.Codidioma })
                    .HasName("GALERIAARTICULOSIDIOMAS_PK");

                entity.ToTable("GALERIAARTICULOSIDIOMAS");

                entity.Property(e => e.Idgaleria).HasColumnName("IDGALERIA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codidioma)
                    .HasColumnName("CODIDIOMA")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.HasOne(d => d.Galeriaarticulo)
                    .WithMany(p => p.Galeriaarticulosidiomas)
                    .HasForeignKey(d => new { d.Idgaleria, d.Codarticulo })
                    .HasConstraintName("GALERIAARTICULOSIDIOMAS_FK");
            });

            modelBuilder.Entity<Galeriaidioma>(entity =>
            {
                entity.HasKey(e => e.Idgaleria)
                    .HasName("GALERIAIDIOMAS_PK");

                entity.ToTable("GALERIAIDIOMAS");

                entity.Property(e => e.Idgaleria)
                    .HasColumnName("IDGALERIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Ididioma)
                    .IsRequired()
                    .HasColumnName("IDIDIOMA")
                    .HasMaxLength(3);

                entity.HasOne(d => d.IdgaleriaNavigation)
                    .WithOne(p => p.Galeriaidioma)
                    .HasForeignKey<Galeriaidioma>(d => d.Idgaleria)
                    .HasConstraintName("GALERIAIDIOMAS_FK");
            });

            modelBuilder.Entity<Galeriaseccione>(entity =>
            {
                entity.HasKey(e => new { e.Idgaleria, e.Numseccion })
                    .HasName("GALERIASECCIONES_PK");

                entity.ToTable("GALERIASECCIONES");

                entity.Property(e => e.Idgaleria).HasColumnName("IDGALERIA");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");

                entity.HasOne(d => d.IdgaleriaNavigation)
                    .WithMany(p => p.Galeriasecciones)
                    .HasForeignKey(d => d.Idgaleria)
                    .HasConstraintName("GALERIASECCIONES_FK");
            });

            modelBuilder.Entity<Galeriaseccionesidioma>(entity =>
            {
                entity.HasKey(e => new { e.Idgaleria, e.Numseccion, e.Codidioma })
                    .HasName("GALERIASECCIONESIDIOMAS_PK");

                entity.ToTable("GALERIASECCIONESIDIOMAS");

                entity.Property(e => e.Idgaleria).HasColumnName("IDGALERIA");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.Property(e => e.Codidioma)
                    .HasColumnName("CODIDIOMA")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.HasOne(d => d.Galeriaseccione)
                    .WithMany(p => p.Galeriaseccionesidiomas)
                    .HasForeignKey(d => new { d.Idgaleria, d.Numseccion })
                    .HasConstraintName("GALERIASECCIONESIDIOMAS_FK");
            });

            modelBuilder.Entity<Galerium>(entity =>
            {
                entity.HasKey(e => e.Idgaleria)
                    .HasName("GALERIA_PK");

                entity.ToTable("GALERIA");

                entity.Property(e => e.Idgaleria)
                    .HasColumnName("IDGALERIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<Garantia>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("GARANTIAS_PK");

                entity.ToTable("GARANTIAS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Gasto>(entity =>
            {
                entity.HasKey(e => e.Idgasto)
                    .HasName("GASTOS_PK");

                entity.ToTable("GASTOS");

                entity.Property(e => e.Idgasto)
                    .HasColumnName("IDGASTO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Gastosenvio>(entity =>
            {
                entity.HasKey(e => e.Idgastoenvio)
                    .HasName("PK_CODPOSTAL");

                entity.ToTable("GASTOSENVIO");

                entity.Property(e => e.Idgastoenvio)
                    .HasColumnName("IDGASTOENVIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codtransporte).HasColumnName("CODTRANSPORTE");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Zona)
                    .HasColumnName("ZONA")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Gradosintere>(entity =>
            {
                entity.HasKey(e => e.Codgrado)
                    .HasName("GRADOSINTERES_PK");

                entity.ToTable("GRADOSINTERES");

                entity.Property(e => e.Codgrado)
                    .HasColumnName("CODGRADO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Grupoarticulo>(entity =>
            {
                entity.HasKey(e => e.Codgrupo)
                    .HasName("GRUPOARTICULO_PK");

                entity.ToTable("GRUPOARTICULO");

                entity.Property(e => e.Codgrupo)
                    .HasColumnName("CODGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Coddpto)
                    .HasColumnName("CODDPTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codfamilia)
                    .HasColumnName("CODFAMILIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codlinea)
                    .HasColumnName("CODLINEA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmarca)
                    .HasColumnName("CODMARCA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codseccion)
                    .HasColumnName("CODSECCION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codsubfamilia)
                    .HasColumnName("CODSUBFAMILIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codtipo).HasColumnName("CODTIPO");

                entity.Property(e => e.Nombregrupo)
                    .HasColumnName("NOMBREGRUPO")
                    .HasMaxLength(50);

                entity.Property(e => e.Operador).HasColumnName("OPERADOR");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(25);

                entity.Property(e => e.Temporada)
                    .HasColumnName("TEMPORADA")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Grupoarticulo1>(entity =>
            {
                entity.HasKey(e => e.Idgrupo)
                    .HasName("GRUPOARTICULOS_PK");

                entity.ToTable("GRUPOARTICULOS");

                entity.Property(e => e.Idgrupo)
                    .HasColumnName("IDGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Gruporecurso>(entity =>
            {
                entity.HasKey(e => e.Codgrupo)
                    .HasName("GRUPORECURSOS_PK");

                entity.ToTable("GRUPORECURSOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_GRUPORECURSOSVERSION");

                entity.Property(e => e.Codgrupo)
                    .HasColumnName("CODGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Altura).HasColumnName("ALTURA");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Dias).HasColumnName("DIAS");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtipoasunto)
                    .HasColumnName("IDTIPOASUNTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Intervalo).HasColumnName("INTERVALO");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Gruposalmacencab>(entity =>
            {
                entity.HasKey(e => e.Idgrupo);

                entity.ToTable("GRUPOSALMACENCAB");

                entity.Property(e => e.Idgrupo)
                    .HasColumnName("IDGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codvisible).HasColumnName("CODVISIBLE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Gruposalmacencriterio>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Idcriterio })
                    .HasName("GRUPOSALMACENCRITERIOS_PK");

                entity.ToTable("GRUPOSALMACENCRITERIOS");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Idcriterio).HasColumnName("IDCRITERIO");

                entity.Property(e => e.Titulocolumna)
                    .HasColumnName("TITULOCOLUMNA")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Gruposalmacenlin>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Codalmacen });

                entity.ToTable("GRUPOSALMACENLIN");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.CodalmacenNavigation)
                    .WithMany(p => p.Gruposalmacenlins)
                    .HasForeignKey(d => d.Codalmacen)
                    .HasConstraintName("FK_GRUPOSALMACENLIN_ALMACEN");

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.Gruposalmacenlins)
                    .HasForeignKey(d => d.Idgrupo)
                    .HasConstraintName("FK_GRUPOSALMACENLIN_GRUPOSALMACENCAB");
            });

            modelBuilder.Entity<Gruposalmacenlincriterio>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Idcriterio, e.Codalmacen })
                    .HasName("GRUPOSALMACENLINCRITERIOS_PK");

                entity.ToTable("GRUPOSALMACENLINCRITERIOS");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Idcriterio).HasColumnName("IDCRITERIO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.HasOne(d => d.Gruposalmacenlin)
                    .WithMany(p => p.Gruposalmacenlincriterios)
                    .HasForeignKey(d => new { d.Idgrupo, d.Codalmacen })
                    .HasConstraintName("GRUPOSALMACENLINCRITERIOS_FK_GRUPOSALMACENLIN");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Gruposalmacenlincriterios)
                    .HasForeignKey(d => new { d.Idgrupo, d.Idcriterio })
                    .HasConstraintName("GRUPOSALMACENLINCRITERIOS_FK_GRUPOSALMACENCRITERIOS");
            });

            modelBuilder.Entity<Gruposalmacenusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Id })
                    .HasName("GRUPOSALMACENUSUARIO_PK");

                entity.ToTable("GRUPOSALMACENUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Gruposarticulo>(entity =>
            {
                entity.HasKey(e => e.Idgrupo)
                    .HasName("GRUPOSARTICULOS_PK");

                entity.ToTable("GRUPOSARTICULOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_GRUPOSARTICULOSVERSION");

                entity.Property(e => e.Idgrupo)
                    .HasColumnName("IDGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codvisible).HasColumnName("CODVISIBLE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Gruposarticulosusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Id })
                    .HasName("GRUPOSARTICULOSUSUARIO_PK");

                entity.ToTable("GRUPOSARTICULOSUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Gruposcliente>(entity =>
            {
                entity.HasKey(e => e.Idgrupo)
                    .HasName("GRUPOSCLIENTES_PK");

                entity.ToTable("GRUPOSCLIENTES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_GRUPOSCLIENTESVERSION");

                entity.Property(e => e.Idgrupo)
                    .HasColumnName("IDGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Gruposmappingscab>(entity =>
            {
                entity.HasKey(e => e.Idgrupo)
                    .HasName("GRUPOSMAPPINGSCAB_PK");

                entity.ToTable("GRUPOSMAPPINGSCAB");

                entity.Property(e => e.Idgrupo)
                    .HasColumnName("IDGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Gruposmappingslin>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Numlin })
                    .HasName("GRUPOSMAPPINGSLIN_PK");

                entity.ToTable("GRUPOSMAPPINGSLIN");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Empresacontab)
                    .HasColumnName("EMPRESACONTAB")
                    .HasMaxLength(20);

                entity.Property(e => e.Fichero)
                    .HasColumnName("FICHERO")
                    .HasMaxLength(4000);

                entity.Property(e => e.Idbd).HasColumnName("IDBD");

                entity.Property(e => e.Idbuzon).HasColumnName("IDBUZON");

                entity.Property(e => e.Idftp).HasColumnName("IDFTP");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Prioridad).HasColumnName("PRIORIDAD");

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.Gruposmappingslins)
                    .HasForeignKey(d => d.Idgrupo)
                    .HasConstraintName("GRUPOSMAPPINGSLIN_FK");
            });

            modelBuilder.Entity<Gruposocupante>(entity =>
            {
                entity.HasKey(e => e.Idgrupo)
                    .HasName("GRUPOSOCUPANTES_PK");

                entity.ToTable("GRUPOSOCUPANTES");

                entity.Property(e => e.Idgrupo)
                    .HasColumnName("IDGRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Habitacione>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Tipohabitacion })
                    .HasName("HABITACIONES_PK");

                entity.ToTable("HABITACIONES");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipohabitacion).HasColumnName("TIPOHABITACION");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.HasOne(d => d.SerieNavigation)
                    .WithMany(p => p.Habitaciones)
                    .HasForeignKey(d => d.Serie)
                    .HasConstraintName("SERIES_HABITACIONES");

                entity.HasOne(d => d.TipohabitacionNavigation)
                    .WithMany(p => p.Habitaciones)
                    .HasForeignKey(d => d.Tipohabitacion)
                    .HasConstraintName("ARTICULOS_HABITACIONES");
            });

            modelBuilder.Entity<Habitacionescamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Planta, e.Nummesa });

                entity.ToTable("HABITACIONESCAMPOSLIBRES");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Planta).HasColumnName("PLANTA");

                entity.Property(e => e.Nummesa).HasColumnName("NUMMESA");
            });

            modelBuilder.Entity<Hcambiarestadohab>(entity =>
            {
                entity.HasKey(e => e.Idlog);

                entity.ToTable("HCAMBIARESTADOHAB");

                entity.Property(e => e.Idlog).HasColumnName("IDLOG");

                entity.Property(e => e.Descartada).HasColumnName("DESCARTADA");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasMaxLength(4);

                entity.Property(e => e.Exportada).HasColumnName("EXPORTADA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numhab)
                    .HasColumnName("NUMHAB")
                    .HasMaxLength(5);

                entity.Property(e => e.Usuariocentralita)
                    .HasColumnName("USUARIOCENTRALITA")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<Hcargoslibre>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Desde, e.Idlin })
                    .HasName("HCARGOSLIBRES_PK");

                entity.ToTable("HCARGOSLIBRES");

                entity.HasIndex(e => e.Desde)
                    .HasName("HCARGOSLIBRES_FECHA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HCARGOSLIBRESVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idlin).HasColumnName("IDLIN");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fechafac)
                    .HasColumnName("FECHAFAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numerofac).HasColumnName("NUMEROFAC");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Produccionexterna)
                    .HasColumnName("PRODUCCIONEXTERNA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Seriefac)
                    .HasColumnName("SERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoactividad).HasColumnName("TIPOACTIVIDAD");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Hcierrehabitacione>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Planta, e.Habitacion, e.Desde, e.Hasta })
                    .HasName("HCIERREHABITACIONES_PK");

                entity.ToTable("HCIERREHABITACIONES");

                entity.HasIndex(e => e.Desde)
                    .HasName("HCIERREHABITACIONES_DESDE");

                entity.HasIndex(e => e.Hasta)
                    .HasName("HCIERREHABITACIONES_HASTA");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Planta).HasColumnName("PLANTA");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idbloqueo).HasColumnName("IDBLOQUEO");

                entity.Property(e => e.Motivo)
                    .HasColumnName("MOTIVO")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<Hcierreproduccion>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Fecha });

                entity.ToTable("HCIERREPRODUCCION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Hcupo>(entity =>
            {
                entity.HasKey(e => e.Idcupo)
                    .HasName("HCUPOS_PK");

                entity.ToTable("HCUPOS");

                entity.Property(e => e.Idcupo)
                    .HasColumnName("IDCUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Afectabooking).HasColumnName("AFECTABOOKING");

                entity.Property(e => e.Codigopromocional)
                    .HasColumnName("CODIGOPROMOCIONAL")
                    .HasMaxLength(50);

                entity.Property(e => e.Codintermediario).HasColumnName("CODINTERMEDIARIO");

                entity.Property(e => e.Contratado).HasColumnName("CONTRATADO");

                entity.Property(e => e.Cupositeminder)
                    .HasColumnName("CUPOSITEMINDER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Diascancelacion)
                    .HasColumnName("DIASCANCELACION")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Disponibilidadtiemporeal)
                    .HasColumnName("DISPONIBILIDADTIEMPOREAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Estanciamaxima)
                    .HasColumnName("ESTANCIAMAXIMA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Estanciaminima)
                    .HasColumnName("ESTANCIAMINIMA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Garantizado).HasColumnName("GARANTIZADO");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idtarifa).HasColumnName("IDTARIFA");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Pendientedescarga).HasColumnName("PENDIENTEDESCARGA");

                entity.Property(e => e.Porcacta).HasColumnName("PORCACTA");

                entity.Property(e => e.Posicionweb).HasColumnName("POSICIONWEB");

                entity.Property(e => e.Release)
                    .HasColumnName("RELEASE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipocupo).HasColumnName("TIPOCUPO");

                entity.Property(e => e.Tipohabitacion).HasColumnName("TIPOHABITACION");

                entity.Property(e => e.Tipopagocta).HasColumnName("TIPOPAGOCTA");

                entity.Property(e => e.Tiporelease).HasColumnName("TIPORELEASE");

                entity.Property(e => e.Visibleweb).HasColumnName("VISIBLEWEB");
            });

            modelBuilder.Entity<Hcuposcliente>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idcupo, e.Codcliente })
                    .HasName("HCUPOSCLIENTE_PK");

                entity.ToTable("HCUPOSCLIENTE");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Hcuposclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HCUPOSCLIENTE_CLIENTES");

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcuposclientes)
                    .HasForeignKey(d => d.Idcupo)
                    .HasConstraintName("FK_HCUPOSCLIENTE_HCUPOS");

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hcuposclientes)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("FK_HCUPOSCLIENTE_HOTELES");
            });

            modelBuilder.Entity<Hcuposcomentario>(entity =>
            {
                entity.HasKey(e => new { e.Idcupo, e.Numcomentario })
                    .HasName("PK_HCUPOSCOMENTARIO");

                entity.ToTable("HCUPOSCOMENTARIOS");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Numcomentario).HasColumnName("NUMCOMENTARIO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(40);

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcuposcomentarios)
                    .HasForeignKey(d => d.Idcupo)
                    .HasConstraintName("FK_HCUPOSCOMENTARIO_HCUPOS");
            });

            modelBuilder.Entity<Hcuposdium>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Codintermediario, e.Fecha })
                    .HasName("HCUPOSDIA_PK");

                entity.ToTable("HCUPOSDIA");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Codintermediario).HasColumnName("CODINTERMEDIARIO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cancelado).HasColumnName("CANCELADO");

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Contratado).HasColumnName("CONTRATADO");

                entity.Property(e => e.Diferenciacontratado).HasColumnName("DIFERENCIACONTRATADO");

                entity.Property(e => e.Estanciaminima).HasColumnName("ESTANCIAMINIMA");

                entity.Property(e => e.Pendientedescarga).HasColumnName("PENDIENTEDESCARGA");

                entity.Property(e => e.Release).HasColumnName("RELEASE");

                entity.Property(e => e.Reservado).HasColumnName("RESERVADO");

                entity.Property(e => e.Tipocupo).HasColumnName("TIPOCUPO");

                entity.Property(e => e.Tiporelease).HasColumnName("TIPORELEASE");

                entity.HasOne(d => d.CodintermediarioNavigation)
                    .WithMany(p => p.Hcuposdia)
                    .HasForeignKey(d => d.Codintermediario)
                    .HasConstraintName("HCUPOSDIA_FK");
            });

            modelBuilder.Entity<Hcuposestadosdefecto>(entity =>
            {
                entity.HasKey(e => new { e.Idcupo, e.Codigo, e.Idestado })
                    .HasName("HCUPOSESTADOSDEFECTO_PK");

                entity.ToTable("HCUPOSESTADOSDEFECTO");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Idestado)
                    .HasColumnName("IDESTADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Poner).HasColumnName("PONER");

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcuposestadosdefectos)
                    .HasForeignKey(d => d.Idcupo)
                    .HasConstraintName("HCUPOSESTADOSDEFECTO_FKCUPOS");

                entity.HasOne(d => d.IdestadoNavigation)
                    .WithMany(p => p.Hcuposestadosdefectos)
                    .HasForeignKey(d => d.Idestado)
                    .HasConstraintName("HCUPOSESTADOSDEFECTO_FKESTADOS");
            });

            modelBuilder.Entity<Hcuposextra>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idcupo, e.Codarticulo })
                    .HasName("HCUPOSEXTRAS_PK");

                entity.ToTable("HCUPOSEXTRAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HCUPOSEXTRASVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Hcuposextras)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("HCUPOSEXTRAS_ARTICULOS_FK");

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcuposextras)
                    .HasForeignKey(d => d.Idcupo)
                    .HasConstraintName("HCUPOSEXTRAS_HCUPOS_FK");

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hcuposextras)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("HCUPOSEXTRAS_HOTELES_FK");
            });

            modelBuilder.Entity<Hcuposfecha>(entity =>
            {
                entity.HasKey(e => new { e.Idcupo, e.Fecha })
                    .HasName("HCUPOSFECHA_PK");

                entity.ToTable("HCUPOSFECHA");

                entity.HasIndex(e => e.Fecha)
                    .HasName("HCUPOSFECHA_FECHA");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cancelado).HasColumnName("CANCELADO");

                entity.Property(e => e.Contratado).HasColumnName("CONTRATADO");

                entity.Property(e => e.Contratadoinicial).HasColumnName("CONTRATADOINICIAL");

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Diferenciacontratado).HasColumnName("DIFERENCIACONTRATADO");

                entity.Property(e => e.Estanciamaxima)
                    .HasColumnName("ESTANCIAMAXIMA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Estanciaminima).HasColumnName("ESTANCIAMINIMA");

                entity.Property(e => e.Pendientedescarga).HasColumnName("PENDIENTEDESCARGA");

                entity.Property(e => e.Release).HasColumnName("RELEASE");

                entity.Property(e => e.Reservado).HasColumnName("RESERVADO");

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcuposfechas)
                    .HasForeignKey(d => d.Idcupo)
                    .HasConstraintName("HCUPOSFECHA_FK");
            });

            modelBuilder.Entity<Hcuposrestriccione>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idcupo, e.Fechainicio, e.Fechafin, e.Tiporestriccion, e.Estado })
                    .HasName("HCUPOSRESTRICCIONES_PK");

                entity.ToTable("HCUPOSRESTRICCIONES");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Fechainicio)
                    .HasColumnName("FECHAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tiporestriccion).HasColumnName("TIPORESTRICCION");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Diasestancia).HasColumnName("DIASESTANCIA");

                entity.Property(e => e.Pendientesubida).HasColumnName("PENDIENTESUBIDA");

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcuposrestricciones)
                    .HasForeignKey(d => d.Idcupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HCUPOSRESTRICCIONES_HCUPOS");

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hcuposrestricciones)
                    .HasForeignKey(d => d.Idhotel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HCUPOSRESTRICCIONES_HOTELES");
            });

            modelBuilder.Entity<Hcuposservicio>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idcupo, e.Codactividad, e.Codservicio });

                entity.ToTable("HCUPOSSERVICIOS");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Codactividad).HasColumnName("CODACTIVIDAD");

                entity.Property(e => e.Codservicio).HasColumnName("CODSERVICIO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.CodactividadNavigation)
                    .WithMany(p => p.Hcuposservicios)
                    .HasForeignKey(d => d.Codactividad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HCUPOSSERVICIOS_TIPOASUNTO");

                entity.HasOne(d => d.CodservicioNavigation)
                    .WithMany(p => p.Hcuposservicios)
                    .HasForeignKey(d => d.Codservicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HCUPOSSERVICIOS_SERVICIOSGLOBALES");

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcuposservicios)
                    .HasForeignKey(d => d.Idcupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HCUPOSSERVICIOS_HCUPOS");

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hcuposservicios)
                    .HasForeignKey(d => d.Idhotel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HCUPOSSERVICIOS_HOTELES");
            });

            modelBuilder.Entity<Hcupostipohabitacion>(entity =>
            {
                entity.HasKey(e => new { e.Idcupo, e.Tipohabitacion })
                    .HasName("HCUPOSTIPOHABITACION_PK");

                entity.ToTable("HCUPOSTIPOHABITACION");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Tipohabitacion).HasColumnName("TIPOHABITACION");

                entity.HasOne(d => d.IdcupoNavigation)
                    .WithMany(p => p.Hcupostipohabitacions)
                    .HasForeignKey(d => d.Idcupo)
                    .HasConstraintName("FK_HCUPOSTIPOHABITACION_HCUPOS");
            });

            modelBuilder.Entity<Hestadosdefecto>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Idestado, e.Idhotel })
                    .HasName("HESTADOSDEFECTO_PK");

                entity.ToTable("HESTADOSDEFECTO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Idestado)
                    .HasColumnName("IDESTADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Poner).HasColumnName("PONER");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdestadoNavigation)
                    .WithMany(p => p.Hestadosdefectos)
                    .HasForeignKey(d => d.Idestado)
                    .HasConstraintName("HESTADOSDEFECTO_FKESTADOS");
            });

            modelBuilder.Entity<Hestadoshabcentralitum>(entity =>
            {
                entity.HasKey(e => e.Estado);

                entity.ToTable("HESTADOSHABCENTRALITA");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasMaxLength(4);

                entity.Property(e => e.Estadosponer)
                    .HasColumnName("ESTADOSPONER")
                    .HasMaxLength(10);

                entity.Property(e => e.Estadosquitar)
                    .HasColumnName("ESTADOSQUITAR")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Hestadoshabitacione>(entity =>
            {
                entity.ToTable("HESTADOSHABITACIONES");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Checkin)
                    .IsRequired()
                    .HasColumnName("CHECKIN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Decamarera)
                    .IsRequired()
                    .HasColumnName("DECAMARERA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Hestadosreserva>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("HESTADOSRESERVA_PK");

                entity.ToTable("HESTADOSRESERVA");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Hestadosreservascab>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("HESTADOSRESERVASCAB_PK");

                entity.ToTable("HESTADOSRESERVASCAB");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HESTADOSRESERVASCABVERSION");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Afectacocina).HasColumnName("AFECTACOCINA");

                entity.Property(e => e.Afectacupo).HasColumnName("AFECTACUPO");

                entity.Property(e => e.Aplicarcargosdtos).HasColumnName("APLICARCARGOSDTOS");

                entity.Property(e => e.Bloquearrecalculo).HasColumnName("BLOQUEARRECALCULO");

                entity.Property(e => e.Booking).HasColumnName("BOOKING");

                entity.Property(e => e.Cambiohabocupada).HasColumnName("CAMBIOHABOCUPADA");

                entity.Property(e => e.Cambiohabpreasignada).HasColumnName("CAMBIOHABPREASIGNADA");

                entity.Property(e => e.Colorfondo)
                    .HasColumnName("COLORFONDO")
                    .HasDefaultValueSql("((-16777201))");

                entity.Property(e => e.Colortexto)
                    .HasColumnName("COLORTEXTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);

                entity.Property(e => e.Dias).HasColumnName("DIAS");

                entity.Property(e => e.Estadovto)
                    .HasColumnName("ESTADOVTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Fechavto)
                    .HasColumnName("FECHAVTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Hhabitacionesbloqueo>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Planta, e.Habitacion });

                entity.ToTable("HHABITACIONESBLOQUEOS");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Planta).HasColumnName("PLANTA");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Fechainibloqueo)
                    .HasColumnName("FECHAINIBLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainibloqueo)
                    .HasColumnName("HORAINIBLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<HioposEstad>(entity =>
            {
                entity.ToTable("HIOPOS_ESTAD");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Anguloetiquetas).HasColumnName("ANGULOETIQUETAS");

                entity.Property(e => e.Campoorden)
                    .HasColumnName("CAMPOORDEN")
                    .HasMaxLength(50);

                entity.Property(e => e.Iheight).HasColumnName("IHEIGHT");

                entity.Property(e => e.Ileft).HasColumnName("ILEFT");

                entity.Property(e => e.Itop).HasColumnName("ITOP");

                entity.Property(e => e.Iwidth).HasColumnName("IWIDTH");

                entity.Property(e => e.Rangovisualizacion).HasColumnName("RANGOVISUALIZACION");

                entity.Property(e => e.Subtipoestad).HasColumnName("SUBTIPOESTAD");

                entity.Property(e => e.Tipoestad).HasColumnName("TIPOESTAD");

                entity.Property(e => e.Tipografico).HasColumnName("TIPOGRAFICO");

                entity.Property(e => e.Tipoorden)
                    .HasColumnName("TIPOORDEN")
                    .HasMaxLength(6);

                entity.Property(e => e.Tipovisualizacion).HasColumnName("TIPOVISUALIZACION");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(100);

                entity.Property(e => e.Vervalores).HasColumnName("VERVALORES");
            });

            modelBuilder.Entity<HioposEstadDimensione>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Dimension });

                entity.ToTable("HIOPOS_ESTAD_DIMENSIONES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Dimension).HasColumnName("DIMENSION");

                entity.Property(e => e.Campolibre)
                    .HasColumnName("CAMPOLIBRE")
                    .HasMaxLength(20);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.HioposEstadDimensiones)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_HIOPOS_ESTAD_DIMENSIONES");
            });

            modelBuilder.Entity<HioposEstadFiltro>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Idfiltro });

                entity.ToTable("HIOPOS_ESTAD_FILTROS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idfiltro)
                    .HasColumnName("IDFILTRO")
                    .HasMaxLength(50);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasColumnName("VALOR")
                    .HasMaxLength(250);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.HioposEstadFiltros)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_HIOPOS_ESTAD_FILTROS");
            });

            modelBuilder.Entity<HioposEstadFiltrosLibre>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Posicion });

                entity.ToTable("HIOPOS_ESTAD_FILTROS_LIBRES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Captioncampo)
                    .HasColumnName("CAPTIONCAMPO")
                    .HasMaxLength(200);

                entity.Property(e => e.Iddimension).HasColumnName("IDDIMENSION");

                entity.Property(e => e.Nombrecampo)
                    .IsRequired()
                    .HasColumnName("NOMBRECAMPO")
                    .HasMaxLength(200);

                entity.Property(e => e.Operador).HasColumnName("OPERADOR");

                entity.Property(e => e.Tipocampo).HasColumnName("TIPOCAMPO");

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasColumnName("VALOR")
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.HioposEstadFiltrosLibres)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_HIOPOS_ESTAD_FILTROS_LIBRES");
            });

            modelBuilder.Entity<HioposEstadMetrica>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Metrica });

                entity.ToTable("HIOPOS_ESTAD_METRICAS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Metrica).HasColumnName("METRICA");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.HioposEstadMetricas)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_HIOPOS_ESTAD_METRICAS");
            });

            modelBuilder.Entity<HioposEstadSeries>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Serie });

                entity.ToTable("HIOPOS_ESTAD_SERIES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Serie).HasColumnName("SERIE");

                entity.Property(e => e.Campolibre)
                    .HasColumnName("CAMPOLIBRE")
                    .HasMaxLength(20);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.HioposEstadSeries)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_HIOPOS_ESTAD_SERIES");
            });

            modelBuilder.Entity<HioposScoreboard>(entity =>
            {
                entity.ToTable("HIOPOS_SCOREBOARD");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<HioposScoreboardInforme>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Idinforme, e.Posicion });

                entity.ToTable("HIOPOS_SCOREBOARD_INFORMES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.HioposScoreboardInformes)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_HIOPOS_SCOREBOARD_INFORMES");
            });

            modelBuilder.Entity<Histocomisione>(entity =>
            {
                entity.HasKey(e => new { e.Idcalculo, e.Codvendedor, e.Codlinea })
                    .HasName("HISTOCOMISIONES_PK");

                entity.ToTable("HISTOCOMISIONES");

                entity.Property(e => e.Idcalculo).HasColumnName("IDCALCULO");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codlinea).HasColumnName("CODLINEA");

                entity.Property(e => e.Areanegocio)
                    .HasColumnName("AREANEGOCIO")
                    .HasMaxLength(4);

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Comisionreal).HasColumnName("COMISIONREAL");

                entity.Property(e => e.Depto).HasColumnName("DEPTO");

                entity.Property(e => e.Descripcioncomision)
                    .HasColumnName("DESCRIPCIONCOMISION")
                    .HasMaxLength(75);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dtototal).HasColumnName("DTOTOTAL");

                entity.Property(e => e.Familia).HasColumnName("FAMILIA");

                entity.Property(e => e.Filtroventas).HasColumnName("FILTROVENTAS");

                entity.Property(e => e.Grupoarticulo).HasColumnName("GRUPOARTICULO");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idcomision).HasColumnName("IDCOMISION");

                entity.Property(e => e.Impuestos).HasColumnName("IMPUESTOS");

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Marca).HasColumnName("MARCA");

                entity.Property(e => e.Modo).HasColumnName("MODO");

                entity.Property(e => e.Modoaplicacion)
                    .HasColumnName("MODOAPLICACION")
                    .HasMaxLength(2);

                entity.Property(e => e.Modocalculo)
                    .HasColumnName("MODOCALCULO")
                    .HasMaxLength(1);

                entity.Property(e => e.Operacion).HasColumnName("OPERACION");

                entity.Property(e => e.Porcentajecelda).HasColumnName("PORCENTAJECELDA");

                entity.Property(e => e.Rangofin).HasColumnName("RANGOFIN");

                entity.Property(e => e.Rangoini).HasColumnName("RANGOINI");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Seccion).HasColumnName("SECCION");

                entity.Property(e => e.Subfamilia).HasColumnName("SUBFAMILIA");

                entity.Property(e => e.Temporada)
                    .HasColumnName("TEMPORADA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipocliente)
                    .HasColumnName("TIPOCLIENTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ventabrutas).HasColumnName("VENTABRUTAS");

                entity.Property(e => e.Ventasnetas).HasColumnName("VENTASNETAS");

                entity.HasOne(d => d.Histocomisionescab)
                    .WithMany(p => p.Histocomisiones)
                    .HasForeignKey(d => new { d.Idcalculo, d.Codvendedor })
                    .HasConstraintName("HISTOCOMISIONES_FK_IDC");
            });

            modelBuilder.Entity<Histocomisionescab>(entity =>
            {
                entity.HasKey(e => new { e.Idcalculo, e.Codvendedor })
                    .HasName("HISTOCOMISIONESCAB_PK");

                entity.ToTable("HISTOCOMISIONESCAB");

                entity.Property(e => e.Idcalculo).HasColumnName("IDCALCULO");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codnom)
                    .HasColumnName("CODNOM")
                    .HasMaxLength(30);

                entity.Property(e => e.Comisionplusfijo).HasColumnName("COMISIONPLUSFIJO");

                entity.Property(e => e.Comisionreal).HasColumnName("COMISIONREAL");

                entity.Property(e => e.ComisionrealN).HasColumnName("COMISIONREAL_N");

                entity.Property(e => e.Comtotal).HasColumnName("COMTOTAL");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fijo).HasColumnName("FIJO");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Impostperc).HasColumnName("IMPOSTPERC");

                entity.Property(e => e.Impostvalor).HasColumnName("IMPOSTVALOR");

                entity.Property(e => e.Modo)
                    .HasColumnName("MODO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Retencionperc).HasColumnName("RETENCIONPERC");

                entity.Property(e => e.Retencionvalor).HasColumnName("RETENCIONVALOR");
            });

            modelBuilder.Entity<Historicoasunto>(entity =>
            {
                entity.ToTable("HISTORICOASUNTOS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Empleado).HasColumnName("EMPLEADO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(1000);

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriereserva)
                    .HasColumnName("SERIERESERVA")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.HasOne(d => d.Asunto)
                    .WithMany(p => p.Historicoasuntos)
                    .HasForeignKey(d => new { d.Serie, d.Numero })
                    .HasConstraintName("HISTORICOASUNTOS_FK");
            });

            modelBuilder.Entity<Historicocomisione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HISTORICOCOMISIONES");

                entity.Property(e => e.Codaux).HasColumnName("CODAUX");

                entity.Property(e => e.Codcomision).HasColumnName("CODCOMISION");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Porcentaje).HasColumnName("PORCENTAJE");

                entity.Property(e => e.Tipoarticulo).HasColumnName("TIPOARTICULO");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<Historicocoste>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Codarticulo, e.Talla, e.Color, e.Codalmacen })
                    .HasName("HISTORICOCOSTES_PK");

                entity.ToTable("HISTORICOCOSTES");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color })
                    .HasName("HISTORICOCOSTES_CODARTICULOTALLACOLOR");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Compras).HasColumnName("COMPRAS");

                entity.Property(e => e.Comprasenstock).HasColumnName("COMPRASENSTOCK");

                entity.Property(e => e.Consumos).HasColumnName("CONSUMOS");

                entity.Property(e => e.Costemedio).HasColumnName("COSTEMEDIO");

                entity.Property(e => e.Costemediodmn).HasColumnName("COSTEMEDIODMN");

                entity.Property(e => e.Costemediodmnreg).HasColumnName("COSTEMEDIODMNREG");

                entity.Property(e => e.Costemedioreg).HasColumnName("COSTEMEDIOREG");

                entity.Property(e => e.Costesrecienasumidos).HasColumnName("COSTESRECIENASUMIDOS");

                entity.Property(e => e.Costestock).HasColumnName("COSTESTOCK");

                entity.Property(e => e.Costestockdmn).HasColumnName("COSTESTOCKDMN");

                entity.Property(e => e.Costestockdmnreg).HasColumnName("COSTESTOCKDMNREG");

                entity.Property(e => e.Costestockreg).HasColumnName("COSTESTOCKREG");

                entity.Property(e => e.Eskitsinstock).HasColumnName("ESKITSINSTOCK");

                entity.Property(e => e.Fabricados).HasColumnName("FABRICADOS");

                entity.Property(e => e.Hayinventario).HasColumnName("HAYINVENTARIO");

                entity.Property(e => e.Hayregulcostes).HasColumnName("HAYREGULCOSTES");

                entity.Property(e => e.Recalcularcostes).HasColumnName("RECALCULARCOSTES");

                entity.Property(e => e.Recalcularventas).HasColumnName("RECALCULARVENTAS");

                entity.Property(e => e.Stockinicial).HasColumnName("STOCKINICIAL");

                entity.Property(e => e.Traspenviados).HasColumnName("TRASPENVIADOS");

                entity.Property(e => e.Trasprecibidos).HasColumnName("TRASPRECIBIDOS");

                entity.Property(e => e.Ultimocoste).HasColumnName("ULTIMOCOSTE");

                entity.Property(e => e.Ultimocostedmn).HasColumnName("ULTIMOCOSTEDMN");

                entity.Property(e => e.Ultimocostedmnreg).HasColumnName("ULTIMOCOSTEDMNREG");

                entity.Property(e => e.Ultimocostereg).HasColumnName("ULTIMOCOSTEREG");

                entity.Property(e => e.Unidadescompradasinicial).HasColumnName("UNIDADESCOMPRADASINICIAL");

                entity.Property(e => e.Usadosparafabricar).HasColumnName("USADOSPARAFABRICAR");

                entity.Property(e => e.Usadosparafabricarenstock).HasColumnName("USADOSPARAFABRICARENSTOCK");

                entity.Property(e => e.Ventas).HasColumnName("VENTAS");

                entity.Property(e => e.Ventasenstock).HasColumnName("VENTASENSTOCK");

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Historicocostes)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("HISTORICOCOSTES_FK");
            });

            modelBuilder.Entity<Historicokit>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color, e.Lineakit, e.Numaccion })
                    .HasName("HITORICOKITS_PK");

                entity.ToTable("HISTORICOKITS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Lineakit).HasColumnName("LINEAKIT");

                entity.Property(e => e.Numaccion).HasColumnName("NUMACCION");

                entity.Property(e => e.Accion).HasColumnName("ACCION");

                entity.Property(e => e.Codartkit).HasColumnName("CODARTKIT");

                entity.Property(e => e.Colorkit)
                    .IsRequired()
                    .HasColumnName("COLORKIT")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(500);

                entity.Property(e => e.Descripciokit)
                    .HasColumnName("DESCRIPCIOKIT")
                    .HasMaxLength(40);

                entity.Property(e => e.Fechaaccion)
                    .HasColumnName("FECHAACCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Imprimirlinea)
                    .HasColumnName("IMPRIMIRLINEA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Preciounidad).HasColumnName("PRECIOUNIDAD");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Referenciakit)
                    .HasColumnName("REFERENCIAKIT")
                    .HasMaxLength(15);

                entity.Property(e => e.Tallakit)
                    .IsRequired()
                    .HasColumnName("TALLAKIT")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Totallinea).HasColumnName("TOTALLINEA");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Unidades2).HasColumnName("UNIDADES2");

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Historicokits)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("HITORICOKITS_FK");
            });

            modelBuilder.Entity<Historicoreservascab>(entity =>
            {
                entity.ToTable("HISTORICORESERVASCAB");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Dia)
                    .HasColumnName("DIA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empleado).HasColumnName("EMPLEADO");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Estadofinal)
                    .HasColumnName("ESTADOFINAL")
                    .HasMaxLength(10);

                entity.Property(e => e.Estadoponer)
                    .HasColumnName("ESTADOPONER")
                    .HasMaxLength(10);

                entity.Property(e => e.Estadoprevio)
                    .HasColumnName("ESTADOPREVIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Estadoquitar)
                    .HasColumnName("ESTADOQUITAR")
                    .HasMaxLength(10);

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasalida)
                    .HasColumnName("FECHASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Gobernanta)
                    .HasColumnName("GOBERNANTA")
                    .HasMaxLength(30);

                entity.Property(e => e.Habitacion)
                    .HasColumnName("HABITACION")
                    .HasMaxLength(20);

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<Hmensajesvendedore>(entity =>
            {
                entity.ToTable("HMENSAJESVENDEDORES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaleido)
                    .HasColumnName("FECHALEIDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Textomensaje)
                    .HasColumnName("TEXTOMENSAJE")
                    .HasMaxLength(255);

                entity.Property(e => e.Vendedordestino).HasColumnName("VENDEDORDESTINO");

                entity.Property(e => e.Vendedororigen).HasColumnName("VENDEDORORIGEN");
            });

            modelBuilder.Entity<Hocupantesreserva>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Orden })
                    .HasName("HOCUPANTESRESERVA_PK");

                entity.ToTable("HOCUPANTESRESERVA");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Adulto)
                    .IsRequired()
                    .HasColumnName("ADULTO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Apellido1)
                    .HasColumnName("APELLIDO1")
                    .HasMaxLength(89);

                entity.Property(e => e.Apellido2)
                    .HasColumnName("APELLIDO2")
                    .HasMaxLength(89);

                entity.Property(e => e.Aplicartasaturistica).HasColumnName("APLICARTASATURISTICA");

                entity.Property(e => e.Clientevip).HasColumnName("CLIENTEVIP");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpaisnacionalidad)
                    .HasColumnName("CODPAISNACIONALIDAD")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Comentarios)
                    .HasColumnName("COMENTARIOS")
                    .HasColumnType("ntext");

                entity.Property(e => e.Comunidadcod)
                    .HasColumnName("COMUNIDADCOD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cvc)
                    .HasColumnName("CVC")
                    .HasMaxLength(4);

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Edad).HasColumnName("EDAD");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Fechacaducidaddoc)
                    .HasColumnName("FECHACADUCIDADDOC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaexpedicion)
                    .HasColumnName("FECHAEXPEDICION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechanacimiento)
                    .HasColumnName("FECHANACIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idioma).HasColumnName("IDIOMA");

                entity.Property(e => e.Idregistro).HasColumnName("IDREGISTRO");

                entity.Property(e => e.Idtipodoc).HasColumnName("IDTIPODOC");

                entity.Property(e => e.Lugarnacimiento)
                    .HasColumnName("LUGARNACIMIENTO")
                    .HasMaxLength(30);

                entity.Property(e => e.Matricula)
                    .HasColumnName("MATRICULA")
                    .HasMaxLength(15);

                entity.Property(e => e.Modelo)
                    .HasColumnName("MODELO")
                    .HasMaxLength(25);

                entity.Property(e => e.Nif20)
                    .HasColumnName("NIF20")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombre1)
                    .HasColumnName("NOMBRE1")
                    .HasMaxLength(75);

                entity.Property(e => e.Nompersona)
                    .HasColumnName("NOMPERSONA")
                    .HasMaxLength(255);

                entity.Property(e => e.Numtarjeta)
                    .HasColumnName("NUMTARJETA")
                    .HasMaxLength(20);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Recibirinformacion).HasColumnName("RECIBIRINFORMACION");

                entity.Property(e => e.Sexo)
                    .HasColumnName("SEXO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tarcaducidad)
                    .HasColumnName("TARCADUCIDAD")
                    .HasMaxLength(4);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Telefono2)
                    .HasColumnName("TELEFONO2")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipotarjeta).HasColumnName("TIPOTARJETA");

                entity.HasOne(d => d.Hreserva)
                    .WithMany(p => p.Hocupantesreservas)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("HRESERVAS_HOCUPANTESRESERVA");
            });

            modelBuilder.Entity<HoperacionesDispositivo>(entity =>
            {
                entity.ToTable("HOPERACIONES_DISPOSITIVOS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Extension)
                    .HasColumnName("EXTENSION")
                    .HasMaxLength(80);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Iddispositivo).HasColumnName("IDDISPOSITIVO");

                entity.Property(e => e.Idoperacion).HasColumnName("IDOPERACION");

                entity.Property(e => e.Parametro1)
                    .HasColumnName("PARAMETRO1")
                    .HasMaxLength(80);

                entity.Property(e => e.Parametro2)
                    .HasColumnName("PARAMETRO2")
                    .HasMaxLength(80);

                entity.Property(e => e.Parametro3)
                    .HasColumnName("PARAMETRO3")
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<Horariocab>(entity =>
            {
                entity.HasKey(e => e.Codhorario)
                    .HasName("HORARIOCAB_PK");

                entity.ToTable("HORARIOCAB");

                entity.Property(e => e.Codhorario)
                    .HasColumnName("CODHORARIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Horarioempleado>(entity =>
            {
                entity.HasKey(e => e.Codempleado)
                    .HasName("HORARIOSEMPLEADO_PK");

                entity.ToTable("HORARIOEMPLEADO");

                entity.Property(e => e.Codempleado)
                    .HasColumnName("CODEMPLEADO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codhorario).HasColumnName("CODHORARIO");

                entity.HasOne(d => d.CodhorarioNavigation)
                    .WithMany(p => p.Horarioempleados)
                    .HasForeignKey(d => d.Codhorario)
                    .HasConstraintName("HORARIOSEMPLEADO_FK");
            });

            modelBuilder.Entity<Horariolin>(entity =>
            {
                entity.HasKey(e => new { e.Codhorario, e.Codturno })
                    .HasName("HORARIOLIN_PK");

                entity.ToTable("HORARIOLIN");

                entity.Property(e => e.Codhorario).HasColumnName("CODHORARIO");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");

                entity.Property(e => e.Ddomingo)
                    .HasColumnName("DDOMINGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(70);

                entity.Property(e => e.Djueves)
                    .HasColumnName("DJUEVES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dlunes)
                    .HasColumnName("DLUNES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dmartes)
                    .HasColumnName("DMARTES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dmiercoles)
                    .HasColumnName("DMIERCOLES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dsabado)
                    .HasColumnName("DSABADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dviernes)
                    .HasColumnName("DVIERNES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasMaxLength(10);

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Recargo).HasColumnName("RECARGO");

                entity.HasOne(d => d.CodhorarioNavigation)
                    .WithMany(p => p.Horariolins)
                    .HasForeignKey(d => d.Codhorario)
                    .HasConstraintName("HORARIOLIN_FK");
            });

            modelBuilder.Entity<Hotele>(entity =>
            {
                entity.HasKey(e => e.Idhotel)
                    .HasName("HOTELES_PK");

                entity.ToTable("HOTELES");

                entity.Property(e => e.Idhotel)
                    .HasColumnName("IDHOTEL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Almacenweb)
                    .HasColumnName("ALMACENWEB")
                    .HasMaxLength(3);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(100);

                entity.Property(e => e.Cajahotel)
                    .HasColumnName("CAJAHOTEL")
                    .HasMaxLength(3);

                entity.Property(e => e.Calcproduccion).HasColumnName("CALCPRODUCCION");

                entity.Property(e => e.Camas).HasColumnName("CAMAS");

                entity.Property(e => e.Campospersona)
                    .HasColumnName("CAMPOSPERSONA")
                    .HasMaxLength(35);

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(100);

                entity.Property(e => e.Claveencriptacion)
                    .HasColumnName("CLAVEENCRIPTACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Codcomercio)
                    .HasColumnName("CODCOMERCIO")
                    .HasMaxLength(100);

                entity.Property(e => e.Codfpagopasarela)
                    .HasColumnName("CODFPAGOPASARELA")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Colorfuente).HasColumnName("COLORFUENTE");

                entity.Property(e => e.Cuentapuente)
                    .HasColumnName("CUENTAPUENTE")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaventas)
                    .HasColumnName("CUENTAVENTAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Dinguserver)
                    .HasColumnName("DINGUSERVER")
                    .HasMaxLength(25);

                entity.Property(e => e.Dinguserverport).HasColumnName("DINGUSERVERPORT");

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(80);

                entity.Property(e => e.Enproduccion).HasColumnName("ENPRODUCCION");

                entity.Property(e => e.Enviarcopiahotel).HasColumnName("ENVIARCOPIAHOTEL");

                entity.Property(e => e.Estadoanul)
                    .HasColumnName("ESTADOANUL")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Estadoconcupo).HasColumnName("ESTADOCONCUPO");

                entity.Property(e => e.Estadodefconcupo).HasColumnName("ESTADODEFCONCUPO");

                entity.Property(e => e.Estadodefsincupo).HasColumnName("ESTADODEFSINCUPO");

                entity.Property(e => e.Estadosincupo).HasColumnName("ESTADOSINCUPO");

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Fhxpassword)
                    .HasColumnName("FHXPASSWORD")
                    .HasMaxLength(30);

                entity.Property(e => e.Fhxusuario)
                    .HasColumnName("FHXUSUARIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Idpasarela)
                    .HasColumnName("IDPASARELA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Iniciosemana)
                    .HasColumnName("INICIOSEMANA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Intervalorefresco).HasColumnName("INTERVALOREFRESCO");

                entity.Property(e => e.Mailcheckindiasantelacion).HasColumnName("MAILCHECKINDIASANTELACION");

                entity.Property(e => e.Mailcheckindisenyo).HasColumnName("MAILCHECKINDISENYO");

                entity.Property(e => e.Mailcheckindocumento).HasColumnName("MAILCHECKINDOCUMENTO");

                entity.Property(e => e.Mailcheckinenviar).HasColumnName("MAILCHECKINENVIAR");

                entity.Property(e => e.Mailcheckoutdisenyo).HasColumnName("MAILCHECKOUTDISENYO");

                entity.Property(e => e.Mailcheckoutdocumento).HasColumnName("MAILCHECKOUTDOCUMENTO");

                entity.Property(e => e.Mailcheckoutenviar).HasColumnName("MAILCHECKOUTENVIAR");

                entity.Property(e => e.Mailconfirmacionreservadisenyo).HasColumnName("MAILCONFIRMACIONRESERVADISENYO");

                entity.Property(e => e.Mailconfirmacionreservadocumento).HasColumnName("MAILCONFIRMACIONRESERVADOCUMENTO");

                entity.Property(e => e.Nif)
                    .HasColumnName("NIF")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombrecomercio)
                    .HasColumnName("NOMBRECOMERCIO")
                    .HasMaxLength(100);

                entity.Property(e => e.Passwd)
                    .HasColumnName("PASSWD")
                    .HasMaxLength(15);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(25);

                entity.Property(e => e.Porcacta).HasColumnName("PORCACTA");

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(25);

                entity.Property(e => e.Recalcularnumsemana).HasColumnName("RECALCULARNUMSEMANA");

                entity.Property(e => e.Regimenweb).HasColumnName("REGIMENWEB");

                entity.Property(e => e.Selecciontarifapaquete).HasColumnName("SELECCIONTARIFAPAQUETE");

                entity.Property(e => e.Serieabonos)
                    .HasColumnName("SERIEABONOS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieabonostiquets)
                    .HasColumnName("SERIEABONOSTIQUETS")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriealbaranes)
                    .HasColumnName("SERIEALBARANES")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefacturas)
                    .HasColumnName("SERIEFACTURAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriegastos)
                    .HasColumnName("SERIEGASTOS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieinvitaciones)
                    .HasColumnName("SERIEINVITACIONES")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriepasarela)
                    .HasColumnName("SERIEPASARELA")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriereservas)
                    .HasColumnName("SERIERESERVAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serietiquets)
                    .HasColumnName("SERIETIQUETS")
                    .HasMaxLength(4);

                entity.Property(e => e.Tarifaweb).HasColumnName("TARIFAWEB");

                entity.Property(e => e.Tarifawebextras).HasColumnName("TARIFAWEBEXTRAS");

                entity.Property(e => e.Telefono1)
                    .HasColumnName("TELEFONO1")
                    .HasMaxLength(15);

                entity.Property(e => e.Telefono2)
                    .HasColumnName("TELEFONO2")
                    .HasMaxLength(15);

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(100);

                entity.Property(e => e.Textocancelacion)
                    .HasColumnName("TEXTOCANCELACION")
                    .HasColumnType("ntext");

                entity.Property(e => e.Textointernet)
                    .HasColumnName("TEXTOINTERNET")
                    .HasColumnType("ntext");

                entity.Property(e => e.Textosinlicencia)
                    .HasColumnName("TEXTOSINLICENCIA")
                    .HasColumnType("ntext");

                entity.Property(e => e.Textowebcondicionespago)
                    .HasColumnName("TEXTOWEBCONDICIONESPAGO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Textowebcupo)
                    .HasColumnName("TEXTOWEBCUPO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Textowebsincupo)
                    .HasColumnName("TEXTOWEBSINCUPO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Tipohabcheckin).HasColumnName("TIPOHABCHECKIN");

                entity.Property(e => e.Tipopagocta).HasColumnName("TIPOPAGOCTA");

                entity.Property(e => e.Titularcomercio)
                    .HasColumnName("TITULARCOMERCIO")
                    .HasMaxLength(100);

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Hotelescomentario>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idcomentario, e.Codidioma });

                entity.ToTable("HOTELESCOMENTARIOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HOTELESCOMENTARIOSVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idcomentario).HasColumnName("IDCOMENTARIO");

                entity.Property(e => e.Codidioma)
                    .HasColumnName("CODIDIOMA")
                    .HasMaxLength(2);

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Hoteleshabitacione>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Codarticulo });

                entity.ToTable("HOTELESHABITACIONES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HOTELESHABITACIONESVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Hoteleshabitaciones)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("FK_HOTELESHABITACIONES_ARTICULOSHABITACIONES");

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hoteleshabitaciones)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("FK_HOTELESHABITACIONES_HOTELES");
            });

            modelBuilder.Entity<Hoteleshabitacionesweb>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Codarticulo });

                entity.ToTable("HOTELESHABITACIONESWEB");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HOTELESHABITACIONESWEBVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Hoteleshabitacioneswebs)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("FK_HOTELESHABITACIONESWEB_ARTICULOSHABITACIONES");

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hoteleshabitacioneswebs)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("FK_HOTELESHABITACIONESWEB_HOTELES");
            });

            modelBuilder.Entity<Hotelesregimene>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Codarticulo });

                entity.ToTable("HOTELESREGIMENES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HOTELESREGIMENESVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Hotelesregimenes)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("FK_HOTELESREGIMENES_ARTICULOSREGIMENES");

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hotelesregimenes)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("FK_HOTELESREGIMENES_HOTELES");
            });

            modelBuilder.Entity<Hotelestarifa>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idtarifahotel })
                    .HasName("HOTELESTARIFAS_PK");

                entity.ToTable("HOTELESTARIFAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HOTELESTARIFASVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idtarifahotel).HasColumnName("IDTARIFAHOTEL");

                entity.Property(e => e.Booking)
                    .IsRequired()
                    .HasColumnName("BOOKING")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hotelestarifas)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("HOTELESTARIFAS_FKHOTELES");

                entity.HasOne(d => d.IdtarifahotelNavigation)
                    .WithMany(p => p.Hotelestarifas)
                    .HasForeignKey(d => d.Idtarifahotel)
                    .HasConstraintName("HOTELESTARIFAS_FKTARIFASHOTEL");
            });

            modelBuilder.Entity<Hotelestarifascargo>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idtarifav })
                    .HasName("HOTELESTARIFASCARGOS_PK");

                entity.ToTable("HOTELESTARIFASCARGOS");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hotelestarifascargos)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("HOTELESTARIFASCARGOS_FKHOTELES");

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Hotelestarifascargos)
                    .HasForeignKey(d => d.Idtarifav)
                    .HasConstraintName("HOTELESTARIFASCARGOS_FKTARIFASVENTA");
            });

            modelBuilder.Entity<Hotelestarifasextra>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Idtarifav, e.Idtemporada, e.Posicion })
                    .HasName("HOTELESTARIFASEXTRAS_PK");

                entity.ToTable("HOTELESTARIFASEXTRAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_HOTELESTARIFASEXTRASVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.Hotelestarifasextras)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("HOTELESTARIFASEXTRAS_FKHOTELES");

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Hotelestarifasextras)
                    .HasForeignKey(d => d.Idtarifav)
                    .HasConstraintName("HOTELESTARIFASEXTRAS_FKTARIFASVENTA");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Hotelestarifasextras)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("HOTELESTARIFASEXTRAS_FKTEMPORADASHOTEL");
            });

            modelBuilder.Entity<Hpersona>(entity =>
            {
                entity.HasKey(e => e.Nif)
                    .HasName("HPERSONAS_PK");

                entity.ToTable("HPERSONAS");

                entity.Property(e => e.Nif)
                    .HasColumnName("NIF")
                    .HasMaxLength(20);

                entity.Property(e => e.Apellido1)
                    .HasColumnName("APELLIDO1")
                    .HasMaxLength(89);

                entity.Property(e => e.Apellido2)
                    .HasColumnName("APELLIDO2")
                    .HasMaxLength(89);

                entity.Property(e => e.Boleanos)
                    .HasColumnName("BOLEANOS")
                    .HasMaxLength(15);

                entity.Property(e => e.Clientevip).HasColumnName("CLIENTEVIP");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpaisnacionalidad)
                    .HasColumnName("CODPAISNACIONALIDAD")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Comentarios)
                    .HasColumnName("COMENTARIOS")
                    .HasColumnType("ntext");

                entity.Property(e => e.Comunidadcod)
                    .HasColumnName("COMUNIDADCOD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cvc)
                    .HasColumnName("CVC")
                    .HasMaxLength(4);

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechacaducidaddoc)
                    .HasColumnName("FECHACADUCIDADDOC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaexpedicion)
                    .HasColumnName("FECHAEXPEDICION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechanacimiento)
                    .HasColumnName("FECHANACIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Idioma).HasColumnName("IDIOMA");

                entity.Property(e => e.Idtipodoc).HasColumnName("IDTIPODOC");

                entity.Property(e => e.Imagendoc)
                    .HasColumnName("IMAGENDOC")
                    .HasColumnType("image");

                entity.Property(e => e.Imagendoc2)
                    .HasColumnName("IMAGENDOC2")
                    .HasColumnType("image");

                entity.Property(e => e.Lugarnacimiento)
                    .HasColumnName("LUGARNACIMIENTO")
                    .HasMaxLength(30);

                entity.Property(e => e.Matricula)
                    .HasColumnName("MATRICULA")
                    .HasMaxLength(15);

                entity.Property(e => e.Modelo)
                    .HasColumnName("MODELO")
                    .HasMaxLength(25);

                entity.Property(e => e.Nacionalidad)
                    .HasColumnName("NACIONALIDAD")
                    .HasMaxLength(30);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombre1)
                    .HasColumnName("NOMBRE1")
                    .HasMaxLength(75);

                entity.Property(e => e.Numtarjeta)
                    .HasColumnName("NUMTARJETA")
                    .HasMaxLength(20);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Recibirinformacion).HasColumnName("RECIBIRINFORMACION");

                entity.Property(e => e.Sexo)
                    .HasColumnName("SEXO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tarcaducidad)
                    .HasColumnName("TARCADUCIDAD")
                    .HasMaxLength(4);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Telefono2)
                    .HasColumnName("TELEFONO2")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipotarjeta).HasColumnName("TIPOTARJETA");
            });

            modelBuilder.Entity<Hreserva>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea })
                    .HasName("HRESERVAS_PK");

                entity.ToTable("HRESERVAS");

                entity.HasIndex(e => e.Fechasalida)
                    .HasName("HRESERVAS_FECHASALIDA");

                entity.HasIndex(e => new { e.Idhotel, e.Estado, e.Habitacion })
                    .HasName("HRESERVAS_ESTADO");

                entity.HasIndex(e => new { e.Idhotelfac, e.Seriefac, e.Idreservafac, e.Idlineafac })
                    .HasName("HRESERVAS_FACTURAR");

                entity.HasIndex(e => new { e.Fechaentrada, e.Fechasalida, e.Estado, e.Tipohabitacion, e.Idhotel })
                    .HasName("HRESERVAS_FECHAENTRADA");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Aplicadosuplemento).HasColumnName("APLICADOSUPLEMENTO");

                entity.Property(e => e.Cambiohabitacion)
                    .HasColumnName("CAMBIOHABITACION")
                    .HasMaxLength(1);

                entity.Property(e => e.Codclienteextras).HasColumnName("CODCLIENTEEXTRAS");

                entity.Property(e => e.Codclientefijos).HasColumnName("CODCLIENTEFIJOS");

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codregimen).HasColumnName("CODREGIMEN");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Exportada).HasColumnName("EXPORTADA");

                entity.Property(e => e.Facturadaagencia)
                    .HasColumnName("FACTURADAAGENCIA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasalida)
                    .HasColumnName("FECHASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Horaentrada)
                    .HasColumnName("HORAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horasalida)
                    .HasColumnName("HORASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idhotelfac).HasColumnName("IDHOTELFAC");

                entity.Property(e => e.Idlineafac).HasColumnName("IDLINEAFAC");

                entity.Property(e => e.Idreservafac).HasColumnName("IDRESERVAFAC");

                entity.Property(e => e.Idtarifa).HasColumnName("IDTARIFA");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Pagador).HasColumnName("PAGADOR");

                entity.Property(e => e.Pax)
                    .HasColumnName("PAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paxbebe)
                    .HasColumnName("PAXBEBE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paxnen)
                    .HasColumnName("PAXNEN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Permextras)
                    .HasColumnName("PERMEXTRAS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Planta).HasColumnName("PLANTA");

                entity.Property(e => e.Preasignada)
                    .HasColumnName("PREASIGNADA")
                    .HasMaxLength(10);

                entity.Property(e => e.Regimen)
                    .HasColumnName("REGIMEN")
                    .HasMaxLength(6);

                entity.Property(e => e.Seriefac)
                    .HasColumnName("SERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Serventrada).HasColumnName("SERVENTRADA");

                entity.Property(e => e.Servsalida).HasColumnName("SERVSALIDA");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(25);

                entity.Property(e => e.Tipohabitacion).HasColumnName("TIPOHABITACION");

                entity.Property(e => e.Ultimamodificacion)
                    .HasColumnName("ULTIMAMODIFICACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ultvendedormodificacion).HasColumnName("ULTVENDEDORMODIFICACION");

                entity.HasOne(d => d.Hreservascab)
                    .WithMany(p => p.Hreservas)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva })
                    .HasConstraintName("FK_HRESERVAS_HRESERVASCAB");
            });

            modelBuilder.Entity<Hreservasasunto>(entity =>
            {
                entity.HasKey(e => new { e.Serieasunto, e.Numeroasunto });

                entity.ToTable("HRESERVASASUNTOS");

                entity.HasIndex(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idocupante })
                    .HasName("HRESERVASASUNTOS_RESERVA");

                entity.Property(e => e.Serieasunto)
                    .HasColumnName("SERIEASUNTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Numeroasunto).HasColumnName("NUMEROASUNTO");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idlin)
                    .HasColumnName("IDLIN")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Idlinea)
                    .HasColumnName("IDLINEA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Idocupante)
                    .HasColumnName("IDOCUPANTE")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Idperiodo)
                    .HasColumnName("IDPERIODO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Asunto)
                    .WithOne(p => p.Hreservasasunto)
                    .HasForeignKey<Hreservasasunto>(d => new { d.Serieasunto, d.Numeroasunto })
                    .HasConstraintName("FK_HRESERVASASUNTOS_ASUNTOS");

                entity.HasOne(d => d.Hreservascab)
                    .WithMany(p => p.Hreservasasuntos)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva })
                    .HasConstraintName("FK_HRESERVASASUNTOS_HRESERVASCAB");
            });

            modelBuilder.Entity<Hreservasauto>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva })
                    .HasName("HRESERVASAUTO_PK");

                entity.ToTable("HRESERVASAUTO");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasalida)
                    .HasColumnName("FECHASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Semana).HasColumnName("SEMANA");
            });

            modelBuilder.Entity<Hreservasbloqueo>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea })
                    .HasName("HRESERVASBLOQUEOS_PK");

                entity.ToTable("HRESERVASBLOQUEOS");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Fechainibloqueo)
                    .HasColumnName("FECHAINIBLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainibloqueo)
                    .HasColumnName("HORAINIBLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);

                entity.HasOne(d => d.Hreservascab)
                    .WithMany(p => p.Hreservasbloqueos)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva })
                    .HasConstraintName("HRESERVASBLOQUEOS_FK");
            });

            modelBuilder.Entity<Hreservascab>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva });

                entity.ToTable("HRESERVASCAB");

                entity.HasIndex(e => e.Fecha)
                    .HasName("HRESERVASCAB_FECHA");

                entity.HasIndex(e => new { e.Serie, e.Idreserva })
                    .HasName("HRESERVASCAB_SERIENUM");

                entity.HasIndex(e => new { e.Idhotel, e.Fecha, e.Estadoreserva })
                    .HasName("HRESERVASCAB_IDHOTEL_FECHA_ESTADO");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codempresa).HasColumnName("CODEMPRESA");

                entity.Property(e => e.Codintermediario).HasColumnName("CODINTERMEDIARIO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Contacto)
                    .HasColumnName("CONTACTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Estadoreserva).HasColumnName("ESTADORESERVA");

                entity.Property(e => e.Estadovto)
                    .HasColumnName("ESTADOVTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Extrasa).HasColumnName("EXTRASA");

                entity.Property(e => e.Factormoneda)
                    .HasColumnName("FACTORMONEDA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Facturara).HasColumnName("FACTURARA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasalida)
                    .HasColumnName("FECHASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechavto)
                    .HasColumnName("FECHAVTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Idcupoweb).HasColumnName("IDCUPOWEB");

                entity.Property(e => e.Idtarifa).HasColumnName("IDTARIFA");

                entity.Property(e => e.Mailcheckinenviado).HasColumnName("MAILCHECKINENVIADO");

                entity.Property(e => e.Modificado)
                    .HasColumnName("MODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nifocupante)
                    .HasColumnName("NIFOCUPANTE")
                    .HasMaxLength(20);

                entity.Property(e => e.Numversion).HasColumnName("NUMVERSION");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Ocupante)
                    .HasColumnName("OCUPANTE")
                    .HasMaxLength(255);

                entity.Property(e => e.Pendientedescarga)
                    .HasColumnName("PENDIENTEDESCARGA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Pendientedescarga2).HasColumnName("PENDIENTEDESCARGA2");

                entity.Property(e => e.Regimen)
                    .HasColumnName("REGIMEN")
                    .HasMaxLength(6);

                entity.Property(e => e.Sureserva)
                    .HasColumnName("SURESERVA")
                    .HasMaxLength(30);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Usermodificado).HasColumnName("USERMODIFICADO");
            });

            modelBuilder.Entity<Hreservascargo>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo, e.Idlin })
                    .HasName("HRESERVASCARGOS_PK");

                entity.ToTable("HRESERVASCARGOS");

                entity.HasIndex(e => new { e.Idhotel, e.Desde, e.Tipoarticulo })
                    .HasName("HRESERVASCARGOS_TIPOARTICULO");

                entity.HasIndex(e => new { e.Seriealb, e.Numeroalb, e.Numlinalb, e.Nalb })
                    .HasName("HRESERVASCARGOS_ALB");

                entity.HasIndex(e => new { e.Seriefac, e.Numerofac, e.Nfac, e.Facturado })
                    .HasName("HRESERVASCARGOS_FAC");

                entity.HasIndex(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo })
                    .HasName("HRESERVASCARGOS_PERIODO");

                entity.HasIndex(e => new { e.Idhotel, e.Facturado, e.Desde, e.Importe, e.Factormoneda, e.Visible })
                    .HasName("HRESERVASCARGOS_FACTURADO");

                entity.HasIndex(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo, e.Idlin, e.Espaquete, e.Espack })
                    .HasName("HRESERVASCARGOS_PAQUETE");

                entity.HasIndex(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo, e.Tipoarticulo, e.Regimennen, e.Regimenbebe, e.Visible })
                    .HasName("HRESERVASCARGOS_PERIODOTIPOARTREG");

                entity.HasIndex(e => new { e.Idhotel, e.Desde, e.Tipoarticulo, e.Facturado, e.Numerofac, e.Unidades, e.Importe, e.Importeiva, e.Espaquete, e.Factormoneda, e.Visible })
                    .HasName("HRESERVASCARGOS_FECHA");

                entity.HasIndex(e => new { e.Idhotel, e.Desde, e.Facturado, e.Numerofac, e.Tipoarticulo, e.Idlin, e.Serie, e.Idreserva, e.Idlinea, e.Idtarifav, e.Factormoneda, e.Importe, e.Importeiva, e.Codmoneda, e.Visible })
                    .HasName("HRESERVASCARGOS_DESDEPROD");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Idlin).HasColumnName("IDLIN");

                entity.Property(e => e.Afectacocina).HasColumnName("AFECTACOCINA");

                entity.Property(e => e.Cerrado)
                    .HasColumnName("CERRADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codpersona).HasColumnName("CODPERSONA");

                entity.Property(e => e.Codtemporada).HasColumnName("CODTEMPORADA");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(80);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Espack)
                    .HasColumnName("ESPACK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Espaquete)
                    .HasColumnName("ESPAQUETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechafac)
                    .HasColumnName("FECHAFAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idhotelocupante).HasColumnName("IDHOTELOCUPANTE");

                entity.Property(e => e.Idlineaocupante).HasColumnName("IDLINEAOCUPANTE");

                entity.Property(e => e.Idlinrel).HasColumnName("IDLINREL");

                entity.Property(e => e.Idocupante)
                    .HasColumnName("IDOCUPANTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idperiodorel).HasColumnName("IDPERIODOREL");

                entity.Property(e => e.Idreservaocupante).HasColumnName("IDRESERVAOCUPANTE");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Nalb)
                    .HasColumnName("NALB")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nres)
                    .HasColumnName("NRES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numeroalb).HasColumnName("NUMEROALB");

                entity.Property(e => e.Numerofac).HasColumnName("NUMEROFAC");

                entity.Property(e => e.Numerores).HasColumnName("NUMERORES");

                entity.Property(e => e.Numlinalb).HasColumnName("NUMLINALB");

                entity.Property(e => e.Ordenocupante).HasColumnName("ORDENOCUPANTE");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciobase).HasColumnName("PRECIOBASE");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Regimenbebe)
                    .HasColumnName("REGIMENBEBE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Regimennen)
                    .HasColumnName("REGIMENNEN")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Seriealb)
                    .HasColumnName("SERIEALB")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefac)
                    .HasColumnName("SERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieocupante)
                    .HasColumnName("SERIEOCUPANTE")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieres)
                    .HasColumnName("SERIERES")
                    .HasMaxLength(4);

                entity.Property(e => e.Suplemento).HasColumnName("SUPLEMENTO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoarticulo)
                    .HasColumnName("TIPOARTICULO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Hreservaslin)
                    .WithMany(p => p.Hreservascargos)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva, d.Idlinea, d.Idperiodo })
                    .HasConstraintName("HRESERVASCARGOS_FK");
            });

            modelBuilder.Entity<Hreservascentralitum>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea });

                entity.ToTable("HRESERVASCENTRALITA");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Horadespertador)
                    .HasColumnName("HORADESPERTADOR")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lineatelefono)
                    .IsRequired()
                    .HasColumnName("LINEATELEFONO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nomolestar).HasColumnName("NOMOLESTAR");

                entity.HasOne(d => d.Hreserva)
                    .WithOne(p => p.Hreservascentralitum)
                    .HasForeignKey<Hreservascentralitum>(d => new { d.Idhotel, d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("FK_HRESERVASCENTRALITA_HRESERVAS");
            });

            modelBuilder.Entity<Hreservascierrediario>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Fecha })
                    .HasName("HRESERVASCIERREDIARIO_PK");

                entity.ToTable("HRESERVASCIERREDIARIO");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Acuenta).HasColumnName("ACUENTA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Cargosdtos).HasColumnName("CARGOSDTOS");

                entity.Property(e => e.Cargosdtosany).HasColumnName("CARGOSDTOSANY");

                entity.Property(e => e.Cargosdtosmes).HasColumnName("CARGOSDTOSMES");

                entity.Property(e => e.Cobros).HasColumnName("COBROS");

                entity.Property(e => e.Comis).HasColumnName("COMIS");

                entity.Property(e => e.Comisany).HasColumnName("COMISANY");

                entity.Property(e => e.Comismes).HasColumnName("COMISMES");

                entity.Property(e => e.Correcciones).HasColumnName("CORRECCIONES");

                entity.Property(e => e.Correccionesany).HasColumnName("CORRECCIONESANY");

                entity.Property(e => e.Correccionesmes).HasColumnName("CORRECCIONESMES");

                entity.Property(e => e.Descuadre).HasColumnName("DESCUADRE");

                entity.Property(e => e.Dtos).HasColumnName("DTOS");

                entity.Property(e => e.Dtosany).HasColumnName("DTOSANY");

                entity.Property(e => e.Dtosmes).HasColumnName("DTOSMES");

                entity.Property(e => e.Extcomis).HasColumnName("EXTCOMIS");

                entity.Property(e => e.Extcomisany).HasColumnName("EXTCOMISANY");

                entity.Property(e => e.Extcomismes).HasColumnName("EXTCOMISMES");

                entity.Property(e => e.Extdtos).HasColumnName("EXTDTOS");

                entity.Property(e => e.Extdtosany).HasColumnName("EXTDTOSANY");

                entity.Property(e => e.Extdtosmes).HasColumnName("EXTDTOSMES");

                entity.Property(e => e.Extrasb).HasColumnName("EXTRASB");

                entity.Property(e => e.Extrasbany).HasColumnName("EXTRASBANY");

                entity.Property(e => e.Extrasbmes).HasColumnName("EXTRASBMES");

                entity.Property(e => e.Extrasn).HasColumnName("EXTRASN");

                entity.Property(e => e.Extrasnany).HasColumnName("EXTRASNANY");

                entity.Property(e => e.Extrasnmes).HasColumnName("EXTRASNMES");

                entity.Property(e => e.Facturas).HasColumnName("FACTURAS");

                entity.Property(e => e.Gratis).HasColumnName("GRATIS");

                entity.Property(e => e.Gratisany).HasColumnName("GRATISANY");

                entity.Property(e => e.Gratismes).HasColumnName("GRATISMES");

                entity.Property(e => e.Habany).HasColumnName("HABANY");

                entity.Property(e => e.Habfut).HasColumnName("HABFUT");

                entity.Property(e => e.Habmes).HasColumnName("HABMES");

                entity.Property(e => e.Habocup).HasColumnName("HABOCUP");

                entity.Property(e => e.Impuestos).HasColumnName("IMPUESTOS");

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.Property(e => e.Paxany).HasColumnName("PAXANY");

                entity.Property(e => e.Paxhab).HasColumnName("PAXHAB");

                entity.Property(e => e.Paxhabany).HasColumnName("PAXHABANY");

                entity.Property(e => e.Paxhabmes).HasColumnName("PAXHABMES");

                entity.Property(e => e.Paxmes).HasColumnName("PAXMES");

                entity.Property(e => e.Porcocup).HasColumnName("PORCOCUP");

                entity.Property(e => e.Porcocupany).HasColumnName("PORCOCUPANY");

                entity.Property(e => e.Porcocupmes).HasColumnName("PORCOCUPMES");

                entity.Property(e => e.Preciohabb).HasColumnName("PRECIOHABB");

                entity.Property(e => e.Preciohabbany).HasColumnName("PRECIOHABBANY");

                entity.Property(e => e.Preciohabbmes).HasColumnName("PRECIOHABBMES");

                entity.Property(e => e.Preciohabn).HasColumnName("PRECIOHABN");

                entity.Property(e => e.Preciohabnany).HasColumnName("PRECIOHABNANY");

                entity.Property(e => e.Preciohabnmes).HasColumnName("PRECIOHABNMES");

                entity.Property(e => e.Preciopaxb).HasColumnName("PRECIOPAXB");

                entity.Property(e => e.Preciopaxbany).HasColumnName("PRECIOPAXBANY");

                entity.Property(e => e.Preciopaxbmes).HasColumnName("PRECIOPAXBMES");

                entity.Property(e => e.Preciopaxn).HasColumnName("PRECIOPAXN");

                entity.Property(e => e.Preciopaxnany).HasColumnName("PRECIOPAXNANY");

                entity.Property(e => e.Preciopaxnmes).HasColumnName("PRECIOPAXNMES");

                entity.Property(e => e.Prodb).HasColumnName("PRODB");

                entity.Property(e => e.Prodbany).HasColumnName("PRODBANY");

                entity.Property(e => e.Prodbmes).HasColumnName("PRODBMES");

                entity.Property(e => e.Prodfut).HasColumnName("PRODFUT");

                entity.Property(e => e.Prodhrb).HasColumnName("PRODHRB");

                entity.Property(e => e.Prodhrbany).HasColumnName("PRODHRBANY");

                entity.Property(e => e.Prodhrbmes).HasColumnName("PRODHRBMES");

                entity.Property(e => e.Prodhrn).HasColumnName("PRODHRN");

                entity.Property(e => e.Prodhrnany).HasColumnName("PRODHRNANY");

                entity.Property(e => e.Prodhrnmes).HasColumnName("PRODHRNMES");

                entity.Property(e => e.Prodn).HasColumnName("PRODN");

                entity.Property(e => e.Prodnany).HasColumnName("PRODNANY");

                entity.Property(e => e.Prodncorr).HasColumnName("PRODNCORR");

                entity.Property(e => e.Prodncorrany).HasColumnName("PRODNCORRANY");

                entity.Property(e => e.Prodncorrmes).HasColumnName("PRODNCORRMES");

                entity.Property(e => e.Prodnmes).HasColumnName("PRODNMES");

                entity.Property(e => e.Prodnpendfac).HasColumnName("PRODNPENDFAC");

                entity.Property(e => e.Saldofinal).HasColumnName("SALDOFINAL");

                entity.Property(e => e.Saldoinicial).HasColumnName("SALDOINICIAL");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<Hreservascorreccionesproduccion>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idlin })
                    .HasName("HRESERVASCORRECCIONESPRODUCCION_PK");

                entity.ToTable("HRESERVASCORRECCIONESPRODUCCION");

                entity.HasIndex(e => new { e.Seriealb, e.Numeroalb, e.Numlinalb, e.Nalb })
                    .HasName("HRESERVASCORRPROD_ALB");

                entity.HasIndex(e => new { e.Seriefac, e.Numerofac, e.Nfac, e.Facturado })
                    .HasName("HRESERVASCORRPROD_FAC");

                entity.HasIndex(e => new { e.Idhotel, e.Facturado, e.Desde, e.Importe, e.Factormoneda, e.Visible })
                    .HasName("HRESERVASCORRPROD_FACTURADO");

                entity.HasIndex(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idperiodorel, e.Idlinrel, e.Visible })
                    .HasName("HRESERVASCORRECCIONESPRODUCCION_RELACIONADO");

                entity.HasIndex(e => new { e.Idhotel, e.Desde, e.Tipoarticulo, e.Facturado, e.Numerofac, e.Unidades, e.Factormoneda, e.Visible })
                    .HasName("HRESERVASCORRPROD_FECHA");

                entity.HasIndex(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Tipoarticulo, e.Regimennen, e.Regimenbebe, e.Factormoneda, e.Visible })
                    .HasName("HRESERVASCORRPROD_PERIODOTIPOARTREG");

                entity.HasIndex(e => new { e.Idhotel, e.Desde, e.Facturado, e.Numerofac, e.Tipoarticulo, e.Idlin, e.Serie, e.Idreserva, e.Idlinea, e.Idtarifav, e.Factormoneda, e.Importe, e.Importeiva, e.Codmoneda, e.Visible })
                    .HasName("HRESERVASCORRECCIONESPRODUCCION_DESDEPROD");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idlin).HasColumnName("IDLIN");

                entity.Property(e => e.Abonado).HasColumnName("ABONADO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtemporada).HasColumnName("CODTEMPORADA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(80);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Espack)
                    .HasColumnName("ESPACK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Espaquete)
                    .HasColumnName("ESPAQUETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechafac)
                    .HasColumnName("FECHAFAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idhotelocupante).HasColumnName("IDHOTELOCUPANTE");

                entity.Property(e => e.Idlineaocupante).HasColumnName("IDLINEAOCUPANTE");

                entity.Property(e => e.Idlinrel).HasColumnName("IDLINREL");

                entity.Property(e => e.Idocupante)
                    .HasColumnName("IDOCUPANTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idperiodorel).HasColumnName("IDPERIODOREL");

                entity.Property(e => e.Idreservaocupante).HasColumnName("IDRESERVAOCUPANTE");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Nalb)
                    .HasColumnName("NALB")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nres)
                    .HasColumnName("NRES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numeroalb).HasColumnName("NUMEROALB");

                entity.Property(e => e.Numerofac).HasColumnName("NUMEROFAC");

                entity.Property(e => e.Numerores).HasColumnName("NUMERORES");

                entity.Property(e => e.Numlinalb).HasColumnName("NUMLINALB");

                entity.Property(e => e.Ordenocupante).HasColumnName("ORDENOCUPANTE");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciobase).HasColumnName("PRECIOBASE");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Regimenbebe)
                    .HasColumnName("REGIMENBEBE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Regimennen)
                    .HasColumnName("REGIMENNEN")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Seriealb)
                    .HasColumnName("SERIEALB")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefac)
                    .HasColumnName("SERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieocupante)
                    .HasColumnName("SERIEOCUPANTE")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieres)
                    .HasColumnName("SERIERES")
                    .HasMaxLength(4);

                entity.Property(e => e.Suplemento).HasColumnName("SUPLEMENTO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoarticulo)
                    .HasColumnName("TIPOARTICULO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Variacion).HasColumnName("VARIACION");

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Hreserva)
                    .WithMany(p => p.Hreservascorreccionesproduccions)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("HRESERVASCORRECCIONESPRODUCCION_FK");
            });

            modelBuilder.Entity<Hreservasdocumento>(entity =>
            {
                entity.HasKey(e => e.Cod)
                    .HasName("HRESERVASDOCUMENTOS_PK");

                entity.ToTable("HRESERVASDOCUMENTOS");

                entity.Property(e => e.Cod).HasColumnName("COD");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasColumnName("RUTA")
                    .HasMaxLength(120);

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Hreservascab)
                    .WithMany(p => p.Hreservasdocumentos)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva })
                    .HasConstraintName("HRESERVASDOCUMENTOS_FK");
            });

            modelBuilder.Entity<Hreservasestadosauto>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Codigo, e.Idestado, e.Idlinea, e.Idperiodo })
                    .HasName("HRESERVASESTADOSAUTO_PK");

                entity.ToTable("HRESERVASESTADOSAUTO");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Idestado)
                    .HasColumnName("IDESTADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Espack).HasColumnName("ESPACK");

                entity.Property(e => e.Poner).HasColumnName("PONER");

                entity.HasOne(d => d.Hreservascab)
                    .WithMany(p => p.Hreservasestadosautos)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva })
                    .HasConstraintName("FK_HRESERVASESTADOSAUTO_HRESERVASCAB");
            });

            modelBuilder.Entity<Hreservaslin>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo })
                    .HasName("HRESERVASLIN_PK");

                entity.ToTable("HRESERVASLIN");

                entity.HasIndex(e => new { e.Desde, e.Idhotel, e.Porcalojamiento, e.Porcdesayuno, e.Porcalmuerzo, e.Porccena })
                    .HasName("HRESERVASLIN_DESDEPORC");

                entity.HasIndex(e => new { e.Desde, e.Idhotel, e.Regimen, e.Idtarifa, e.Importeprodalojamiento, e.Importeproddesayuno, e.Importeprodalmuerzo, e.Importeprodcena, e.Importeivaprodalojamiento, e.Importeivaproddesayuno, e.Importeivaprodalmuerzo, e.Importeivaprodcena })
                    .HasName("HRESERVASLIN_DESDE");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Apaxalmuerzo).HasColumnName("APAXALMUERZO");

                entity.Property(e => e.Apaxalmuerzobebe).HasColumnName("APAXALMUERZOBEBE");

                entity.Property(e => e.Apaxalmuerzonen).HasColumnName("APAXALMUERZONEN");

                entity.Property(e => e.Apaxcena).HasColumnName("APAXCENA");

                entity.Property(e => e.Apaxcenabebe).HasColumnName("APAXCENABEBE");

                entity.Property(e => e.Apaxcenanen).HasColumnName("APAXCENANEN");

                entity.Property(e => e.Apaxdesayuno).HasColumnName("APAXDESAYUNO");

                entity.Property(e => e.Apaxdesayunobebe).HasColumnName("APAXDESAYUNOBEBE");

                entity.Property(e => e.Apaxdesayunonen).HasColumnName("APAXDESAYUNONEN");

                entity.Property(e => e.Codregimen).HasColumnName("CODREGIMEN");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Idlineacambiohabitacion).HasColumnName("IDLINEACAMBIOHABITACION");

                entity.Property(e => e.Idtarifa).HasColumnName("IDTARIFA");

                entity.Property(e => e.Importeivaprodalmuerzo).HasColumnName("IMPORTEIVAPRODALMUERZO");

                entity.Property(e => e.Importeivaprodalojamiento).HasColumnName("IMPORTEIVAPRODALOJAMIENTO");

                entity.Property(e => e.Importeivaprodcena).HasColumnName("IMPORTEIVAPRODCENA");

                entity.Property(e => e.Importeivaproddesayuno).HasColumnName("IMPORTEIVAPRODDESAYUNO");

                entity.Property(e => e.Importeprodalmuerzo).HasColumnName("IMPORTEPRODALMUERZO");

                entity.Property(e => e.Importeprodalojamiento).HasColumnName("IMPORTEPRODALOJAMIENTO");

                entity.Property(e => e.Importeprodcena).HasColumnName("IMPORTEPRODCENA");

                entity.Property(e => e.Importeproddesayuno).HasColumnName("IMPORTEPRODDESAYUNO");

                entity.Property(e => e.Numpersonas).HasColumnName("NUMPERSONAS");

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.Property(e => e.Paxalmuerzo).HasColumnName("PAXALMUERZO");

                entity.Property(e => e.Paxalmuerzobebe).HasColumnName("PAXALMUERZOBEBE");

                entity.Property(e => e.Paxalmuerzonen).HasColumnName("PAXALMUERZONEN");

                entity.Property(e => e.Paxbebe).HasColumnName("PAXBEBE");

                entity.Property(e => e.Paxcena).HasColumnName("PAXCENA");

                entity.Property(e => e.Paxcenabebe).HasColumnName("PAXCENABEBE");

                entity.Property(e => e.Paxcenanen).HasColumnName("PAXCENANEN");

                entity.Property(e => e.Paxdesayuno).HasColumnName("PAXDESAYUNO");

                entity.Property(e => e.Paxdesayunobebe).HasColumnName("PAXDESAYUNOBEBE");

                entity.Property(e => e.Paxdesayunonen).HasColumnName("PAXDESAYUNONEN");

                entity.Property(e => e.Paxnen).HasColumnName("PAXNEN");

                entity.Property(e => e.Porcalmuerzo).HasColumnName("PORCALMUERZO");

                entity.Property(e => e.Porcalojamiento).HasColumnName("PORCALOJAMIENTO");

                entity.Property(e => e.Porccena).HasColumnName("PORCCENA");

                entity.Property(e => e.Porcdesayuno).HasColumnName("PORCDESAYUNO");

                entity.Property(e => e.Porcdtobebe).HasColumnName("PORCDTOBEBE");

                entity.Property(e => e.Porcdtonen).HasColumnName("PORCDTONEN");

                entity.Property(e => e.Primerservicio).HasColumnName("PRIMERSERVICIO");

                entity.Property(e => e.Regimen)
                    .HasColumnName("REGIMEN")
                    .HasMaxLength(6);

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.HasOne(d => d.Hreserva)
                    .WithMany(p => p.Hreservaslins)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("HRESERVAS_HRESERVASLIN");
            });

            modelBuilder.Entity<Hreservaslincomentariosservicio>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo, e.Codservicio, e.Codcomentario, e.Comentariolibre })
                    .HasName("HRESERVASLINCOMENTARIOSSERVICIO_PK");

                entity.ToTable("HRESERVASLINCOMENTARIOSSERVICIO");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Codservicio).HasColumnName("CODSERVICIO");

                entity.Property(e => e.Codcomentario).HasColumnName("CODCOMENTARIO");

                entity.Property(e => e.Comentariolibre)
                    .HasColumnName("COMENTARIOLIBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Espack).HasColumnName("ESPACK");

                entity.Property(e => e.Pax)
                    .HasColumnName("PAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paxbebe)
                    .HasColumnName("PAXBEBE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paxnen)
                    .HasColumnName("PAXNEN")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Hreservaslin)
                    .WithMany(p => p.Hreservaslincomentariosservicios)
                    .HasForeignKey(d => new { d.Idhotel, d.Serie, d.Idreserva, d.Idlinea, d.Idperiodo })
                    .HasConstraintName("HRESERVASLINCOMENTARIOSSERVICIO_FK1");
            });

            modelBuilder.Entity<HresultadosDispositivo>(entity =>
            {
                entity.ToTable("HRESULTADOS_DISPOSITIVOS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Respuesta)
                    .HasColumnName("RESPUESTA")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Hserviciosregiman>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("HSERVICIOSREGIMEN_PK");

                entity.ToTable("HSERVICIOSREGIMEN");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Hsuplemento>(entity =>
            {
                entity.ToTable("HSUPLEMENTOS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aplicable).HasColumnName("APLICABLE");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Diasaplicable)
                    .HasColumnName("DIASAPLICABLE")
                    .HasMaxLength(7);

                entity.Property(e => e.Numdias).HasColumnName("NUMDIAS");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipocalculo).HasColumnName("TIPOCALCULO");

                entity.Property(e => e.Tiposuplemento).HasColumnName("TIPOSUPLEMENTO");
            });

            modelBuilder.Entity<Htareashabitacion>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Idhotel, e.Idplanta, e.Idhabitacion, e.Start })
                    .HasName("HTAREASHABITACION_PK");

                entity.ToTable("HTAREASHABITACION");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idplanta).HasColumnName("IDPLANTA");

                entity.Property(e => e.Idhabitacion).HasColumnName("IDHABITACION");

                entity.Property(e => e.Start)
                    .HasColumnName("START")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Duracion)
                    .HasColumnName("DURACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechavalidacion)
                    .HasColumnName("FECHAVALIDACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Opcionesfin)
                    .HasColumnName("OPCIONESFIN")
                    .HasMaxLength(10);

                entity.Property(e => e.Opcionesinicio)
                    .HasColumnName("OPCIONESINICIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Resume)
                    .HasColumnName("RESUME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stop)
                    .HasColumnName("STOP")
                    .HasColumnType("datetime");

                entity.Property(e => e.Validado).HasColumnName("VALIDADO");

                entity.Property(e => e.Validadopor).HasColumnName("VALIDADOPOR");
            });

            modelBuilder.Entity<Htiposbloqueo>(entity =>
            {
                entity.ToTable("HTIPOSBLOQUEO");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Htiposvip>(entity =>
            {
                entity.ToTable("HTIPOSVIP");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Huellascliente>(entity =>
            {
                entity.HasKey(e => e.Codcliente)
                    .HasName("HUELLASCLIENTE_PK");

                entity.ToTable("HUELLASCLIENTE");

                entity.Property(e => e.Codcliente)
                    .HasColumnName("CODCLIENTE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Huella)
                    .HasColumnName("HUELLA")
                    .HasColumnType("image");

                entity.Property(e => e.Huella2)
                    .HasColumnName("HUELLA2")
                    .HasColumnType("image");

                entity.Property(e => e.Huella2x64)
                    .HasColumnName("HUELLA2X64")
                    .HasColumnType("image");

                entity.Property(e => e.Huellatxt1)
                    .HasColumnName("HUELLATXT1")
                    .HasMaxLength(4000);

                entity.Property(e => e.Huellatxt2)
                    .HasColumnName("HUELLATXT2")
                    .HasMaxLength(4000);

                entity.Property(e => e.Huellax64)
                    .HasColumnName("HUELLAX64")
                    .HasColumnType("image");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithOne(p => p.Huellascliente)
                    .HasForeignKey<Huellascliente>(d => d.Codcliente)
                    .HasConstraintName("HUELLAS_CLIENTE_FK");
            });

            modelBuilder.Entity<Huellasvendedor>(entity =>
            {
                entity.HasKey(e => e.Codvendedor)
                    .HasName("HUELLASVENDEDOR_PK");

                entity.ToTable("HUELLASVENDEDOR");

                entity.Property(e => e.Codvendedor)
                    .HasColumnName("CODVENDEDOR")
                    .ValueGeneratedNever();

                entity.Property(e => e.Huella)
                    .HasColumnName("HUELLA")
                    .HasColumnType("image");

                entity.Property(e => e.Huella2)
                    .HasColumnName("HUELLA2")
                    .HasColumnType("image");

                entity.Property(e => e.Huella2x64)
                    .HasColumnName("HUELLA2X64")
                    .HasColumnType("image");

                entity.Property(e => e.Huellatxt1)
                    .HasColumnName("HUELLATXT1")
                    .HasMaxLength(4000);

                entity.Property(e => e.Huellatxt2)
                    .HasColumnName("HUELLATXT2")
                    .HasMaxLength(4000);

                entity.Property(e => e.Huellax64)
                    .HasColumnName("HUELLAX64")
                    .HasColumnType("image");

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithOne(p => p.Huellasvendedor)
                    .HasForeignKey<Huellasvendedor>(d => d.Codvendedor)
                    .HasConstraintName("HUELLASVENDEDOR_FK");
            });

            modelBuilder.Entity<Icgcentralitaerr>(entity =>
            {
                entity.HasKey(e => e.Idlog)
                    .HasName("ICGCENTRALITAERR_PK");

                entity.ToTable("ICGCENTRALITAERR");

                entity.Property(e => e.Idlog).HasColumnName("IDLOG");

                entity.Property(e => e.Cadena)
                    .HasColumnName("CADENA")
                    .HasMaxLength(250);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(250);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Icgcentralitum>(entity =>
            {
                entity.HasKey(e => e.Idlog)
                    .HasName("ICGCENTRALITA_PK");

                entity.ToTable("ICGCENTRALITA");

                entity.HasIndex(e => new { e.Fecha, e.Horainicio, e.Exportada, e.Tipollamada, e.Extension })
                    .HasName("ICGCENTRALITA_FECHA");

                entity.Property(e => e.Idlog).HasColumnName("IDLOG");

                entity.Property(e => e.Descartada)
                    .HasColumnName("DESCARTADA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Exportada).HasColumnName("EXPORTADA");

                entity.Property(e => e.Extension).HasColumnName("EXTENSION");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numero)
                    .HasColumnName("NUMERO")
                    .HasMaxLength(25);

                entity.Property(e => e.Pasos).HasColumnName("PASOS");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Tiempo)
                    .HasColumnName("TIEMPO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tipollamada)
                    .HasColumnName("TIPOLLAMADA")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Icgconsultassql>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Icgconsulta, e.Tipo, e.Tipoparam, e.Nombreparam, e.Ncampo, e.Iconsulta })
                    .HasName("ICGCONSULTASSQL_PK");

                entity.ToTable("ICGCONSULTASSQL");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Icgconsulta).HasColumnName("ICGCONSULTA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipoparam)
                    .HasColumnName("TIPOPARAM")
                    .HasMaxLength(9)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Nombreparam)
                    .HasColumnName("NOMBREPARAM")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Ncampo).HasColumnName("NCAMPO");

                entity.Property(e => e.Iconsulta)
                    .HasColumnName("ICONSULTA")
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NO')");

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(150);

                entity.HasOne(d => d.Icgnombresinforme)
                    .WithMany(p => p.Icgconsultassqls)
                    .HasForeignKey(d => new { d.Grupo, d.Icgconsulta })
                    .HasConstraintName("ICGCONSULTASSQL_FK");
            });

            modelBuilder.Entity<Icgdocumento>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Informe, e.Numelemento })
                    .HasName("ICGDOCUMENTOS_PK");

                entity.ToTable("ICGDOCUMENTOS");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Informe).HasColumnName("INFORME");

                entity.Property(e => e.Numelemento).HasColumnName("NUMELEMENTO");

                entity.Property(e => e.Alignment).HasColumnName("ALIGNMENT");

                entity.Property(e => e.Backcolor)
                    .HasColumnName("BACKCOLOR")
                    .HasDefaultValueSql("((16777215))");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(4000);

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Fontbold)
                    .HasColumnName("FONTBOLD")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontcolor).HasColumnName("FONTCOLOR");

                entity.Property(e => e.Fontitalic)
                    .HasColumnName("FONTITALIC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontname)
                    .HasColumnName("FONTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontsize).HasColumnName("FONTSIZE");

                entity.Property(e => e.Fontstrikeout)
                    .HasColumnName("FONTSTRIKEOUT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontunderline)
                    .HasColumnName("FONTUNDERLINE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Height).HasColumnName("HEIGHT");

                entity.Property(e => e.Justificacion).HasColumnName("JUSTIFICACION");

                entity.Property(e => e.Linecolor).HasColumnName("LINECOLOR");

                entity.Property(e => e.Linestyle).HasColumnName("LINESTYLE");

                entity.Property(e => e.Mascara)
                    .HasColumnName("MASCARA")
                    .HasMaxLength(20);

                entity.Property(e => e.Nivelgrupo).HasColumnName("NIVELGRUPO");

                entity.Property(e => e.Numbanda).HasColumnName("NUMBANDA");

                entity.Property(e => e.Posx).HasColumnName("POSX");

                entity.Property(e => e.Shapestyle)
                    .HasColumnName("SHAPESTYLE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Tipoelemento).HasColumnName("TIPOELEMENTO");

                entity.Property(e => e.Toptop).HasColumnName("TOPTOP");

                entity.Property(e => e.Width).HasColumnName("WIDTH");

                entity.HasOne(d => d.Nombresdocsid)
                    .WithMany(p => p.Icgdocumentos)
                    .HasForeignKey(d => new { d.Grupo, d.Informe })
                    .HasConstraintName("ICGDOCUMENTOS_FK");
            });

            modelBuilder.Entity<Icgetiqueta>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Etiqueta, e.Numelemento })
                    .HasName("ICGETIQUETAS_PK");

                entity.ToTable("ICGETIQUETAS");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Etiqueta).HasColumnName("ETIQUETA");

                entity.Property(e => e.Numelemento).HasColumnName("NUMELEMENTO");

                entity.Property(e => e.Alignment).HasColumnName("ALIGNMENT");

                entity.Property(e => e.Backcolor)
                    .HasColumnName("BACKCOLOR")
                    .HasDefaultValueSql("((16777215))");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(200);

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Fontbold)
                    .HasColumnName("FONTBOLD")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontcolor).HasColumnName("FONTCOLOR");

                entity.Property(e => e.Fontitalic)
                    .HasColumnName("FONTITALIC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontname)
                    .HasColumnName("FONTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontsize).HasColumnName("FONTSIZE");

                entity.Property(e => e.Fontstrikeout)
                    .HasColumnName("FONTSTRIKEOUT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontunderline)
                    .HasColumnName("FONTUNDERLINE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Height).HasColumnName("HEIGHT");

                entity.Property(e => e.Justificacion).HasColumnName("JUSTIFICACION");

                entity.Property(e => e.Linecolor).HasColumnName("LINECOLOR");

                entity.Property(e => e.Linestyle).HasColumnName("LINESTYLE");

                entity.Property(e => e.Mascara)
                    .HasColumnName("MASCARA")
                    .HasMaxLength(20);

                entity.Property(e => e.Posx).HasColumnName("POSX");

                entity.Property(e => e.Shapestyle)
                    .HasColumnName("SHAPESTYLE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tipoelemento).HasColumnName("TIPOELEMENTO");

                entity.Property(e => e.Toptop).HasColumnName("TOPTOP");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.Property(e => e.Width).HasColumnName("WIDTH");

                entity.HasOne(d => d.Icgnombresetiqueta)
                    .WithMany(p => p.Icgetiqueta)
                    .HasForeignKey(d => new { d.Grupo, d.Etiqueta })
                    .HasConstraintName("ICGETIQUETAS_FK");
            });

            modelBuilder.Entity<Icginforme>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Informe, e.Numelemento })
                    .HasName("ICGINFORMES_PK");

                entity.ToTable("ICGINFORMES");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Informe).HasColumnName("INFORME");

                entity.Property(e => e.Numelemento).HasColumnName("NUMELEMENTO");

                entity.Property(e => e.Alignment).HasColumnName("ALIGNMENT");

                entity.Property(e => e.Backcolor)
                    .HasColumnName("BACKCOLOR")
                    .HasDefaultValueSql("((16777215))");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(200);

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Fontbold)
                    .HasColumnName("FONTBOLD")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontcolor).HasColumnName("FONTCOLOR");

                entity.Property(e => e.Fontitalic)
                    .HasColumnName("FONTITALIC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontname)
                    .HasColumnName("FONTNAME")
                    .HasMaxLength(25);

                entity.Property(e => e.Fontsize).HasColumnName("FONTSIZE");

                entity.Property(e => e.Fontstrikeout)
                    .HasColumnName("FONTSTRIKEOUT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fontunderline)
                    .HasColumnName("FONTUNDERLINE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Height).HasColumnName("HEIGHT");

                entity.Property(e => e.Justificacion).HasColumnName("JUSTIFICACION");

                entity.Property(e => e.Linecolor).HasColumnName("LINECOLOR");

                entity.Property(e => e.Linestyle).HasColumnName("LINESTYLE");

                entity.Property(e => e.Mascara)
                    .HasColumnName("MASCARA")
                    .HasMaxLength(20);

                entity.Property(e => e.Nivelgrupo).HasColumnName("NIVELGRUPO");

                entity.Property(e => e.Numbanda).HasColumnName("NUMBANDA");

                entity.Property(e => e.Posx).HasColumnName("POSX");

                entity.Property(e => e.Shapestyle)
                    .HasColumnName("SHAPESTYLE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Tipoelemento).HasColumnName("TIPOELEMENTO");

                entity.Property(e => e.Toptop).HasColumnName("TOPTOP");

                entity.Property(e => e.Width).HasColumnName("WIDTH");

                entity.HasOne(d => d.Icgnombresinforme)
                    .WithMany(p => p.Icginformes)
                    .HasForeignKey(d => new { d.Grupo, d.Informe })
                    .HasConstraintName("ICGINFORMES_FK");
            });

            modelBuilder.Entity<IcgmailCalculos1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS1");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos10>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS10");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos100>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS100");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos101>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS101");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos102>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS102");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos103>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS103");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos104>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS104");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos105>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS105");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos106>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS106");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos107>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS107");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos108>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS108");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos109>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS109");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos11>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS11");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos110>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS110");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS111");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos112>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS112");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos113>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS113");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos114>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS114");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos115>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS115");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos116>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS116");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos117>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS117");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos118>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS118");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos119>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS119");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos12>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS12");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos120>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS120");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos121>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS121");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos122>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS122");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos123>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS123");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos124>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS124");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos125>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS125");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos126>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS126");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos127>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS127");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos128>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS128");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos129>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS129");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos13>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS13");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos130>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS130");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos131>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS131");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos132>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS132");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos133>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS133");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos134>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS134");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos135>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS135");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos136>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS136");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos137>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS137");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos138>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS138");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos139>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS139");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos14>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS14");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos140>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS140");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos141>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS141");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos142>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS142");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos143>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS143");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos144>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS144");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos145>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS145");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos146>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS146");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos147>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS147");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos148>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS148");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos149>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS149");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos15>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS15");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos150>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS150");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos151>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS151");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos152>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS152");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos153>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS153");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos154>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS154");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos155>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS155");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos156>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS156");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos157>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS157");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos158>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS158");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos159>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS159");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos16>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS16");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos160>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS160");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos161>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS161");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos162>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS162");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos163>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS163");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos164>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS164");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos165>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS165");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos166>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS166");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos167>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS167");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos168>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS168");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos169>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS169");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos17>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS17");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos170>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS170");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos171>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS171");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos172>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS172");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos173>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS173");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos174>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS174");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos175>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS175");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos176>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS176");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos177>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS177");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos178>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS178");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos179>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS179");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos18>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS18");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos180>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS180");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos181>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS181");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos19>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS19");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS2");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos20>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS20");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos21>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS21");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos22>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS22");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos23>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS23");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos24>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS24");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos25>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS25");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos26>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS26");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos27>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS27");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos28>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS28");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos29>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS29");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS3");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos30>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS30");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos31>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS31");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos32>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS32");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos33>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS33");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos34>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS34");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos35>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS35");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos36>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS36");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos37>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS37");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos38>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS38");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos39>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS39");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS4");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos40>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS40");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos41>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS41");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos42>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS42");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos43>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS43");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos44>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS44");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos45>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS45");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos46>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS46");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos47>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS47");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos48>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS48");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos49>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS49");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos5>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS5");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos50>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS50");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos51>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS51");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos52>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS52");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos53>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS53");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos54>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS54");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos55>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS55");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos56>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS56");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos57>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS57");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos58>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS58");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos59>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS59");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos6>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS6");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos60>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS60");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos61>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS61");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos62>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS62");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos63>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS63");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos64>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS64");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos65>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS65");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos66>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS66");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos67>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS67");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos68>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS68");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos69>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS69");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos7>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS7");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos70>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS70");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos71>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS71");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos72>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS72");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos73>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS73");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos74>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS74");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos75>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS75");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos76>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS76");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos77>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS77");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos78>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS78");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos79>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS79");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos8>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS8");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos80>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS80");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos81>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS81");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos82>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS82");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos83>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS83");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos84>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS84");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos85>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS85");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos86>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS86");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos87>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS87");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos88>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS88");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos89>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS89");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos9>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS9");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos90>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS90");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos91>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS91");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos92>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS92");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos93>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS93");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos94>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS94");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos95>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS95");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos96>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS96");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos97>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS97");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos98>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS98");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<IcgmailCalculos99>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICGMAIL_CALCULOS99");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");
            });

            modelBuilder.Entity<Icgnombresetiqueta>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Diseny })
                    .HasName("ICGNOMBRESETIQUETAS_PK");

                entity.ToTable("ICGNOMBRESETIQUETAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_ICGNOMBRESETIQUETASVERSION");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Diseny).HasColumnName("DISENY");

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Icgnombresinforme>(entity =>
            {
                entity.HasKey(e => new { e.Codigogrupo, e.Codigoinforme })
                    .HasName("ICGNOMBRESINFORMES_PK");

                entity.ToTable("ICGNOMBRESINFORMES");

                entity.Property(e => e.Codigogrupo).HasColumnName("CODIGOGRUPO");

                entity.Property(e => e.Codigoinforme).HasColumnName("CODIGOINFORME");

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tienediseny).HasColumnName("TIENEDISENY");

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<Icgpreciosxprefijo>(entity =>
            {
                entity.HasKey(e => e.Prefijo)
                    .HasName("ICGPRECIOXPREFIJO_PK");

                entity.ToTable("ICGPRECIOSXPREFIJO");

                entity.Property(e => e.Prefijo)
                    .HasColumnName("PREFIJO")
                    .HasMaxLength(10);

                entity.Property(e => e.CargoInicial).HasColumnName("CARGO_INICIAL");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");
            });

            modelBuilder.Entity<IdArticulo>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Guidarticulo });

                entity.ToTable("ID_ARTICULOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Guidarticulo)
                    .HasColumnName("GUIDARTICULO")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Fechaunifica)
                    .HasColumnName("FECHAUNIFICA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Newcodarticulo).HasColumnName("NEWCODARTICULO");

                entity.Property(e => e.Newguidarticulo).HasColumnName("NEWGUIDARTICULO");

                entity.Property(e => e.Quienunifica).HasColumnName("QUIENUNIFICA");
            });

            modelBuilder.Entity<IdFavoritoscab>(entity =>
            {
                entity.HasKey(e => new { e.Codfavorito, e.Guidgrupofavorito });

                entity.ToTable("ID_FAVORITOSCAB");

                entity.Property(e => e.Codfavorito).HasColumnName("CODFAVORITO");

                entity.Property(e => e.Guidgrupofavorito)
                    .HasColumnName("GUIDGRUPOFAVORITO")
                    .HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.CodfavoritoNavigation)
                    .WithMany(p => p.IdFavoritoscabs)
                    .HasForeignKey(d => d.Codfavorito)
                    .HasConstraintName("FK_ID_FAVORITOSCAB_FAVORITOSCAB");
            });

            modelBuilder.Entity<IdVendedore>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Guidvendedor });

                entity.ToTable("ID_VENDEDORES");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Guidvendedor)
                    .HasColumnName("GUIDVENDEDOR")
                    .HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithMany(p => p.IdVendedores)
                    .HasForeignKey(d => d.Codvendedor)
                    .HasConstraintName("FK_ID_VENDEDORES");
            });

            modelBuilder.Entity<IdVenta>(entity =>
            {
                entity.HasKey(e => e.Guidventa);

                entity.ToTable("ID_VENTAS");

                entity.Property(e => e.Guidventa)
                    .HasColumnName("GUIDVENTA")
                    .ValueGeneratedNever();

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Idioma>(entity =>
            {
                entity.HasKey(e => e.Codidioma)
                    .HasName("IDIOMAS_PK");

                entity.ToTable("IDIOMAS");

                entity.Property(e => e.Codidioma)
                    .HasColumnName("CODIDIOMA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codiso6391)
                    .HasColumnName("CODISO6391")
                    .HasMaxLength(2);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<IeAtributo>(entity =>
            {
                entity.HasKey(e => new { e.IdDimension, e.IdAtributo })
                    .HasName("IE_ATRIBUTOS_PK");

                entity.ToTable("IE_ATRIBUTOS");

                entity.Property(e => e.IdDimension).HasColumnName("ID_DIMENSION");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.Generar)
                    .IsRequired()
                    .HasColumnName("GENERAR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdOrigenRelacional).HasColumnName("ID_ORIGEN_RELACIONAL");

                entity.Property(e => e.IdTitulo)
                    .HasColumnName("ID_TITULO")
                    .HasMaxLength(255);

                entity.Property(e => e.NameOrigenOrderBy)
                    .HasColumnName("NAME_ORIGEN_ORDER_BY")
                    .HasMaxLength(255);

                entity.Property(e => e.NumRegistros).HasColumnName("NUM_REGISTROS");

                entity.Property(e => e.TipoAtributo)
                    .HasColumnName("TIPO_ATRIBUTO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ValorDefecto)
                    .HasColumnName("VALOR_DEFECTO")
                    .HasMaxLength(255);

                entity.Property(e => e.Visible)
                    .IsRequired()
                    .HasColumnName("VISIBLE")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdDimensionNavigation)
                    .WithMany(p => p.IeAtributos)
                    .HasForeignKey(d => d.IdDimension)
                    .HasConstraintName("IE_ATRIBUTOS_DIMENSIONES_FK");

                entity.HasOne(d => d.IdOrigenRelacionalNavigation)
                    .WithMany(p => p.IeAtributos)
                    .HasForeignKey(d => d.IdOrigenRelacional)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("IE_ATRIBUTOS_CAMPOS_RELACIONALES_FK");
            });

            modelBuilder.Entity<IeAtributosGraficaSb>(entity =>
            {
                entity.HasKey(e => new { e.IdScoreboard, e.IdGraficaSb, e.IdDimension, e.IdAtributo })
                    .HasName("IE_ATRIBUTOS_GRAFICA_CM_PK");

                entity.ToTable("IE_ATRIBUTOS_GRAFICA_SB");

                entity.Property(e => e.IdScoreboard).HasColumnName("ID_SCOREBOARD");

                entity.Property(e => e.IdGraficaSb).HasColumnName("ID_GRAFICA_SB");

                entity.Property(e => e.IdDimension).HasColumnName("ID_DIMENSION");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.IeAtributosGraficaSbs)
                    .HasForeignKey(d => new { d.IdDimension, d.IdAtributo })
                    .HasConstraintName("IE_ATRIBUTOS_GRAFICA_CM_ATRIBUTO_FK");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.IeAtributosGraficaSbs)
                    .HasForeignKey(d => new { d.IdScoreboard, d.IdGraficaSb })
                    .HasConstraintName("IE_ATRIBUTOS_GRAFICA_CM_FK");
            });

            modelBuilder.Entity<IeCamposOrigenesRelacionale>(entity =>
            {
                entity.HasKey(e => new { e.IdCampoRelacional, e.IdOrigenRelacional })
                    .HasName("IE_CAMPOS_ORIGENES_RELACIONALES_PK");

                entity.ToTable("IE_CAMPOS_ORIGENES_RELACIONALES");

                entity.Property(e => e.IdCampoRelacional).HasColumnName("ID_CAMPO_RELACIONAL");

                entity.Property(e => e.IdOrigenRelacional).HasColumnName("ID_ORIGEN_RELACIONAL");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.HasOne(d => d.IdCampoRelacionalNavigation)
                    .WithMany(p => p.IeCamposOrigenesRelacionales)
                    .HasForeignKey(d => d.IdCampoRelacional)
                    .HasConstraintName("IE_CAMPOS_ORIGENES_RELACIONALES_CAMPO_FK");

                entity.HasOne(d => d.IdOrigenRelacionalNavigation)
                    .WithMany(p => p.IeCamposOrigenesRelacionales)
                    .HasForeignKey(d => d.IdOrigenRelacional)
                    .HasConstraintName("IE_CAMPOS_ORIGENES_RELACIONALES_ORIGEN_FK");
            });

            modelBuilder.Entity<IeCamposRelacionale>(entity =>
            {
                entity.HasKey(e => e.IdCampoRelacional)
                    .HasName("IE_CAMPOS_RELACIONALES_PK");

                entity.ToTable("IE_CAMPOS_RELACIONALES");

                entity.Property(e => e.IdCampoRelacional)
                    .HasColumnName("ID_CAMPO_RELACIONAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.CampoRelacional)
                    .IsRequired()
                    .HasColumnName("CAMPO_RELACIONAL")
                    .HasMaxLength(100);

                entity.Property(e => e.TablaRelacional)
                    .IsRequired()
                    .HasColumnName("TABLA_RELACIONAL")
                    .HasMaxLength(100);

                entity.Property(e => e.Tamanyo).HasColumnName("TAMANYO");

                entity.Property(e => e.TipoRelacional).HasColumnName("TIPO_RELACIONAL");
            });

            modelBuilder.Entity<IeConexione>(entity =>
            {
                entity.HasKey(e => e.IdConexion)
                    .HasName("IE_CONEXIONES_PK");

                entity.ToTable("IE_CONEXIONES");

                entity.Property(e => e.IdConexion)
                    .HasColumnName("ID_CONEXION")
                    .ValueGeneratedNever();

                entity.Property(e => e.ContrasenyaBd)
                    .HasColumnName("CONTRASENYA_BD")
                    .HasMaxLength(255);

                entity.Property(e => e.NombreBd)
                    .IsRequired()
                    .HasColumnName("NOMBRE_BD")
                    .HasMaxLength(255);

                entity.Property(e => e.ServidorBd)
                    .IsRequired()
                    .HasColumnName("SERVIDOR_BD")
                    .HasMaxLength(255);

                entity.Property(e => e.UsuarioBd)
                    .HasColumnName("USUARIO_BD")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<IeControlesInforme>(entity =>
            {
                entity.HasKey(e => new { e.IdInforme, e.IdControlInforme })
                    .HasName("IE_CONTROLES_INFORMES_PK");

                entity.ToTable("IE_CONTROLES_INFORMES");

                entity.Property(e => e.IdInforme).HasColumnName("ID_INFORME");

                entity.Property(e => e.IdControlInforme).HasColumnName("ID_CONTROL_INFORME");

                entity.Property(e => e.BitsConfiguracion)
                    .HasColumnName("BITS_CONFIGURACION")
                    .HasMaxLength(25);

                entity.Property(e => e.Configuracion)
                    .HasColumnName("CONFIGURACION")
                    .HasColumnType("image");

                entity.Property(e => e.EsTabla).HasColumnName("ES_TABLA");

                entity.Property(e => e.FechaAct)
                    .HasColumnName("FECHA_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaFin)
                    .HasColumnName("FECHA_FIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaFinComparar)
                    .HasColumnName("FECHA_FIN_COMPARAR")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaIni)
                    .HasColumnName("FECHA_INI")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaIniComparar)
                    .HasColumnName("FECHA_INI_COMPARAR")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCubo)
                    .HasColumnName("ID_CUBO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IndicePrimerValor)
                    .HasColumnName("INDICE_PRIMER_VALOR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MostrarOtros).HasColumnName("MOSTRAR_OTROS");

                entity.Property(e => e.NumValues)
                    .HasColumnName("NUM_VALUES")
                    .HasDefaultValueSql("((10))");

                entity.Property(e => e.Peores).HasColumnName("PEORES");

                entity.Property(e => e.SizeX)
                    .HasColumnName("SIZE_X")
                    .HasDefaultValueSql("((1013))");

                entity.Property(e => e.SizeY)
                    .HasColumnName("SIZE_Y")
                    .HasDefaultValueSql("((655))");

                entity.Property(e => e.TipoComparar)
                    .HasColumnName("TIPO_COMPARAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoPeriodo)
                    .HasColumnName("TIPO_PERIODO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Top10).HasColumnName("TOP_10");

                entity.HasOne(d => d.IdCuboNavigation)
                    .WithMany(p => p.IeControlesInformes)
                    .HasForeignKey(d => d.IdCubo)
                    .HasConstraintName("IE_CONTROLES_INFORMES_CUBOS_FK");

                entity.HasOne(d => d.IdInformeNavigation)
                    .WithMany(p => p.IeControlesInformes)
                    .HasForeignKey(d => d.IdInforme)
                    .HasConstraintName("IE_CONTROLES_INFORMES_FK");
            });

            modelBuilder.Entity<IeCubo>(entity =>
            {
                entity.HasKey(e => e.IdCubo)
                    .HasName("IE_CUBOS_PK");

                entity.ToTable("IE_CUBOS");

                entity.Property(e => e.IdCubo)
                    .HasColumnName("ID_CUBO")
                    .ValueGeneratedNever();

                entity.Property(e => e.CantidadFrecuenciaActualizacion).HasColumnName("CANTIDAD_FRECUENCIA_ACTUALIZACION");

                entity.Property(e => e.HoraActualizacion)
                    .HasColumnName("HORA_ACTUALIZACION")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(CONVERT([datetime],'00:00:00',(108)))");

                entity.Property(e => e.IdConexion).HasColumnName("ID_CONEXION");

                entity.Property(e => e.NombreCubo)
                    .IsRequired()
                    .HasColumnName("NOMBRE_CUBO")
                    .HasMaxLength(255);

                entity.Property(e => e.TituloCubo)
                    .IsRequired()
                    .HasColumnName("TITULO_CUBO")
                    .HasMaxLength(255);

                entity.Property(e => e.UnidadFrecuenciaActualizacion)
                    .HasColumnName("UNIDAD_FRECUENCIA_ACTUALIZACION")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdConexionNavigation)
                    .WithMany(p => p.IeCubos)
                    .HasForeignKey(d => d.IdConexion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("IE_CUBOS_FK");
            });

            modelBuilder.Entity<IeDimensione>(entity =>
            {
                entity.HasKey(e => e.IdDimension)
                    .HasName("IE_DIMENSIONES_PK");

                entity.ToTable("IE_DIMENSIONES");

                entity.Property(e => e.IdDimension)
                    .HasColumnName("ID_DIMENSION")
                    .ValueGeneratedNever();

                entity.Property(e => e.EsDimensionTiempo).HasColumnName("ES_DIMENSION_TIEMPO");

                entity.Property(e => e.IdTitulo)
                    .HasColumnName("ID_TITULO")
                    .HasMaxLength(255);

                entity.Property(e => e.IdTituloTodos)
                    .HasColumnName("ID_TITULO_TODOS")
                    .HasMaxLength(255);

                entity.Property(e => e.IdTituloVacio)
                    .HasColumnName("ID_TITULO_VACIO")
                    .HasMaxLength(255);

                entity.Property(e => e.NameDimension)
                    .IsRequired()
                    .HasColumnName("NAME_DIMENSION")
                    .HasMaxLength(100);

                entity.Property(e => e.SqlTablasOrigen)
                    .IsRequired()
                    .HasColumnName("SQL_TABLAS_ORIGEN")
                    .HasMaxLength(4000);

                entity.Property(e => e.TablasOrigen)
                    .IsRequired()
                    .HasColumnName("TABLAS_ORIGEN")
                    .HasMaxLength(4000);

                entity.Property(e => e.Visible)
                    .IsRequired()
                    .HasColumnName("VISIBLE")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<IeDimensionesCubo>(entity =>
            {
                entity.HasKey(e => new { e.IdDimension, e.IdCubo })
                    .HasName("IE_DIMENSIONES_CUBOS_PK");

                entity.ToTable("IE_DIMENSIONES_CUBOS");

                entity.Property(e => e.IdDimension).HasColumnName("ID_DIMENSION");

                entity.Property(e => e.IdCubo).HasColumnName("ID_CUBO");

                entity.Property(e => e.Generar)
                    .IsRequired()
                    .HasColumnName("GENERAR")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdCuboNavigation)
                    .WithMany(p => p.IeDimensionesCubos)
                    .HasForeignKey(d => d.IdCubo)
                    .HasConstraintName("IE_DIMENSIONES_CUBOS_CUBOS_FK");

                entity.HasOne(d => d.IdDimensionNavigation)
                    .WithMany(p => p.IeDimensionesCubos)
                    .HasForeignKey(d => d.IdDimension)
                    .HasConstraintName("IE_DIMENSIONES_CUBOS_DIMENSIONES_FK");
            });

            modelBuilder.Entity<IeFiltrosCuboSb>(entity =>
            {
                entity.HasKey(e => new { e.IdScoreboard, e.IdGraficaSb, e.IdFiltroCuboSb })
                    .HasName("IE_FILTROS_CUBO_CM_PK");

                entity.ToTable("IE_FILTROS_CUBO_SB");

                entity.Property(e => e.IdScoreboard).HasColumnName("ID_SCOREBOARD");

                entity.Property(e => e.IdGraficaSb).HasColumnName("ID_GRAFICA_SB");

                entity.Property(e => e.IdFiltroCuboSb).HasColumnName("ID_FILTRO_CUBO_SB");

                entity.Property(e => e.Comparador).HasColumnName("COMPARADOR");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdDimension).HasColumnName("ID_DIMENSION");

                entity.Property(e => e.IdJerarquia).HasColumnName("ID_JERARQUIA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.IeFiltrosCuboSbs)
                    .HasForeignKey(d => new { d.IdScoreboard, d.IdGraficaSb })
                    .HasConstraintName("IE_FILTROS_CUBO_CM_FK");
            });

            modelBuilder.Entity<IeFiltrosOrigen>(entity =>
            {
                entity.HasKey(e => new { e.IdCubo, e.IdFiltroOrigen })
                    .HasName("IE_FILTROS_ORIGEN_PK");

                entity.ToTable("IE_FILTROS_ORIGEN");

                entity.Property(e => e.IdCubo).HasColumnName("ID_CUBO");

                entity.Property(e => e.IdFiltroOrigen).HasColumnName("ID_FILTRO_ORIGEN");

                entity.Property(e => e.Comparador).HasColumnName("COMPARADOR");

                entity.Property(e => e.IdCampoRelacional).HasColumnName("ID_CAMPO_RELACIONAL");

                entity.HasOne(d => d.IdCampoRelacionalNavigation)
                    .WithMany(p => p.IeFiltrosOrigens)
                    .HasForeignKey(d => d.IdCampoRelacional)
                    .HasConstraintName("IE_FILTROS_ORIGEN_CAMPOS_RELACIONALES_FK");

                entity.HasOne(d => d.IdCuboNavigation)
                    .WithMany(p => p.IeFiltrosOrigens)
                    .HasForeignKey(d => d.IdCubo)
                    .HasConstraintName("IE_FILTROS_ORIGEN_CUBOS_FK");
            });

            modelBuilder.Entity<IeGrupo>(entity =>
            {
                entity.HasKey(e => e.IdGrupo)
                    .HasName("IE_GRUPOS_PK");

                entity.ToTable("IE_GRUPOS");

                entity.Property(e => e.IdGrupo)
                    .HasColumnName("ID_GRUPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasColumnName("TITULO")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<IeGruposMedida>(entity =>
            {
                entity.HasKey(e => new { e.IdCubo, e.IdGrupoMedida })
                    .HasName("IE_GRUPOS_MEDIDAS_PK");

                entity.ToTable("IE_GRUPOS_MEDIDAS");

                entity.Property(e => e.IdCubo).HasColumnName("ID_CUBO");

                entity.Property(e => e.IdGrupoMedida).HasColumnName("ID_GRUPO_MEDIDA");

                entity.Property(e => e.IdTitulo)
                    .HasColumnName("ID_TITULO")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(100);

                entity.Property(e => e.NumRegistros).HasColumnName("NUM_REGISTROS");

                entity.HasOne(d => d.IdCuboNavigation)
                    .WithMany(p => p.IeGruposMedida)
                    .HasForeignKey(d => d.IdCubo)
                    .HasConstraintName("IE_GRUPOS_MEDIDAS_FK");
            });

            modelBuilder.Entity<IeGruposMedidasMetrica>(entity =>
            {
                entity.HasKey(e => new { e.IdCubo, e.IdGrupoMedida, e.IdHecho, e.IdMetrica })
                    .HasName("IE_GRUPOS_MEDIDAS_METRICAS_PK");

                entity.ToTable("IE_GRUPOS_MEDIDAS_METRICAS");

                entity.Property(e => e.IdCubo).HasColumnName("ID_CUBO");

                entity.Property(e => e.IdGrupoMedida).HasColumnName("ID_GRUPO_MEDIDA");

                entity.Property(e => e.IdHecho).HasColumnName("ID_HECHO");

                entity.Property(e => e.IdMetrica).HasColumnName("ID_METRICA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.IeGruposMedidasMetricas)
                    .HasForeignKey(d => new { d.IdCubo, d.IdGrupoMedida })
                    .HasConstraintName("IE_GRUPOS_MEDIDAS_METRICAS_GRUPOS_MEDIDAS_FK");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.IeGruposMedidasMetricas)
                    .HasForeignKey(d => new { d.IdHecho, d.IdMetrica })
                    .HasConstraintName("IE_GRUPOS_MEDIDAS_METRICAS_METRICAS_FK");
            });

            modelBuilder.Entity<IeHecho>(entity =>
            {
                entity.HasKey(e => e.IdHecho)
                    .HasName("IE_HECHOS_PK");

                entity.ToTable("IE_HECHOS");

                entity.Property(e => e.IdHecho)
                    .HasColumnName("ID_HECHO")
                    .ValueGeneratedNever();

                entity.Property(e => e.CondicionesWhere)
                    .IsRequired()
                    .HasColumnName("CONDICIONES_WHERE")
                    .HasMaxLength(4000);

                entity.Property(e => e.IdTitulo)
                    .HasColumnName("ID_TITULO")
                    .HasMaxLength(255);

                entity.Property(e => e.NameHecho)
                    .IsRequired()
                    .HasColumnName("NAME_HECHO")
                    .HasMaxLength(100);

                entity.Property(e => e.SqlTablasOrigen)
                    .IsRequired()
                    .HasColumnName("SQL_TABLAS_ORIGEN")
                    .HasMaxLength(4000);

                entity.Property(e => e.TablasOrigen)
                    .IsRequired()
                    .HasColumnName("TABLAS_ORIGEN")
                    .HasMaxLength(4000);

                entity.Property(e => e.Visible)
                    .IsRequired()
                    .HasColumnName("VISIBLE")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<IeHechosCubo>(entity =>
            {
                entity.HasKey(e => new { e.IdHecho, e.IdCubo })
                    .HasName("IE_HECHOS_CUBOS_PK");

                entity.ToTable("IE_HECHOS_CUBOS");

                entity.Property(e => e.IdHecho).HasColumnName("ID_HECHO");

                entity.Property(e => e.IdCubo).HasColumnName("ID_CUBO");

                entity.HasOne(d => d.IdCuboNavigation)
                    .WithMany(p => p.IeHechosCubos)
                    .HasForeignKey(d => d.IdCubo)
                    .HasConstraintName("IE_HECHOS_CUBOS_CUBOS_FK");

                entity.HasOne(d => d.IdHechoNavigation)
                    .WithMany(p => p.IeHechosCubos)
                    .HasForeignKey(d => d.IdHecho)
                    .HasConstraintName("IE_HECHOS_CUBOS_HECHOS_FK");
            });

            modelBuilder.Entity<IeInforme>(entity =>
            {
                entity.HasKey(e => e.IdInforme)
                    .HasName("IE_INFORMES_PK");

                entity.ToTable("IE_INFORMES");

                entity.Property(e => e.IdInforme)
                    .HasColumnName("ID_INFORME")
                    .ValueGeneratedNever();

                entity.Property(e => e.IdGrupo).HasColumnName("ID_GRUPO");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdGrupoNavigation)
                    .WithMany(p => p.IeInformes)
                    .HasForeignKey(d => d.IdGrupo)
                    .HasConstraintName("IE_INFORMES_FK");
            });

            modelBuilder.Entity<IeJerarquia>(entity =>
            {
                entity.HasKey(e => new { e.IdDimension, e.IdJerarquia })
                    .HasName("IE_JERARQUIAS_PK");

                entity.ToTable("IE_JERARQUIAS");

                entity.Property(e => e.IdDimension).HasColumnName("ID_DIMENSION");

                entity.Property(e => e.IdJerarquia).HasColumnName("ID_JERARQUIA");

                entity.Property(e => e.IdTitulo)
                    .HasColumnName("ID_TITULO")
                    .HasMaxLength(255);

                entity.Property(e => e.NameJerarquia)
                    .IsRequired()
                    .HasColumnName("NAME_JERARQUIA")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdDimensionNavigation)
                    .WithMany(p => p.IeJerarquia)
                    .HasForeignKey(d => d.IdDimension)
                    .HasConstraintName("IE_JERARQUIAS_FK");
            });

            modelBuilder.Entity<IeMetrica>(entity =>
            {
                entity.HasKey(e => new { e.IdHecho, e.IdMetrica })
                    .HasName("IE_METRICAS_PK");

                entity.ToTable("IE_METRICAS");

                entity.Property(e => e.IdHecho).HasColumnName("ID_HECHO");

                entity.Property(e => e.IdMetrica).HasColumnName("ID_METRICA");

                entity.Property(e => e.Formula)
                    .HasColumnName("FORMULA")
                    .HasMaxLength(4000);

                entity.Property(e => e.Funcion).HasColumnName("FUNCION");

                entity.Property(e => e.IdOrigenRelacional).HasColumnName("ID_ORIGEN_RELACIONAL");

                entity.Property(e => e.IdTitulo)
                    .HasColumnName("ID_TITULO")
                    .HasMaxLength(255);

                entity.Property(e => e.IsCalculo).HasColumnName("IS_CALCULO");

                entity.Property(e => e.Mascara)
                    .HasColumnName("MASCARA")
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(100);

                entity.Property(e => e.Visible)
                    .IsRequired()
                    .HasColumnName("VISIBLE")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdHechoNavigation)
                    .WithMany(p => p.IeMetricas)
                    .HasForeignKey(d => d.IdHecho)
                    .HasConstraintName("IE_METRICAS_HECHOS_FK");

                entity.HasOne(d => d.IdOrigenRelacionalNavigation)
                    .WithMany(p => p.IeMetricas)
                    .HasForeignKey(d => d.IdOrigenRelacional)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("IE_METRICAS_ORIGENES_RELACIONALES_FK");
            });

            modelBuilder.Entity<IeMetricasGraficaSb>(entity =>
            {
                entity.HasKey(e => new { e.IdScoreboard, e.IdGraficaSb, e.IdHecho, e.IdMetrica })
                    .HasName("IE_METRICAS_GRAFICA_CM_PK");

                entity.ToTable("IE_METRICAS_GRAFICA_SB");

                entity.Property(e => e.IdScoreboard).HasColumnName("ID_SCOREBOARD");

                entity.Property(e => e.IdGraficaSb).HasColumnName("ID_GRAFICA_SB");

                entity.Property(e => e.IdHecho).HasColumnName("ID_HECHO");

                entity.Property(e => e.IdMetrica).HasColumnName("ID_METRICA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.IeMetricasGraficaSbs)
                    .HasForeignKey(d => new { d.IdHecho, d.IdMetrica })
                    .HasConstraintName("IE_METRICAS_GRAFICA_CM_METRICA_FK");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.IeMetricasGraficaSbs)
                    .HasForeignKey(d => new { d.IdScoreboard, d.IdGraficaSb })
                    .HasConstraintName("IE_METRICAS_GRAFICA_CM_FK");
            });

            modelBuilder.Entity<IeOrigenesRelacionale>(entity =>
            {
                entity.HasKey(e => e.IdOrigenRelacional)
                    .HasName("IE_ORIGENES_RELACIONALES_PK");

                entity.ToTable("IE_ORIGENES_RELACIONALES");

                entity.Property(e => e.IdOrigenRelacional)
                    .HasColumnName("ID_ORIGEN_RELACIONAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Formula)
                    .HasColumnName("FORMULA")
                    .HasMaxLength(4000);

                entity.Property(e => e.NameOrigen)
                    .IsRequired()
                    .HasColumnName("NAME_ORIGEN")
                    .HasMaxLength(100);

                entity.Property(e => e.Tamanyo).HasColumnName("TAMANYO");

                entity.Property(e => e.TipoRelacional).HasColumnName("TIPO_RELACIONAL");
            });

            modelBuilder.Entity<IeTimeIntelligence>(entity =>
            {
                entity.HasKey(e => new { e.IdInforme, e.IdControlInforme, e.IdHecho, e.IdMetrica, e.IdDimension, e.IdJerarquia, e.IdAtributo, e.HastaFecha })
                    .HasName("IE_TIME_INTELLIGENCE_PK");

                entity.ToTable("IE_TIME_INTELLIGENCE");

                entity.Property(e => e.IdInforme).HasColumnName("ID_INFORME");

                entity.Property(e => e.IdControlInforme).HasColumnName("ID_CONTROL_INFORME");

                entity.Property(e => e.IdHecho).HasColumnName("ID_HECHO");

                entity.Property(e => e.IdMetrica).HasColumnName("ID_METRICA");

                entity.Property(e => e.IdDimension).HasColumnName("ID_DIMENSION");

                entity.Property(e => e.IdJerarquia)
                    .HasColumnName("ID_JERARQUIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.HastaFecha).HasColumnName("HASTA_FECHA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.IeTimeIntelligences)
                    .HasForeignKey(d => new { d.IdDimension, d.IdAtributo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("IE_TIME_INTELLIGENCE_ATRIBUTO_FK");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.IeTimeIntelligences)
                    .HasForeignKey(d => new { d.IdHecho, d.IdMetrica })
                    .HasConstraintName("IE_TIME_INTELLIGENCE_METRICA_FK");

                entity.HasOne(d => d.Id1)
                    .WithMany(p => p.IeTimeIntelligences)
                    .HasForeignKey(d => new { d.IdInforme, d.IdControlInforme })
                    .HasConstraintName("IE_TIME_INTELLIGENCE_CONTROLES_INFORMES_FK");
            });

            modelBuilder.Entity<IeUsuariosInforme>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdInforme })
                    .HasName("IE_USUARIOS_INFORMES_PK");

                entity.ToTable("IE_USUARIOS_INFORMES");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdInforme).HasColumnName("ID_INFORME");

                entity.HasOne(d => d.IdInformeNavigation)
                    .WithMany(p => p.IeUsuariosInformes)
                    .HasForeignKey(d => d.IdInforme)
                    .HasConstraintName("IE_USUARIOS_INFORMES_FK");
            });

            modelBuilder.Entity<IeValoresFiltrosCuboSb>(entity =>
            {
                entity.HasKey(e => new { e.IdScoreboard, e.IdGraficaSb, e.IdFiltroCuboSb, e.IdValorFiltroCuboSb })
                    .HasName("IE_VALORES_FILTROS_CUBO_CM_PK");

                entity.ToTable("IE_VALORES_FILTROS_CUBO_SB");

                entity.Property(e => e.IdScoreboard).HasColumnName("ID_SCOREBOARD");

                entity.Property(e => e.IdGraficaSb).HasColumnName("ID_GRAFICA_SB");

                entity.Property(e => e.IdFiltroCuboSb).HasColumnName("ID_FILTRO_CUBO_SB");

                entity.Property(e => e.IdValorFiltroCuboSb).HasColumnName("ID_VALOR_FILTRO_CUBO_SB");

                entity.Property(e => e.IdNivel).HasColumnName("ID_NIVEL");

                entity.Property(e => e.IdValorCompuesto)
                    .HasColumnName("ID_VALOR_COMPUESTO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasColumnName("VALOR")
                    .HasMaxLength(255);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.IeValoresFiltrosCuboSbs)
                    .HasForeignKey(d => new { d.IdScoreboard, d.IdGraficaSb, d.IdFiltroCuboSb })
                    .HasConstraintName("IE_VALORES_FILTROS_CUBO_CM_FK");
            });

            modelBuilder.Entity<IeValoresFiltrosOrigen>(entity =>
            {
                entity.HasKey(e => new { e.IdCubo, e.IdFiltroOrigen, e.IdValorFiltroOrigen })
                    .HasName("IE_VALORES_FILTROS_ORIGEN_PK");

                entity.ToTable("IE_VALORES_FILTROS_ORIGEN");

                entity.Property(e => e.IdCubo).HasColumnName("ID_CUBO");

                entity.Property(e => e.IdFiltroOrigen).HasColumnName("ID_FILTRO_ORIGEN");

                entity.Property(e => e.IdValorFiltroOrigen).HasColumnName("ID_VALOR_FILTRO_ORIGEN");

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasColumnName("VALOR")
                    .HasMaxLength(255);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.IeValoresFiltrosOrigens)
                    .HasForeignKey(d => new { d.IdCubo, d.IdFiltroOrigen })
                    .HasConstraintName("IE_VALORES_FILTROS_ORIGEN_FK");
            });

            modelBuilder.Entity<Imagenesusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Tipo })
                    .HasName("IMAGENESUSUARIO_PK");

                entity.ToTable("IMAGENESUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<Impresiondoc>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Id })
                    .HasName("IMPRESIONDOC_PK");

                entity.ToTable("IMPRESIONDOC");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_IMPRESIONDOCVERSION");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Booleandos)
                    .HasColumnName("BOOLEANDOS")
                    .HasMaxLength(15);

                entity.Property(e => e.Cerrado)
                    .HasColumnName("CERRADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Diseny)
                    .HasColumnName("DISENY")
                    .HasColumnType("image");

                entity.Property(e => e.Disenyver2)
                    .HasColumnName("DISENYVER2")
                    .HasColumnType("image");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idioma).HasColumnName("IDIOMA");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Ivainc)
                    .HasColumnName("IVAINC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Ncopias).HasColumnName("NCOPIAS");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Numerico1).HasColumnName("NUMERICO1");

                entity.Property(e => e.Numerico2).HasColumnName("NUMERICO2");

                entity.Property(e => e.Sql)
                    .HasColumnName("SQL")
                    .HasColumnType("ntext");

                entity.Property(e => e.Sqlfija)
                    .HasColumnName("SQLFIJA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Texto1)
                    .HasColumnName("TEXTO1")
                    .HasMaxLength(45);

                entity.Property(e => e.Texto2)
                    .HasColumnName("TEXTO2")
                    .HasMaxLength(45);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Ver)
                    .HasColumnName("VER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ImpresiondocGruposalmacen>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Id, e.Codgrupoalmacen })
                    .HasName("IMPRESIONDOC_GRUPOSALMACENPK");

                entity.ToTable("IMPRESIONDOC_GRUPOSALMACEN");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Codgrupoalmacen).HasColumnName("CODGRUPOALMACEN");

                entity.HasOne(d => d.Impresiondoc)
                    .WithMany(p => p.ImpresiondocGruposalmacens)
                    .HasForeignKey(d => new { d.Grupo, d.Id })
                    .HasConstraintName("FK_IMPRESIONDOC_GRUPOSALMACENCLAVE");
            });

            modelBuilder.Entity<Impresionparking>(entity =>
            {
                entity.HasKey(e => e.Idterminal)
                    .HasName("IMPRESIONPARKING_PK");

                entity.ToTable("IMPRESIONPARKING");

                entity.Property(e => e.Idterminal)
                    .HasColumnName("IDTERMINAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alineacion)
                    .HasColumnName("ALINEACION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Texto1)
                    .HasColumnName("TEXTO1")
                    .HasMaxLength(40);

                entity.Property(e => e.Texto2)
                    .HasColumnName("TEXTO2")
                    .HasMaxLength(40);

                entity.Property(e => e.Texto3)
                    .HasColumnName("TEXTO3")
                    .HasMaxLength(40);

                entity.Property(e => e.Texto4)
                    .HasColumnName("TEXTO4")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Impresora>(entity =>
            {
                entity.HasKey(e => e.Nombreimpresora)
                    .HasName("IMPRESORAS_PK");

                entity.ToTable("IMPRESORAS");

                entity.Property(e => e.Nombreimpresora)
                    .HasColumnName("NOMBREIMPRESORA")
                    .HasMaxLength(60);

                entity.Property(e => e.Nombreformato)
                    .HasColumnName("NOMBREFORMATO")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<Impuesto>(entity =>
            {
                entity.HasKey(e => e.Tipoiva)
                    .HasName("IMPUESTOS_PK");

                entity.ToTable("IMPUESTOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_IMPUESTOSVERSION");

                entity.Property(e => e.Tipoiva)
                    .HasColumnName("TIPOIVA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aplicaciontasa2)
                    .HasColumnName("APLICACIONTASA2")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Codigoimpuesto)
                    .HasColumnName("CODIGOIMPUESTO")
                    .HasMaxLength(10);

                entity.Property(e => e.Cuentaivarep)
                    .HasColumnName("CUENTAIVAREP")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaivarepdevol)
                    .HasColumnName("CUENTAIVAREPDEVOL")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaivasop)
                    .HasColumnName("CUENTAIVASOP")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaivasopdevol)
                    .HasColumnName("CUENTAIVASOPDEVOL")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentarecrep)
                    .HasColumnName("CUENTARECREP")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentarecsop)
                    .HasColumnName("CUENTARECSOP")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuota).HasColumnName("CUOTA");

                entity.Property(e => e.DescTipoImpuestoAena)
                    .HasColumnName("DESC_TIPO_IMPUESTO_AENA")
                    .HasMaxLength(30);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Futurodesde1)
                    .HasColumnName("FUTURODESDE1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Futurodesde2)
                    .HasColumnName("FUTURODESDE2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Futuroiva1).HasColumnName("FUTUROIVA1");

                entity.Property(e => e.Futuroiva2).HasColumnName("FUTUROIVA2");

                entity.Property(e => e.Futuroreq1).HasColumnName("FUTUROREQ1");

                entity.Property(e => e.Futuroreq2).HasColumnName("FUTUROREQ2");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Motexencion)
                    .HasColumnName("MOTEXENCION")
                    .HasMaxLength(3);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.TipoImpuestoAena).HasColumnName("TIPO_IMPUESTO_AENA");

                entity.Property(e => e.Tipoivarelacionado).HasColumnName("TIPOIVARELACIONADO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Incidencia>(entity =>
            {
                entity.HasKey(e => e.Idincidencia)
                    .HasName("INCIDENCIAS_PK");

                entity.ToTable("INCIDENCIAS");

                entity.Property(e => e.Idincidencia).HasColumnName("IDINCIDENCIA");

                entity.Property(e => e.Calculadoencentral)
                    .HasColumnName("CALCULADOENCENTRAL")
                    .HasMaxLength(1);

                entity.Property(e => e.Ccodtransporte).HasColumnName("CCODTRANSPORTE");

                entity.Property(e => e.Cfecha)
                    .HasColumnName("CFECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cfechaentrega)
                    .HasColumnName("CFECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cnumero).HasColumnName("CNUMERO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmacendestino)
                    .HasColumnName("CODALMACENDESTINO")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codmonedacentral).HasColumnName("CODMONEDACENTRAL");

                entity.Property(e => e.Codmonedacliente).HasColumnName("CODMONEDACLIENTE");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Comentario1)
                    .HasColumnName("COMENTARIO1")
                    .HasColumnType("ntext");

                entity.Property(e => e.Comentario2)
                    .HasColumnName("COMENTARIO2")
                    .HasColumnType("ntext");

                entity.Property(e => e.Comentario3)
                    .HasColumnName("COMENTARIO3")
                    .HasColumnType("ntext");

                entity.Property(e => e.Cserie)
                    .HasColumnName("CSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Csupedido)
                    .HasColumnName("CSUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Ctipodoc).HasColumnName("CTIPODOC");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idfrontdest).HasColumnName("IDFRONTDEST");

                entity.Property(e => e.Idfrontorig).HasColumnName("IDFRONTORIG");

                entity.Property(e => e.Idincidenciaorig).HasColumnName("IDINCIDENCIAORIG");

                entity.Property(e => e.Idmotivo).HasColumnName("IDMOTIVO");

                entity.Property(e => e.Pfecha)
                    .HasColumnName("PFECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pnumero).HasColumnName("PNUMERO");

                entity.Property(e => e.Pserie)
                    .HasColumnName("PSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Ptipodoc).HasColumnName("PTIPODOC");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Totalconivacentral).HasColumnName("TOTALCONIVACENTRAL");

                entity.Property(e => e.Totalconivacliente).HasColumnName("TOTALCONIVACLIENTE");

                entity.Property(e => e.Totalsinivacentral).HasColumnName("TOTALSINIVACENTRAL");

                entity.Property(e => e.Totalsinivacliente).HasColumnName("TOTALSINIVACLIENTE");
            });

            modelBuilder.Entity<IncidenciasE>(entity =>
            {
                entity.HasKey(e => e.Idtipo)
                    .HasName("INCIDENCIAS_ES_PK");

                entity.ToTable("INCIDENCIAS_ES");

                entity.Property(e => e.Idtipo)
                    .HasColumnName("IDTIPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Incidenciasconfig>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Estado })
                    .HasName("INCIDENCIASCONFIG_PK");

                entity.ToTable("INCIDENCIASCONFIG");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Tipodocumento).HasColumnName("TIPODOCUMENTO");
            });

            modelBuilder.Entity<Incidenciaslin>(entity =>
            {
                entity.HasKey(e => new { e.Idincidencia, e.Idlinea })
                    .HasName("INCIDENCIASLIN_PK");

                entity.ToTable("INCIDENCIASLIN");

                entity.Property(e => e.Idincidencia).HasColumnName("IDINCIDENCIA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codtarifacentral).HasColumnName("CODTARIFACENTRAL");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Descripartic)
                    .HasColumnName("DESCRIPARTIC")
                    .HasMaxLength(40);

                entity.Property(e => e.Diferencia)
                    .HasColumnName("DIFERENCIA")
                    .HasMaxLength(1);

                entity.Property(e => e.Idmotivo).HasColumnName("IDMOTIVO");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Totalcentral).HasColumnName("TOTALCENTRAL");

                entity.Property(e => e.Totalcliente).HasColumnName("TOTALCLIENTE");

                entity.Property(e => e.Udscli1).HasColumnName("UDSCLI1");

                entity.Property(e => e.Udscli2).HasColumnName("UDSCLI2");

                entity.Property(e => e.Udscli3).HasColumnName("UDSCLI3");

                entity.Property(e => e.Udscli4).HasColumnName("UDSCLI4");

                entity.Property(e => e.Udsprov1).HasColumnName("UDSPROV1");

                entity.Property(e => e.Udsprov2).HasColumnName("UDSPROV2");

                entity.Property(e => e.Udsprov3).HasColumnName("UDSPROV3");

                entity.Property(e => e.Udsprov4).HasColumnName("UDSPROV4");

                entity.HasOne(d => d.IdincidenciaNavigation)
                    .WithMany(p => p.Incidenciaslins)
                    .HasForeignKey(d => d.Idincidencia)
                    .HasConstraintName("INCIDENCIASLIN_FK");
            });

            modelBuilder.Entity<Incidenciasnoautovalidable>(entity =>
            {
                entity.HasKey(e => e.Idincidencia)
                    .HasName("INCIDENCIASNOAUTOVALIDABLES_PK");

                entity.ToTable("INCIDENCIASNOAUTOVALIDABLES");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Problemas)
                    .HasColumnName("PROBLEMAS")
                    .HasColumnType("ntext");

                entity.HasOne(d => d.IdincidenciaNavigation)
                    .WithOne(p => p.Incidenciasnoautovalidable)
                    .HasForeignKey<Incidenciasnoautovalidable>(d => d.Idincidencia)
                    .HasConstraintName("INCIDENCIASNOAUTOVALIDABLES_FK");
            });

            modelBuilder.Entity<Informe>(entity =>
            {
                entity.HasKey(e => e.Idinforme)
                    .HasName("INFORME_PK");

                entity.ToTable("INFORME");

                entity.HasIndex(e => e.Versiones)
                    .HasName("IDX_INFORMEVERSIONES");

                entity.Property(e => e.Idinforme)
                    .HasColumnName("IDINFORME")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descargado)
                    .HasColumnName("DESCARGADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idtipo).HasColumnName("IDTIPO");

                entity.Property(e => e.Informe1)
                    .HasColumnName("INFORME")
                    .HasColumnType("image");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Remoto)
                    .HasColumnName("REMOTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .HasMaxLength(10);

                entity.Property(e => e.Versiones)
                    .HasColumnName("VERSIONES")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Informecolumna>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Posicion })
                    .HasName("INFORMECOLUMNAS_PK");

                entity.ToTable("INFORMECOLUMNAS");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Agrupado).HasColumnName("AGRUPADO");

                entity.Property(e => e.Ancho).HasColumnName("ANCHO");

                entity.Property(e => e.Caption)
                    .HasColumnName("CAPTION")
                    .HasMaxLength(25);

                entity.Property(e => e.Mascara)
                    .HasColumnName("MASCARA")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombrecampo)
                    .HasColumnName("NOMBRECAMPO")
                    .HasMaxLength(30);

                entity.Property(e => e.Orden)
                    .HasColumnName("ORDEN")
                    .HasMaxLength(6);

                entity.Property(e => e.Posvisible).HasColumnName("POSVISIBLE");

                entity.Property(e => e.Rowindex)
                    .HasColumnName("ROWINDEX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sumarizado)
                    .HasColumnName("SUMARIZADO")
                    .HasMaxLength(10);

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.Informecolumnas)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("INFORMECOLUMNAS_FK");
            });

            modelBuilder.Entity<Informefiltro>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Numfiltro })
                    .HasName("INFORMEFILTROS_PK");

                entity.ToTable("INFORMEFILTROS");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Numfiltro).HasColumnName("NUMFILTRO");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(30);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(15);

                entity.Property(e => e.Valorfinal)
                    .HasColumnName("VALORFINAL")
                    .HasMaxLength(50);

                entity.Property(e => e.Valorinicial)
                    .HasColumnName("VALORINICIAL")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.Informefiltros)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("INFORMEFILTROS_FK");
            });

            modelBuilder.Entity<Informeparametro>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Numparametro })
                    .HasName("INFORMEPARAMETROS_PK");

                entity.ToTable("INFORMEPARAMETROS");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Numparametro).HasColumnName("NUMPARAMETRO");

                entity.Property(e => e.Camposeleccion)
                    .HasColumnName("CAMPOSELECCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Caption)
                    .HasColumnName("CAPTION")
                    .HasMaxLength(30);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(30);

                entity.Property(e => e.Preguntar)
                    .HasColumnName("PREGUNTAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seleccion)
                    .HasColumnName("SELECCION")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipocampo)
                    .HasColumnName("TIPOCAMPO")
                    .HasMaxLength(15);

                entity.Property(e => e.Valordef)
                    .HasColumnName("VALORDEF")
                    .HasMaxLength(30);

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.Informeparametros)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("INFORMEPARAMETROS_FK");
            });

            modelBuilder.Entity<Informestyc>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Informe, e.Numelemento })
                    .HasName("INFORMESTYC_PK");

                entity.ToTable("INFORMESTYC");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Informe).HasColumnName("INFORME");

                entity.Property(e => e.Numelemento).HasColumnName("NUMELEMENTO");

                entity.Property(e => e.Alignment).HasColumnName("ALIGNMENT");

                entity.Property(e => e.Backcolor)
                    .HasColumnName("BACKCOLOR")
                    .HasDefaultValueSql("((16777215))");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(200);

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Fontbold)
                    .HasColumnName("FONTBOLD")
                    .HasMaxLength(1);

                entity.Property(e => e.Fontcolor).HasColumnName("FONTCOLOR");

                entity.Property(e => e.Fontitalic)
                    .HasColumnName("FONTITALIC")
                    .HasMaxLength(1);

                entity.Property(e => e.Fontname)
                    .HasColumnName("FONTNAME")
                    .HasMaxLength(25);

                entity.Property(e => e.Fontsize).HasColumnName("FONTSIZE");

                entity.Property(e => e.Fontstrikeout)
                    .HasColumnName("FONTSTRIKEOUT")
                    .HasMaxLength(1);

                entity.Property(e => e.Fontunderline)
                    .HasColumnName("FONTUNDERLINE")
                    .HasMaxLength(1);

                entity.Property(e => e.Height).HasColumnName("HEIGHT");

                entity.Property(e => e.Justificacion).HasColumnName("JUSTIFICACION");

                entity.Property(e => e.Linecolor).HasColumnName("LINECOLOR");

                entity.Property(e => e.Linestyle).HasColumnName("LINESTYLE");

                entity.Property(e => e.Mascara)
                    .HasColumnName("MASCARA")
                    .HasMaxLength(20);

                entity.Property(e => e.Nivelgrupo).HasColumnName("NIVELGRUPO");

                entity.Property(e => e.Numbanda).HasColumnName("NUMBANDA");

                entity.Property(e => e.Posx).HasColumnName("POSX");

                entity.Property(e => e.Shapestyle)
                    .HasColumnName("SHAPESTYLE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Tipoelemento).HasColumnName("TIPOELEMENTO");

                entity.Property(e => e.Toptop).HasColumnName("TOPTOP");

                entity.Property(e => e.Width).HasColumnName("WIDTH");

                entity.HasOne(d => d.Icgnombresinforme)
                    .WithMany(p => p.Informestycs)
                    .HasForeignKey(d => new { d.Grupo, d.Informe })
                    .HasConstraintName("INFORMESTYC_FK");
            });

            modelBuilder.Entity<Interese>(entity =>
            {
                entity.HasKey(e => e.Codinteres)
                    .HasName("INTERESES_PK");

                entity.ToTable("INTERESES");

                entity.Property(e => e.Codinteres)
                    .HasColumnName("CODINTERES")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Intervalosrappel>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Codrappel, e.Codintervalo })
                    .HasName("INTERVALOSRAPPELS_PK");

                entity.ToTable("INTERVALOSRAPPELS");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codrappel).HasColumnName("CODRAPPEL");

                entity.Property(e => e.Codintervalo).HasColumnName("CODINTERVALO");

                entity.Property(e => e.Desde).HasColumnName("DESDE");

                entity.Property(e => e.Hasta).HasColumnName("HASTA");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Intervalosrappels)
                    .HasForeignKey(d => new { d.Codproveedor, d.Codrappel })
                    .HasConstraintName("INTERVALOSRAPPELS_FK");
            });

            modelBuilder.Entity<Inventario>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Codalmacen })
                    .HasName("INVENTARIOS_PK");

                entity.ToTable("INVENTARIOS");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Bloqueado)
                    .HasColumnName("BLOQUEADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Completo)
                    .HasColumnName("COMPLETO")
                    .HasMaxLength(1);

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Escierre)
                    .HasColumnName("ESCIERRE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Inicial)
                    .HasColumnName("INICIAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Metodo).HasColumnName("METODO");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn).HasColumnName("TIPOVALORACIONDMN");
            });

            modelBuilder.Entity<Inventarioszona>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Codalmacen, e.Zona })
                    .HasName("INVENTARIOSZONAPK");

                entity.ToTable("INVENTARIOSZONA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Zona)
                    .HasColumnName("ZONA")
                    .HasMaxLength(50);

                entity.Property(e => e.Recuento).HasColumnName("RECUENTO");

                entity.HasOne(d => d.Inventario)
                    .WithMany(p => p.Inventarioszonas)
                    .HasForeignKey(d => new { d.Fecha, d.Codalmacen })
                    .HasConstraintName("INVENTARIOSZONAFK");
            });

            modelBuilder.Entity<ItAc>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("AC_PK");

                entity.ToTable("IT_AC");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Automatico)
                    .HasColumnName("AUTOMATICO")
                    .HasMaxLength(1);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Descargar)
                    .HasColumnName("DESCARGAR")
                    .HasMaxLength(1);

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Entransito)
                    .HasColumnName("ENTRANSITO")
                    .HasMaxLength(3);

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esbarra)
                    .HasColumnName("ESBARRA")
                    .HasMaxLength(1);

                entity.Property(e => e.Esdevolucion)
                    .HasColumnName("ESDEVOLUCION")
                    .HasMaxLength(1);

                entity.Property(e => e.Esunprestamo)
                    .HasColumnName("ESUNPRESTAMO")
                    .HasMaxLength(1);

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecharecepcion)
                    .HasColumnName("FECHARECEPCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horacocina)
                    .HasColumnName("HORACOCINA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horatotal)
                    .HasColumnName("HORATOTAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Impresiones).HasColumnName("IMPRESIONES");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1);

                entity.Property(e => e.Mesa).HasColumnName("MESA");

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1);

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1);

                entity.Property(e => e.Numcomensales).HasColumnName("NUMCOMENSALES");

                entity.Property(e => e.Numeroasunto).HasColumnName("NUMEROASUNTO");

                entity.Property(e => e.Numfac).HasColumnName("NUMFAC");

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Numseriefac)
                    .HasColumnName("NUMSERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Porc).HasColumnName("PORC");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1);

                entity.Property(e => e.Puntosacum).HasColumnName("PUNTOSACUM");

                entity.Property(e => e.Puntoscanjeados).HasColumnName("PUNTOSCANJEADOS");

                entity.Property(e => e.Sala).HasColumnName("SALA");

                entity.Property(e => e.Seleccionado)
                    .HasColumnName("SELECCIONADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieasunto)
                    .HasColumnName("SERIEASUNTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Sualbaran)
                    .HasColumnName("SUALBARAN")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipodocfac).HasColumnName("TIPODOCFAC");

                entity.Property(e => e.Tiquet)
                    .HasColumnName("TIQUET")
                    .HasMaxLength(1);

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcoste2).HasColumnName("TOTALCOSTE2");

                entity.Property(e => e.Totalcosteiva).HasColumnName("TOTALCOSTEIVA");

                entity.Property(e => e.Totalcosteiva2).HasColumnName("TOTALCOSTEIVA2");

                entity.Property(e => e.Totalimpuestos).HasColumnName("TOTALIMPUESTOS");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");

                entity.Property(e => e.Totalpuntos).HasColumnName("TOTALPUNTOS");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totporc).HasColumnName("TOTPORC");

                entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");

                entity.Property(e => e.Traspasado)
                    .HasColumnName("TRASPASADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Vienedefo)
                    .HasColumnName("VIENEDEFO")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<ItAl>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin })
                    .HasName("AL_PK");

                entity.ToTable("IT_AL");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.AbonodeN)
                    .HasColumnName("ABONODE_N")
                    .HasMaxLength(1);

                entity.Property(e => e.AbonodeNumalbaran).HasColumnName("ABONODE_NUMALBARAN");

                entity.Property(e => e.AbonodeNumserie)
                    .HasColumnName("ABONODE_NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Abonodelinea).HasColumnName("ABONODELINEA");

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codmacro).HasColumnName("CODMACRO");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Coste2).HasColumnName("COSTE2");

                entity.Property(e => e.Costeiva).HasColumnName("COSTEIVA");

                entity.Property(e => e.Costeiva2).HasColumnName("COSTEIVA2");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Detalledenumlinea).HasColumnName("DETALLEDENUMLINEA");

                entity.Property(e => e.Detallemodif).HasColumnName("DETALLEMODIF");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtoantespromocion).HasColumnName("DTOANTESPROMOCION");

                entity.Property(e => e.Expandida)
                    .HasColumnName("EXPANDIDA")
                    .HasMaxLength(1);

                entity.Property(e => e.Familiaaena).HasColumnName("FAMILIAAENA");

                entity.Property(e => e.Fechacaducidad)
                    .HasColumnName("FECHACADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horacocina)
                    .HasColumnName("HORACOCINA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idmotivoabono).HasColumnName("IDMOTIVOABONO");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importeantespromocion).HasColumnName("IMPORTEANTESPROMOCION");

                entity.Property(e => e.Importeantespromocioniva).HasColumnName("IMPORTEANTESPROMOCIONIVA");

                entity.Property(e => e.Importepromocion).HasColumnName("IMPORTEPROMOCION");

                entity.Property(e => e.Importepromocioniva).HasColumnName("IMPORTEPROMOCIONIVA");

                entity.Property(e => e.Isprecio2)
                    .HasColumnName("ISPRECIO2")
                    .HasMaxLength(1);

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lineaoculta)
                    .HasColumnName("LINEAOCULTA")
                    .HasMaxLength(1);

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Numkgexpansion).HasColumnName("NUMKGEXPANSION");

                entity.Property(e => e.Porcretencion).HasColumnName("PORCRETENCION");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Prestamo)
                    .HasColumnName("PRESTAMO")
                    .HasMaxLength(1);

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Stock).HasColumnName("STOCK");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipodelivery).HasColumnName("TIPODELIVERY");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Tiporetencion).HasColumnName("TIPORETENCION");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totalexpansion).HasColumnName("TOTALEXPANSION");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Udmedida2expansion).HasColumnName("UDMEDIDA2EXPANSION");

                entity.Property(e => e.Udsabonadas).HasColumnName("UDSABONADAS");

                entity.Property(e => e.Udsexpansion).HasColumnName("UDSEXPANSION");

                entity.Property(e => e.Unid1).HasColumnName("UNID1");

                entity.Property(e => e.Unid2).HasColumnName("UNID2");

                entity.Property(e => e.Unid3).HasColumnName("UNID3");

                entity.Property(e => e.Unid4).HasColumnName("UNID4");

                entity.Property(e => e.Unidadespagadas).HasColumnName("UNIDADESPAGADAS");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");
            });

            modelBuilder.Entity<ItAq>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_AQ");

                entity.Property(e => e.Acumulado).HasColumnName("ACUMULADO");

                entity.Property(e => e.Acumuladon).HasColumnName("ACUMULADON");

                entity.Property(e => e.Arqueo)
                    .IsRequired()
                    .HasColumnName("ARQUEO")
                    .HasMaxLength(1);

                entity.Property(e => e.Caja)
                    .IsRequired()
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cerrado).HasColumnName("CERRADO");

                entity.Property(e => e.Cleancashcontrolcode1)
                    .HasColumnName("CLEANCASHCONTROLCODE1")
                    .HasMaxLength(100);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Descuadre).HasColumnName("DESCUADRE");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasMaxLength(15);

                entity.Property(e => e.Importemesasabiertas).HasColumnName("IMPORTEMESASABIERTAS");

                entity.Property(e => e.Importeventasimpresas).HasColumnName("IMPORTEVENTASIMPRESAS");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numfacn).HasColumnName("NUMFACN");

                entity.Property(e => e.Numfacp).HasColumnName("NUMFACP");

                entity.Property(e => e.Nummesasabiertas).HasColumnName("NUMMESASABIERTAS");

                entity.Property(e => e.Numventasimpresas).HasColumnName("NUMVENTASIMPRESAS");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(255);

                entity.Property(e => e.Punteo).HasColumnName("PUNTEO");

                entity.Property(e => e.Seriefacn)
                    .HasColumnName("SERIEFACN")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefacp)
                    .HasColumnName("SERIEFACP")
                    .HasMaxLength(4);

                entity.Property(e => e.Sesion).HasColumnName("SESION");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<ItAt>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("AT_PK");

                entity.ToTable("IT_AT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");
            });

            modelBuilder.Entity<ItAvLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_AV_LOG");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.Numserie)
                    .IsRequired()
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Reg).HasColumnName("REG");
            });

            modelBuilder.Entity<ItBitacoraPrecio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_BITACORA_PRECIOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Pbruto)
                    .HasColumnName("PBRUTO")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Pneto)
                    .HasColumnName("PNETO")
                    .HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ItCliente>(entity =>
            {
                entity.HasKey(e => e.Rfc);

                entity.ToTable("IT_CLIENTES");

                entity.Property(e => e.Rfc)
                    .HasColumnName("RFC")
                    .HasMaxLength(13);

                entity.Property(e => e.Calle)
                    .HasColumnName("CALLE")
                    .HasMaxLength(250);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(10);

                entity.Property(e => e.Colonia)
                    .HasColumnName("COLONIA")
                    .HasMaxLength(250);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(250);

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasMaxLength(250);

                entity.Property(e => e.Municipio)
                    .HasColumnName("MUNICIPIO")
                    .HasMaxLength(250);

                entity.Property(e => e.Noext)
                    .HasColumnName("NOEXT")
                    .HasMaxLength(250);

                entity.Property(e => e.Noint)
                    .HasColumnName("NOINT")
                    .HasMaxLength(250);

                entity.Property(e => e.Nombrecliente)
                    .HasColumnName("NOMBRECLIENTE")
                    .HasMaxLength(250);

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(250);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(250);

                entity.Property(e => e.Telefono2)
                    .HasColumnName("TELEFONO2")
                    .HasMaxLength(250);

                entity.Property(e => e.Uso)
                    .HasColumnName("USO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItComprasFactura>(entity =>
            {
                entity.ToTable("IT_COMPRAS_FACTURA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Uuid)
                    .IsRequired()
                    .HasColumnName("UUID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItControl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_CONTROL");

                entity.Property(e => e.Control)
                    .HasColumnName("CONTROL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Val1)
                    .HasColumnName("VAL1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Val2)
                    .HasColumnName("VAL2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Val3)
                    .HasColumnName("VAL3")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItDocumentosca>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_DOCUMENTOSCA");

                entity.Property(e => e.Fechaalbaran)
                    .HasColumnName("FECHAALBARAN")
                    .HasMaxLength(30);

                entity.Property(e => e.Fechaproceso)
                    .HasColumnName("FECHAPROCESO")
                    .HasMaxLength(30);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.Numalbaranac).HasColumnName("NUMALBARANAC");

                entity.Property(e => e.Numalbaranav).HasColumnName("NUMALBARANAV");

                entity.Property(e => e.Numpedidoc).HasColumnName("NUMPEDIDOC");

                entity.Property(e => e.Numpedidov).HasColumnName("NUMPEDIDOV");

                entity.Property(e => e.Numserie)
                    .IsRequired()
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numserieac)
                    .IsRequired()
                    .HasColumnName("NUMSERIEAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Numserieav)
                    .IsRequired()
                    .HasColumnName("NUMSERIEAV")
                    .HasMaxLength(4);

                entity.Property(e => e.Numseriepc)
                    .IsRequired()
                    .HasColumnName("NUMSERIEPC")
                    .HasMaxLength(4);

                entity.Property(e => e.Numseriepv)
                    .IsRequired()
                    .HasColumnName("NUMSERIEPV")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<ItExistencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_EXISTENCIAS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Existencia)
                    .HasColumnName("EXISTENCIA")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importe)
                    .HasColumnName("IMPORTE")
                    .HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ItFacDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_FAC_DETALLE");

                entity.Property(e => e.Albaran).HasColumnName("ALBARAN");

                entity.Property(e => e.Codformapago).HasColumnName("CODFORMAPAGO");

                entity.Property(e => e.Dto)
                    .HasColumnName("DTO")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Folio).HasColumnName("FOLIO");

                entity.Property(e => e.Iva)
                    .HasColumnName("IVA")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Pg)
                    .HasColumnName("PG")
                    .HasColumnType("datetime");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Subtotal)
                    .HasColumnName("SUBTOTAL")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Subtotal2)
                    .HasColumnName("SUBTOTAL2")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tasa)
                    .HasColumnName("TASA")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Total)
                    .HasColumnName("TOTAL")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ItFt>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("FT_PK");

                entity.ToTable("IT_FT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");
            });

            modelBuilder.Entity<ItFv>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N })
                    .HasName("FV_PK");

                entity.ToTable("IT_FV");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Agrupacion).HasColumnName("AGRUPACION");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cambio).HasColumnName("CAMBIO");

                entity.Property(e => e.Cleancashcontrolcode1)
                    .HasColumnName("CLEANCASHCONTROLCODE1")
                    .HasMaxLength(100);

                entity.Property(e => e.Cleancashcontrolcode2)
                    .HasColumnName("CLEANCASHCONTROLCODE2")
                    .HasMaxLength(100);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Esentregaacuenta)
                    .HasColumnName("ESENTREGAACUENTA")
                    .HasMaxLength(1);

                entity.Property(e => e.Esinversion).HasColumnName("ESINVERSION");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1);

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1);

                entity.Property(e => e.Propina).HasColumnName("PROPINA");

                entity.Property(e => e.Sufactura)
                    .HasColumnName("SUFACTURA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcosteiva).HasColumnName("TOTALCOSTEIVA");

                entity.Property(e => e.Totalimpuestos).HasColumnName("TOTALIMPUESTOS");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");

                entity.Property(e => e.Totalretencion).HasColumnName("TOTALRETENCION");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");

                entity.Property(e => e.Traspasada)
                    .HasColumnName("TRASPASADA")
                    .HasMaxLength(1);

                entity.Property(e => e.Vendedormodificado).HasColumnName("VENDEDORMODIFICADO");

                entity.Property(e => e.Vienedefo)
                    .HasColumnName("VIENEDEFO")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<ItLog>(entity =>
            {
                entity.ToTable("IT_LOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .HasColumnName("MESSAGE")
                    .IsUnicode(false);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Op).HasColumnName("OP");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<ItLogOp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IT_LOG_OP");

                entity.Property(e => e.Entry)
                    .HasColumnName("ENTRY")
                    .HasColumnType("datetime");

                entity.Property(e => e.Val1)
                    .HasColumnName("VAL1")
                    .HasMaxLength(250);

                entity.Property(e => e.Val2)
                    .HasColumnName("VAL2")
                    .HasMaxLength(250);

                entity.Property(e => e.Val3)
                    .HasColumnName("VAL3")
                    .HasMaxLength(250);

                entity.Property(e => e.Val4)
                    .HasColumnName("VAL4")
                    .HasMaxLength(250);

                entity.Property(e => e.Val5)
                    .HasColumnName("VAL5")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ItMarca>(entity =>
            {
                entity.HasKey(e => e.Codmarca)
                    .HasName("PK_MARCA");

                entity.ToTable("IT_MARCA");

                entity.Property(e => e.Codmarca)
                    .HasColumnName("CODMARCA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<ItMod>(entity =>
            {
                entity.HasKey(e => e.Serie);

                entity.ToTable("IT_MOD");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Val)
                    .HasColumnName("VAL")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ItProducto>(entity =>
            {
                entity.HasKey(e => new { e.Rfc, e.NoIdentificacion });

                entity.ToTable("IT_PRODUCTOS");

                entity.Property(e => e.Rfc).HasMaxLength(13);

                entity.Property(e => e.NoIdentificacion).HasMaxLength(200);

                entity.Property(e => e.Codarticulo).HasColumnName("codarticulo");

                entity.Property(e => e.Uds)
                    .HasColumnName("UDS")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Umedida)
                    .HasColumnName("UMEDIDA")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItTe>(entity =>
            {
                entity.HasKey(e => new { e.Origen, e.Tipodocumento, e.Serie, e.Numero, e.N, e.Posicion })
                    .HasName("TE_PK")
                    .IsClustered(false);

                entity.ToTable("IT_TE");

                entity.Property(e => e.Origen)
                    .HasColumnName("ORIGEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodocumento)
                    .HasColumnName("TIPODOCUMENTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Bintarjeta)
                    .HasColumnName("BINTARJETA")
                    .HasMaxLength(6);

                entity.Property(e => e.Bloqueado)
                    .HasColumnName("BLOQUEADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Cajacartera)
                    .HasColumnName("CAJACARTERA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cajasaldado)
                    .HasColumnName("CAJASALDADO")
                    .HasMaxLength(3);

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codigointerno).HasColumnName("CODIGOINTERNO");

                entity.Property(e => e.Codimpuesto).HasColumnName("CODIMPUESTO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtipopago)
                    .HasColumnName("CODTIPOPAGO")
                    .HasMaxLength(2);

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Comentariovisible)
                    .HasColumnName("COMENTARIOVISIBLE")
                    .HasMaxLength(30);

                entity.Property(e => e.Compensacion).HasColumnName("COMPENSACION");

                entity.Property(e => e.Contrapartida)
                    .HasColumnName("CONTRAPARTIDA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuenta)
                    .HasColumnName("CUENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentagastos)
                    .HasColumnName("CUENTAGASTOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaiva)
                    .HasColumnName("CUENTAIVA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentapuente)
                    .HasColumnName("CUENTAPUENTE")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentareq)
                    .HasColumnName("CUENTAREQ")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuotaiva).HasColumnName("CUOTAIVA");

                entity.Property(e => e.Cuotareq).HasColumnName("CUOTAREQ");

                entity.Property(e => e.Descuadre).HasColumnName("DESCUADRE");

                entity.Property(e => e.EnlaceApunte).HasColumnName("ENLACE_APUNTE");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Factormonedareal).HasColumnName("FACTORMONEDAREAL");

                entity.Property(e => e.Fechacartera)
                    .HasColumnName("FECHACARTERA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechadescontado)
                    .HasColumnName("FECHADESCONTADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechadevuelto)
                    .HasColumnName("FECHADEVUELTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechadirecta)
                    .HasColumnName("FECHADIRECTA")
                    .HasMaxLength(1);

                entity.Property(e => e.Fechadocumento)
                    .HasColumnName("FECHADOCUMENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasaldado)
                    .HasColumnName("FECHASALDADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechavencimiento)
                    .HasColumnName("FECHAVENCIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Genapunte)
                    .HasColumnName("GENAPUNTE")
                    .HasMaxLength(15);

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importegastos).HasColumnName("IMPORTEGASTOS");

                entity.Property(e => e.Impreso)
                    .HasColumnName("IMPRESO")
                    .HasMaxLength(1);

                entity.Property(e => e.Marcaborrado)
                    .HasColumnName("MARCABORRADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Mora).HasColumnName("MORA");

                entity.Property(e => e.Multiple)
                    .HasColumnName("MULTIPLE")
                    .HasMaxLength(1);

                entity.Property(e => e.Numefecto)
                    .HasColumnName("NUMEFECTO")
                    .HasMaxLength(30);

                entity.Property(e => e.Numeroremesa).HasColumnName("NUMEROREMESA");

                entity.Property(e => e.Numrecibo).HasColumnName("NUMRECIBO");

                entity.Property(e => e.Numrtstef)
                    .HasColumnName("NUMRTSTEF")
                    .HasMaxLength(40);

                entity.Property(e => e.Numtxntef)
                    .HasColumnName("NUMTXNTEF")
                    .HasMaxLength(15);

                entity.Property(e => e.Porciva).HasColumnName("PORCIVA");

                entity.Property(e => e.Porcreq).HasColumnName("PORCREQ");

                entity.Property(e => e.Reposicion)
                    .HasColumnName("REPOSICION")
                    .HasMaxLength(1);

                entity.Property(e => e.Retencion).HasColumnName("RETENCION");

                entity.Property(e => e.Serierecibo)
                    .HasColumnName("SERIERECIBO")
                    .HasMaxLength(4);

                entity.Property(e => e.Sudocumento)
                    .HasColumnName("SUDOCUMENTO")
                    .HasMaxLength(15);

                entity.Property(e => e.Traspasado)
                    .HasColumnName("TRASPASADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.Property(e => e.Zcartera).HasColumnName("ZCARTERA");

                entity.Property(e => e.Zsaldado).HasColumnName("ZSALDADO");
            });

            modelBuilder.Entity<ItUsuario>(entity =>
            {
                entity.HasKey(e => e.Codusuario)
                    .HasName("PK_MAT_USUARIOS");

                entity.ToTable("IT_USUARIOS");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Departamento)
                    .HasColumnName("DEPARTAMENTO")
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasColumnName("NOMBRE")
                    .IsUnicode(false);

                entity.Property(e => e.Notas)
                    .HasColumnName("NOTAS")
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Kit>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color, e.Lineakit })
                    .HasName("KITS_PK");

                entity.ToTable("KITS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Lineakit).HasColumnName("LINEAKIT");

                entity.Property(e => e.Codartkit).HasColumnName("CODARTKIT");

                entity.Property(e => e.Colorkit)
                    .IsRequired()
                    .HasColumnName("COLORKIT")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(500);

                entity.Property(e => e.Descripciokit)
                    .HasColumnName("DESCRIPCIOKIT")
                    .HasMaxLength(40);

                entity.Property(e => e.Imprimirlinea)
                    .HasColumnName("IMPRIMIRLINEA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Preciounidad).HasColumnName("PRECIOUNIDAD");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Referenciakit)
                    .HasColumnName("REFERENCIAKIT")
                    .HasMaxLength(15);

                entity.Property(e => e.Tallakit)
                    .IsRequired()
                    .HasColumnName("TALLAKIT")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Totallinea).HasColumnName("TOTALLINEA");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Unidades2).HasColumnName("UNIDADES2");

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Kits)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("KITSARTICULOS_FK");
            });

            modelBuilder.Entity<Kitfase>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Numfase })
                    .HasName("KITFASESPK");

                entity.ToTable("KITFASES");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Numfase).HasColumnName("NUMFASE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Enbloque).HasColumnName("ENBLOQUE");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Numerosserie).HasColumnName("NUMEROSSERIE");
            });

            modelBuilder.Entity<Kpi>(entity =>
            {
                entity.HasKey(e => e.Idkpi);

                entity.ToTable("KPI");

                entity.Property(e => e.Idkpi)
                    .HasColumnName("IDKPI")
                    .ValueGeneratedNever();

                entity.Property(e => e.Detalledef).HasColumnName("DETALLEDEF");

                entity.Property(e => e.Esmedia).HasColumnName("ESMEDIA");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Sql)
                    .HasColumnName("SQL")
                    .HasMaxLength(1000);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tiporesultado).HasColumnName("TIPORESULTADO");

                entity.Property(e => e.Wheresql)
                    .HasColumnName("WHERESQL")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<KpiDetalle>(entity =>
            {
                entity.HasKey(e => e.Iddetalle);

                entity.ToTable("KPI_DETALLE");

                entity.Property(e => e.Iddetalle)
                    .HasColumnName("IDDETALLE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campodetalle)
                    .HasColumnName("CAMPODETALLE")
                    .HasMaxLength(100);

                entity.Property(e => e.Dominiodetallesql)
                    .HasColumnName("DOMINIODETALLESQL")
                    .HasMaxLength(1000);

                entity.Property(e => e.Joinsql)
                    .HasColumnName("JOINSQL")
                    .HasMaxLength(4000);

                entity.Property(e => e.Tabladetalle)
                    .HasColumnName("TABLADETALLE")
                    .HasMaxLength(100);

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<KpiDetallekpi>(entity =>
            {
                entity.HasKey(e => new { e.Idkpi, e.Iddetalle, e.Posicion });

                entity.ToTable("KPI_DETALLEKPI");

                entity.Property(e => e.Idkpi).HasColumnName("IDKPI");

                entity.Property(e => e.Iddetalle).HasColumnName("IDDETALLE");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.IdkpiNavigation)
                    .WithMany(p => p.KpiDetallekpis)
                    .HasForeignKey(d => d.Idkpi)
                    .HasConstraintName("FK_KPI_DETALLEKPI_KPI");
            });

            modelBuilder.Entity<KpiFiltro>(entity =>
            {
                entity.HasKey(e => e.Idfiltro);

                entity.ToTable("KPI_FILTRO");

                entity.Property(e => e.Idfiltro)
                    .HasColumnName("IDFILTRO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Campodesc)
                    .HasColumnName("CAMPODESC")
                    .HasMaxLength(100);

                entity.Property(e => e.Camposid)
                    .HasColumnName("CAMPOSID")
                    .HasMaxLength(300);

                entity.Property(e => e.Tablafiltro)
                    .HasColumnName("TABLAFILTRO")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<KpiFiltroDef>(entity =>
            {
                entity.HasKey(e => new { e.Idkpi, e.Idfiltro, e.Iddetalle });

                entity.ToTable("KPI_FILTRO_DEF");

                entity.Property(e => e.Idkpi).HasColumnName("IDKPI");

                entity.Property(e => e.Idfiltro).HasColumnName("IDFILTRO");

                entity.Property(e => e.Iddetalle).HasColumnName("IDDETALLE");

                entity.Property(e => e.Joinsql)
                    .HasColumnName("JOINSQL")
                    .HasMaxLength(1000);

                entity.Property(e => e.Wheresql)
                    .HasColumnName("WHERESQL")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.IdfiltroNavigation)
                    .WithMany(p => p.KpiFiltroDefs)
                    .HasForeignKey(d => d.Idfiltro)
                    .HasConstraintName("FK_KPI_FILTRODEF_KPI_FILTRO");

                entity.HasOne(d => d.IdkpiNavigation)
                    .WithMany(p => p.KpiFiltroDefs)
                    .HasForeignKey(d => d.Idkpi)
                    .HasConstraintName("FK_KPI_FILTRODEF_KPI");
            });

            modelBuilder.Entity<KpiUsuario>(entity =>
            {
                entity.HasKey(e => new { e.Idkpi, e.Codusuario, e.Posicion });

                entity.ToTable("KPI_USUARIO");

                entity.Property(e => e.Idkpi).HasColumnName("IDKPI");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.IdkpiNavigation)
                    .WithMany(p => p.KpiUsuarios)
                    .HasForeignKey(d => d.Idkpi)
                    .HasConstraintName("FK_KPI_USUARIO_KPI");
            });

            modelBuilder.Entity<LastsalesAlbventacab>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N })
                    .HasName("LASTSALES_ALBVENTACAB_PK");

                entity.ToTable("LASTSALES_ALBVENTACAB");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Esunprestamo)
                    .HasColumnName("ESUNPRESTAMO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LastsalesAlbventalin>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numalbaran, e.N, e.Numlin })
                    .HasName("LASTSALES_ALBVENTALIN_PK");

                entity.ToTable("LASTSALES_ALBVENTALIN");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numalbaran).HasColumnName("NUMALBARAN");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Expandida)
                    .HasColumnName("EXPANDIDA")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('F')");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioiva)
                    .HasColumnName("PRECIOIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totalexpansion).HasColumnName("TOTALEXPANSION");

                entity.Property(e => e.Udsexpansion).HasColumnName("UDSEXPANSION");

                entity.Property(e => e.Unid1)
                    .HasColumnName("UNID1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid2)
                    .HasColumnName("UNID2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid3)
                    .HasColumnName("UNID3")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unid4)
                    .HasColumnName("UNID4")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.LastsalesAlbventalins)
                    .HasForeignKey(d => new { d.Numserie, d.Numalbaran, d.N })
                    .HasConstraintName("LASTSALES_ALBVENTALIN_FK");
            });

            modelBuilder.Entity<LastsalesArticulo>(entity =>
            {
                entity.HasKey(e => e.Codarticulo)
                    .HasName("LASTSALES_ARTICULOS_PK");

                entity.ToTable("LASTSALES_ARTICULOS");

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Composicion)
                    .HasColumnName("COMPOSICION")
                    .HasMaxLength(15);

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dpto)
                    .HasColumnName("DPTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Familia)
                    .HasColumnName("FAMILIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Linea)
                    .HasColumnName("LINEA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Marca).HasColumnName("MARCA");

                entity.Property(e => e.Norma)
                    .HasColumnName("NORMA")
                    .HasMaxLength(15);

                entity.Property(e => e.Refproveedor)
                    .HasColumnName("REFPROVEEDOR")
                    .HasMaxLength(15);

                entity.Property(e => e.Seccion)
                    .HasColumnName("SECCION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subfamilia)
                    .HasColumnName("SUBFAMILIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tacon)
                    .HasColumnName("TACON")
                    .HasMaxLength(10);

                entity.Property(e => e.Temporada)
                    .HasColumnName("TEMPORADA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoarticulo)
                    .HasColumnName("TIPOARTICULO")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.Usarnumserie)
                    .HasColumnName("USARNUMSERIE")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LastsalesArticuloslin>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color })
                    .HasName("LASTSALES_ARTICULOSLIN_PK");

                entity.ToTable("LASTSALES_ARTICULOSLIN");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Codbarras2)
                    .HasColumnName("CODBARRAS2")
                    .HasMaxLength(50);

                entity.Property(e => e.Codbarras3)
                    .HasColumnName("CODBARRAS3")
                    .HasMaxLength(50);

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1);

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.LastsalesArticuloslins)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("LASTSALES_ARTICULOSLIN_FK");
            });

            modelBuilder.Entity<Linea>(entity =>
            {
                entity.HasKey(e => new { e.Codmarca, e.Codlinea })
                    .HasName("LINEA_PK");

                entity.ToTable("LINEA");

                entity.Property(e => e.Codmarca).HasColumnName("CODMARCA");

                entity.Property(e => e.Codlinea).HasColumnName("CODLINEA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.HasOne(d => d.CodmarcaNavigation)
                    .WithMany(p => p.Lineas)
                    .HasForeignKey(d => d.Codmarca)
                    .HasConstraintName("LINEA_FK");
            });

            modelBuilder.Entity<Lineascomunicacionlog>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo, e.Fechahoraini, e.Id })
                    .HasName("LINEASCOMUNICACIONLOG_PK");

                entity.ToTable("LINEASCOMUNICACIONLOG");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.Fechahoraini)
                    .HasColumnName("FECHAHORAINI")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Facturar)
                    .HasColumnName("FACTURAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Todo)
                    .HasColumnName("TODO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Ultimportacion)
                    .HasColumnName("ULTIMPORTACION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Zfin)
                    .HasColumnName("ZFIN")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Zini)
                    .HasColumnName("ZINI")
                    .HasDefaultValueSql("((-1))");

                entity.HasOne(d => d.Comunicacionlog)
                    .WithMany(p => p.Lineascomunicacionlogs)
                    .HasForeignKey(d => new { d.Idfront, d.Tipo, d.Fechahoraini })
                    .HasConstraintName("LINEASCOMUNICACIONLOG_FK");
            });

            modelBuilder.Entity<Logzsafacturar>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo, e.Fechahoraini, e.Caja, e.Z })
                    .HasName("LOGZSAFACTURAR_PK");

                entity.ToTable("LOGZSAFACTURAR");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.Fechahoraini)
                    .HasColumnName("FECHAHORAINI")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.Facturada)
                    .HasColumnName("FACTURADA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.Comunicacionlog)
                    .WithMany(p => p.Logzsafacturars)
                    .HasForeignKey(d => new { d.Idfront, d.Tipo, d.Fechahoraini })
                    .HasConstraintName("LOGZSAFACTURAR_FK");
            });

            modelBuilder.Entity<Lugare>(entity =>
            {
                entity.HasKey(e => e.Codlugar)
                    .HasName("LUGARES_PK");

                entity.ToTable("LUGARES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_LUGARESVERSION");

                entity.Property(e => e.Codlugar)
                    .HasColumnName("CODLUGAR")
                    .HasMaxLength(20);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Lugaresreparacion>(entity =>
            {
                entity.HasKey(e => e.Codlugarreparacion)
                    .HasName("LUGARESREPARACION_PK");

                entity.ToTable("LUGARESREPARACION");

                entity.Property(e => e.Codlugarreparacion)
                    .HasColumnName("CODLUGARREPARACION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Lugarreparacion)
                    .HasColumnName("LUGARREPARACION")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<Mailing>(entity =>
            {
                entity.HasKey(e => e.Idinforme)
                    .HasName("MAILING_PK");

                entity.ToTable("MAILING");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MAILINGVERSION");

                entity.Property(e => e.Idinforme)
                    .HasColumnName("IDINFORME")
                    .ValueGeneratedNever();

                entity.Property(e => e.Altopapel).HasColumnName("ALTOPAPEL");

                entity.Property(e => e.Alturacabecera).HasColumnName("ALTURACABECERA");

                entity.Property(e => e.Alturacuerpo).HasColumnName("ALTURACUERPO");

                entity.Property(e => e.Alturapie).HasColumnName("ALTURAPIE");

                entity.Property(e => e.Anchopapel).HasColumnName("ANCHOPAPEL");

                entity.Property(e => e.Cabecera)
                    .HasColumnName("CABECERA")
                    .HasColumnType("ntext");

                entity.Property(e => e.Cuerpo)
                    .HasColumnName("CUERPO")
                    .HasColumnType("ntext");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.MargenAb).HasColumnName("MARGEN_AB");

                entity.Property(e => e.MargenAr).HasColumnName("MARGEN_AR");

                entity.Property(e => e.MargenDer).HasColumnName("MARGEN_DER");

                entity.Property(e => e.MargenIzq).HasColumnName("MARGEN_IZQ");

                entity.Property(e => e.Orientacion)
                    .HasColumnName("ORIENTACION")
                    .HasMaxLength(1);

                entity.Property(e => e.Pie)
                    .HasColumnName("PIE")
                    .HasColumnType("ntext");

                entity.Property(e => e.Tipopapel).HasColumnName("TIPOPAPEL");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Mailingbitmap>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Idimagen })
                    .HasName("MAILINGBITMAPS_PK");

                entity.ToTable("MAILINGBITMAPS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MAILINGBITMAPSVERSION");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Idimagen).HasColumnName("IDIMAGEN");

                entity.Property(e => e.Banda).HasColumnName("BANDA");

                entity.Property(e => e.Hash)
                    .HasColumnName("HASH")
                    .HasMaxLength(32);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.Mailingbitmaps)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("FK_MAILINGBITMAPS");
            });

            modelBuilder.Entity<Manipulacione>(entity =>
            {
                entity.HasKey(e => e.Codmanipulacion)
                    .HasName("MANIPULACIONES_PK");

                entity.ToTable("MANIPULACIONES");

                entity.Property(e => e.Codmanipulacion)
                    .HasColumnName("CODMANIPULACION")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<Mapping>(entity =>
            {
                entity.HasKey(e => e.Idmap)
                    .HasName("MAPPING_PK");

                entity.ToTable("MAPPING");

                entity.Property(e => e.Idmap)
                    .HasColumnName("IDMAP")
                    .ValueGeneratedNever();

                entity.Property(e => e.Delimitador)
                    .HasColumnName("DELIMITADOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Formatofecha)
                    .HasColumnName("FORMATOFECHA")
                    .HasMaxLength(50);

                entity.Property(e => e.Haydel).HasColumnName("HAYDEL");

                entity.Property(e => e.Hayseparador).HasColumnName("HAYSEPARADOR");

                entity.Property(e => e.Idtipo).HasColumnName("IDTIPO");

                entity.Property(e => e.Importarcodbarras).HasColumnName("IMPORTARCODBARRAS");

                entity.Property(e => e.Lineaini).HasColumnName("LINEAINI");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(30);

                entity.Property(e => e.Separadordecimal)
                    .HasColumnName("SEPARADORDECIMAL")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Mappingsautomatizado>(entity =>
            {
                entity.ToTable("MAPPINGSAUTOMATIZADOS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Coderror).HasColumnName("CODERROR");

                entity.Property(e => e.Correcto)
                    .HasColumnName("CORRECTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fichlog)
                    .HasColumnName("FICHLOG")
                    .HasMaxLength(255);

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Msgerror)
                    .HasColumnName("MSGERROR")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Mappingsautomatizadosfile>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Numfichero })
                    .HasName("MAPPINGSAUTOMATIZADOSFILES_PK");

                entity.ToTable("MAPPINGSAUTOMATIZADOSFILES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Numfichero).HasColumnName("NUMFICHERO");

                entity.Property(e => e.Fichero)
                    .HasColumnName("FICHERO")
                    .HasMaxLength(255);

                entity.Property(e => e.Ficherocopiadoa)
                    .HasColumnName("FICHEROCOPIADOA")
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.Mappingsautomatizadosfiles)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("MAPPINGSAUTOMATIZADOSFILE_FK");
            });

            modelBuilder.Entity<Mappingscab>(entity =>
            {
                entity.HasKey(e => e.Idmap)
                    .HasName("MAPPINGSCAB_PK");

                entity.ToTable("MAPPINGSCAB");

                entity.Property(e => e.Idmap)
                    .HasColumnName("IDMAP")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idtipo).HasColumnName("IDTIPO");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(30);

                entity.Property(e => e.Norma).HasColumnName("NORMA");

                entity.Property(e => e.Remesa)
                    .HasColumnName("REMESA")
                    .HasMaxLength(1);

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<Mappingsexportacionescab>(entity =>
            {
                entity.HasKey(e => e.Idexportacion)
                    .HasName("MAPPINGSEXPORTACIONESCAB_PK");

                entity.ToTable("MAPPINGSEXPORTACIONESCAB");

                entity.Property(e => e.Idexportacion)
                    .HasColumnName("IDEXPORTACION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");
            });

            modelBuilder.Entity<Mappingsexportacioneslin>(entity =>
            {
                entity.HasKey(e => new { e.Idexportacion, e.Clave })
                    .HasName("MAPPINGSEXPORTACIONESLIN_PK");

                entity.ToTable("MAPPINGSEXPORTACIONESLIN");

                entity.Property(e => e.Idexportacion).HasColumnName("IDEXPORTACION");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(200);

                entity.HasOne(d => d.IdexportacionNavigation)
                    .WithMany(p => p.Mappingsexportacioneslins)
                    .HasForeignKey(d => d.Idexportacion)
                    .HasConstraintName("MAPPINGSEXPORTACIONESLIN_FK");
            });

            modelBuilder.Entity<Mappingsficherosrelacionado>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Idrelacion })
                    .HasName("MAPPINGSFICHEROSRELACIONADOS_PK");

                entity.ToTable("MAPPINGSFICHEROSRELACIONADOS");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Idrelacion).HasColumnName("IDRELACION");

                entity.Property(e => e.Fieldnamecab)
                    .HasColumnName("FIELDNAMECAB")
                    .HasMaxLength(100);

                entity.Property(e => e.Fieldnamelin)
                    .HasColumnName("FIELDNAMELIN")
                    .HasMaxLength(100);

                entity.Property(e => e.Idfilecab).HasColumnName("IDFILECAB");

                entity.Property(e => e.Idfilelin).HasColumnName("IDFILELIN");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.IdmapNavigation)
                    .WithMany(p => p.Mappingsficherosrelacionados)
                    .HasForeignKey(d => d.Idmap)
                    .HasConstraintName("MAPPINGSFICHEROSRELACIONADOS_FK");
            });

            modelBuilder.Entity<Mappingsfield>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Idfile, e.Idfield })
                    .HasName("MAPPINGSFIELDS_PK");

                entity.ToTable("MAPPINGSFIELDS");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Idfile).HasColumnName("IDFILE");

                entity.Property(e => e.Idfield).HasColumnName("IDFIELD");

                entity.Property(e => e.Documentacion)
                    .HasColumnName("DOCUMENTACION")
                    .HasMaxLength(255);

                entity.Property(e => e.Esatributo)
                    .HasColumnName("ESATRIBUTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Fieldname)
                    .HasColumnName("FIELDNAME")
                    .HasMaxLength(100);

                entity.Property(e => e.Fieldsize).HasColumnName("FIELDSIZE");

                entity.Property(e => e.Formatofecha)
                    .HasColumnName("FORMATOFECHA")
                    .HasMaxLength(50);

                entity.Property(e => e.Iscampoclave)
                    .HasColumnName("ISCAMPOCLAVE")
                    .HasMaxLength(1);

                entity.Property(e => e.Numdigitosdecimales).HasColumnName("NUMDIGITOSDECIMALES");

                entity.Property(e => e.Ordenimportacion).HasColumnName("ORDENIMPORTACION");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Sumable)
                    .HasColumnName("SUMABLE")
                    .HasMaxLength(1);

                entity.Property(e => e.Tagxml)
                    .HasColumnName("TAGXML")
                    .HasMaxLength(100);

                entity.Property(e => e.Tipofield).HasColumnName("TIPOFIELD");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Mappingsfields)
                    .HasForeignKey(d => new { d.Idmap, d.Idfile })
                    .HasConstraintName("MAPPINGSFIELDS_FK");
            });

            modelBuilder.Entity<Mappingsfile>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Idfile })
                    .HasName("MAPPINGSFILES_PK");

                entity.ToTable("MAPPINGSFILES");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Idfile).HasColumnName("IDFILE");

                entity.Property(e => e.Delimitador)
                    .HasColumnName("DELIMITADOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Delimitadorfinal)
                    .HasColumnName("DELIMITADORFINAL")
                    .HasMaxLength(1);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Filtrolineas)
                    .HasColumnName("FILTROLINEAS")
                    .HasMaxLength(500);

                entity.Property(e => e.Formatofecha)
                    .HasColumnName("FORMATOFECHA")
                    .HasMaxLength(50);

                entity.Property(e => e.Formatohora)
                    .HasColumnName("FORMATOHORA")
                    .HasMaxLength(50);

                entity.Property(e => e.Hayseparadordecimal)
                    .HasColumnName("HAYSEPARADORDECIMAL")
                    .HasMaxLength(1);

                entity.Property(e => e.Hayseparadormiles)
                    .HasColumnName("HAYSEPARADORMILES")
                    .HasMaxLength(1);

                entity.Property(e => e.Idfileparent).HasColumnName("IDFILEPARENT");

                entity.Property(e => e.Paramtag)
                    .HasColumnName("PARAMTAG")
                    .HasMaxLength(1000);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Primeralineaimportar).HasColumnName("PRIMERALINEAIMPORTAR");

                entity.Property(e => e.Separadordecimal)
                    .HasColumnName("SEPARADORDECIMAL")
                    .HasMaxLength(10);

                entity.Property(e => e.Separadorlineas)
                    .HasColumnName("SEPARADORLINEAS")
                    .HasMaxLength(30);

                entity.Property(e => e.Separadormiles)
                    .HasColumnName("SEPARADORMILES")
                    .HasMaxLength(10);

                entity.Property(e => e.Sqlexport)
                    .HasColumnName("SQLEXPORT")
                    .HasColumnType("ntext");

                entity.Property(e => e.Tienecampos)
                    .HasColumnName("TIENECAMPOS")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipofichero).HasColumnName("TIPOFICHERO");

                entity.Property(e => e.Tipojoin).HasColumnName("TIPOJOIN");

                entity.HasOne(d => d.IdmapNavigation)
                    .WithMany(p => p.Mappingsfiles)
                    .HasForeignKey(d => d.Idmap)
                    .HasConstraintName("MAPPINGSFILES_FK");
            });

            modelBuilder.Entity<Mappingsfilesmainfield>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Idfile, e.Numcampo })
                    .HasName("MAPPINGSFILESMAINFIELDSPK");

                entity.ToTable("MAPPINGSFILESMAINFIELDS");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Idfile).HasColumnName("IDFILE");

                entity.Property(e => e.Numcampo).HasColumnName("NUMCAMPO");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Mappingsfilesmainfields)
                    .HasForeignKey(d => new { d.Idmap, d.Idfile })
                    .HasConstraintName("MAPPINGSFILESMAINFIELDSFK");
            });

            modelBuilder.Entity<Mappingsfilesparametro>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Idfile, e.Numparam })
                    .HasName("MAPPINGSFILESPARAMETROSPK");

                entity.ToTable("MAPPINGSFILESPARAMETROS");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Idfile).HasColumnName("IDFILE");

                entity.Property(e => e.Numparam).HasColumnName("NUMPARAM");

                entity.Property(e => e.Paramcaption)
                    .HasColumnName("PARAMCAPTION")
                    .HasMaxLength(300);

                entity.Property(e => e.Paramname)
                    .HasColumnName("PARAMNAME")
                    .HasMaxLength(100);

                entity.Property(e => e.Paramsize).HasColumnName("PARAMSIZE");

                entity.Property(e => e.Paramtype).HasColumnName("PARAMTYPE");

                entity.Property(e => e.Paramvalue)
                    .HasColumnName("PARAMVALUE")
                    .HasMaxLength(300);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Mappingsfilesparametros)
                    .HasForeignKey(d => new { d.Idmap, d.Idfile })
                    .HasConstraintName("MAPPINGSFILESPARAMETROSFK");
            });

            modelBuilder.Entity<Mappingsfilessortedfield>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Idfile, e.Numcampo })
                    .HasName("MAPPINGSFILESSORTEDFIELDS_PK");

                entity.ToTable("MAPPINGSFILESSORTEDFIELDS");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Idfile).HasColumnName("IDFILE");

                entity.Property(e => e.Numcampo).HasColumnName("NUMCAMPO");

                entity.Property(e => e.Campo)
                    .HasColumnName("CAMPO")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Mappingsfilessortedfields)
                    .HasForeignKey(d => new { d.Idmap, d.Idfile })
                    .HasConstraintName("MAPPINGSFILESSORTEDFIELDS_FK");
            });

            modelBuilder.Entity<Mappingsidimportacion>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Posicion })
                    .HasName("MAPPINGSIDIMPORTACION_PK");

                entity.ToTable("MAPPINGSIDIMPORTACION");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Fieldname)
                    .HasColumnName("FIELDNAME")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdmapNavigation)
                    .WithMany(p => p.Mappingsidimportacions)
                    .HasForeignKey(d => d.Idmap)
                    .HasConstraintName("MAPPINGSIDIMPORTACION_FK");
            });

            modelBuilder.Entity<Mappingslin>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Idcampo })
                    .HasName("MAPPINGSLIN_PK");

                entity.ToTable("MAPPINGSLIN");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Idcampo).HasColumnName("IDCAMPO");

                entity.Property(e => e.Campodst)
                    .HasColumnName("CAMPODST")
                    .HasMaxLength(50);

                entity.Property(e => e.Camposrc)
                    .HasColumnName("CAMPOSRC")
                    .HasMaxLength(50);

                entity.Property(e => e.Lencampo).HasColumnName("LENCAMPO");

                entity.Property(e => e.Posiciondecimal).HasColumnName("POSICIONDECIMAL");

                entity.Property(e => e.Posorigen).HasColumnName("POSORIGEN");

                entity.HasOne(d => d.IdmapNavigation)
                    .WithMany(p => p.Mappingslins)
                    .HasForeignKey(d => d.Idmap)
                    .HasConstraintName("FK_MAPPINGSLIN_MAPPING");
            });

            modelBuilder.Entity<Mappingspropiedade>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Propiedad })
                    .HasName("MAPPINGSPROPIEDADES_PK");

                entity.ToTable("MAPPINGSPROPIEDADES");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Propiedad)
                    .HasColumnName("PROPIEDAD")
                    .HasMaxLength(30);

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdmapNavigation)
                    .WithMany(p => p.Mappingspropiedades)
                    .HasForeignKey(d => d.Idmap)
                    .HasConstraintName("MAPPINGSPROPIEDADES_FK");
            });

            modelBuilder.Entity<Mappingsregla>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Modo, e.Idregla })
                    .HasName("MAPPINGSREGLAS_PK");

                entity.ToTable("MAPPINGSREGLAS");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Modo).HasColumnName("MODO");

                entity.Property(e => e.Idregla).HasColumnName("IDREGLA");

                entity.Property(e => e.Campodestino)
                    .HasColumnName("CAMPODESTINO")
                    .HasMaxLength(100);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Regla)
                    .HasColumnName("REGLA")
                    .HasMaxLength(4000);

                entity.HasOne(d => d.IdmapNavigation)
                    .WithMany(p => p.Mappingsreglas)
                    .HasForeignKey(d => d.Idmap)
                    .HasConstraintName("MAPPINGSREGLAS_FK");
            });

            modelBuilder.Entity<Mappingssql>(entity =>
            {
                entity.HasKey(e => new { e.Idmap, e.Cuando, e.Posicion })
                    .HasName("MAPPINGSSQLS_PK");

                entity.ToTable("MAPPINGSSQLS");

                entity.Property(e => e.Idmap).HasColumnName("IDMAP");

                entity.Property(e => e.Cuando).HasColumnName("CUANDO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Idsql).HasColumnName("IDSQL");

                entity.HasOne(d => d.IdmapNavigation)
                    .WithMany(p => p.Mappingssqls)
                    .HasForeignKey(d => d.Idmap)
                    .HasConstraintName("MAPPINGSSQLS_FK");
            });

            modelBuilder.Entity<Marca>(entity =>
            {
                entity.HasKey(e => e.Codmarca)
                    .HasName("MARCA_PK");

                entity.ToTable("MARCA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MARCAVERSION");

                entity.Property(e => e.Codmarca)
                    .HasColumnName("CODMARCA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Mediospagohiopo>(entity =>
            {
                entity.HasKey(e => e.Idmediopago)
                    .HasName("PK_MEDIOPAGO");

                entity.ToTable("MEDIOSPAGOHIOPOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MEDIOSPAGOHIOPOSVERSION");

                entity.Property(e => e.Idmediopago)
                    .HasColumnName("IDMEDIOPAGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Admitecambio).HasColumnName("ADMITECAMBIO");

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Dispositivocobroelectronico)
                    .HasColumnName("DISPOSITIVOCOBROELECTRONICO")
                    .HasMaxLength(32);

                entity.Property(e => e.Entrarnumerodocumento).HasColumnName("ENTRARNUMERODOCUMENTO");

                entity.Property(e => e.Entrarnumerotarjeta).HasColumnName("ENTRARNUMEROTARJETA");

                entity.Property(e => e.Esacredito).HasColumnName("ESACREDITO");

                entity.Property(e => e.Esmetalico).HasColumnName("ESMETALICO");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Necesitacomprobante).HasColumnName("NECESITACOMPROBANTE");

                entity.Property(e => e.Retornocobroelectronico)
                    .HasColumnName("RETORNOCOBROELECTRONICO")
                    .HasMaxLength(32);

                entity.Property(e => e.Tipocobroelectronico)
                    .HasColumnName("TIPOCOBROELECTRONICO")
                    .HasMaxLength(32);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Versioninsert).HasColumnName("VERSIONINSERT");
            });

            modelBuilder.Entity<Mensaje>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("MENSAJES_PK");

                entity.ToTable("MENSAJES");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Emisor)
                    .IsRequired()
                    .HasColumnName("EMISOR")
                    .HasMaxLength(3);

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mensaje1)
                    .HasColumnName("MENSAJE")
                    .HasColumnType("ntext");

                entity.Property(e => e.Receptor)
                    .IsRequired()
                    .HasColumnName("RECEPTOR")
                    .HasMaxLength(3);
            });

            modelBuilder.Entity<Mermascab>(entity =>
            {
                entity.HasKey(e => e.Idint)
                    .HasName("MERMASCAB_PK");

                entity.ToTable("MERMASCAB");

                entity.HasIndex(e => new { e.Serie, e.Numdoc })
                    .HasName("MERMASSN")
                    .IsUnique();

                entity.Property(e => e.Idint)
                    .HasColumnName("IDINT")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcomentario).HasColumnName("CODCOMENTARIO");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.CodvalPvp).HasColumnName("CODVAL_PVP");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numdoc).HasColumnName("NUMDOC");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(50);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CodalmacenNavigation)
                    .WithMany(p => p.Mermascabs)
                    .HasForeignKey(d => d.Codalmacen)
                    .HasConstraintName("MERMASCAB_ALMAC_FK");
            });

            modelBuilder.Entity<Mermaslin>(entity =>
            {
                entity.HasKey(e => new { e.Idint, e.Numlin })
                    .HasName("MERMASLIN_PK");

                entity.ToTable("MERMASLIN");

                entity.Property(e => e.Idint).HasColumnName("IDINT");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Nuevostock).HasColumnName("NUEVOSTOCK");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.ValoracionCoste).HasColumnName("VALORACION_COSTE");

                entity.Property(e => e.ValoracionPvp).HasColumnName("VALORACION_PVP");

                entity.HasOne(d => d.IdintNavigation)
                    .WithMany(p => p.Mermaslins)
                    .HasForeignKey(d => d.Idint)
                    .HasConstraintName("MERMASLIN_FK");
            });

            modelBuilder.Entity<Miscubosolap>(entity =>
            {
                entity.HasKey(e => e.Idcubo)
                    .HasName("MISCUBOSOLAP_PK");

                entity.ToTable("MISCUBOSOLAP");

                entity.Property(e => e.Idcubo)
                    .HasColumnName("IDCUBO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comparado)
                    .HasColumnName("COMPARADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dades)
                    .HasColumnName("DADES")
                    .HasColumnType("image");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(75);

                entity.Property(e => e.Estilograf).HasColumnName("ESTILOGRAF");

                entity.Property(e => e.Factgraf).HasColumnName("FACTGRAF");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Metadata)
                    .HasColumnName("METADATA")
                    .HasColumnType("image");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipograf).HasColumnName("TIPOGRAF");

                entity.HasOne(d => d.IdinformeNavigation)
                    .WithMany(p => p.Miscubosolaps)
                    .HasForeignKey(d => d.Idinforme)
                    .HasConstraintName("MISCUBOSOLAP_INFORME_FK");
            });

            modelBuilder.Entity<MiscubosolapPropiedade>(entity =>
            {
                entity.HasKey(e => new { e.Idinforme, e.Idcubo })
                    .HasName("MISCUBOSOLAP_PROPIEDADES_PK");

                entity.ToTable("MISCUBOSOLAP_PROPIEDADES");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");

                entity.Property(e => e.Idcubo).HasColumnName("IDCUBO");

                entity.Property(e => e.Apaisado).HasColumnName("APAISADO");

                entity.Property(e => e.Captionsmodif)
                    .HasColumnName("CAPTIONSMODIF")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MiscubosolapUsuario>(entity =>
            {
                entity.HasKey(e => new { e.Idusuario, e.Idcubo })
                    .HasName("MISCUBOSOLAP_USUARIO_PK");

                entity.ToTable("MISCUBOSOLAP_USUARIO");

                entity.Property(e => e.Idusuario).HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idcubo).HasColumnName("IDCUBO");

                entity.HasOne(d => d.IdcuboNavigation)
                    .WithMany(p => p.MiscubosolapUsuarios)
                    .HasForeignKey(d => d.Idcubo)
                    .HasConstraintName("MISCUBOSOLAP_USUARIO_FK");
            });

            modelBuilder.Entity<ModificacionesCentral>(entity =>
            {
                entity.ToTable("MODIFICACIONES_CENTRAL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Bloqueofront).HasColumnName("BLOQUEOFRONT");

                entity.Property(e => e.Bloqueofuerte).HasColumnName("BLOQUEOFUERTE");

                entity.Property(e => e.Cadena1)
                    .HasColumnName("CADENA1")
                    .HasMaxLength(20);

                entity.Property(e => e.Cadena2)
                    .HasColumnName("CADENA2")
                    .HasMaxLength(20);

                entity.Property(e => e.Cadena3)
                    .HasColumnName("CADENA3")
                    .HasMaxLength(50);

                entity.Property(e => e.Descartado).HasColumnName("DESCARTADO");

                entity.Property(e => e.Fecha1)
                    .HasColumnName("FECHA1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha2)
                    .HasColumnName("FECHA2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechabloqueo)
                    .HasColumnName("FECHABLOQUEO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Identidad).HasColumnName("IDENTIDAD");

                entity.Property(e => e.Idremtrans).HasColumnName("IDREMTRANS");

                entity.Property(e => e.Numero1).HasColumnName("NUMERO1");

                entity.Property(e => e.Numero2).HasColumnName("NUMERO2");

                entity.Property(e => e.Numero3).HasColumnName("NUMERO3");

                entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

                entity.Property(e => e.Real1).HasColumnName("REAL1");

                entity.Property(e => e.Real2).HasColumnName("REAL2");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Modificadoresarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codmodificador })
                    .HasName("MODIFICADORESARTICULOS_PK");

                entity.ToTable("MODIFICADORESARTICULOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codmodificador).HasColumnName("CODMODIFICADOR");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Gratis).HasColumnName("GRATIS");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Limite)
                    .HasColumnName("LIMITE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Minimo).HasColumnName("MINIMO");

                entity.Property(e => e.Multiselec)
                    .HasColumnName("MULTISELEC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Orden)
                    .HasColumnName("ORDEN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ordenopcional).HasColumnName("ORDENOPCIONAL");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");
            });

            modelBuilder.Entity<Modificadorescab>(entity =>
            {
                entity.HasKey(e => e.Codmodificador)
                    .HasName("MODIFICADORESCAB_PK");

                entity.ToTable("MODIFICADORESCAB");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MODIFICADORESCABVERSION");

                entity.Property(e => e.Codmodificador)
                    .HasColumnName("CODMODIFICADOR")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cobrardivcara).HasColumnName("COBRARDIVCARA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Divisible).HasColumnName("DIVISIBLE");

                entity.Property(e => e.Esmenu).HasColumnName("ESMENU");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Modificadoresidioma>(entity =>
            {
                entity.HasKey(e => new { e.Codmodificador, e.Codidioma });

                entity.ToTable("MODIFICADORESIDIOMAS");

                entity.Property(e => e.Codmodificador).HasColumnName("CODMODIFICADOR");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodidiomaNavigation)
                    .WithMany(p => p.Modificadoresidiomas)
                    .HasForeignKey(d => d.Codidioma)
                    .HasConstraintName("FK_MODIFICADORESIDIOMAS_IDIOMAS");

                entity.HasOne(d => d.CodmodificadorNavigation)
                    .WithMany(p => p.Modificadoresidiomas)
                    .HasForeignKey(d => d.Codmodificador)
                    .HasConstraintName("FK_MODIFICADORESIDIOMAS_MODIFICADORESCAB");
            });

            modelBuilder.Entity<Modificadoreslin>(entity =>
            {
                entity.HasKey(e => new { e.Codmodificador, e.Posicion, e.Codarticulocom, e.Codformato })
                    .HasName("MODIFICADORESLIN_PK");

                entity.ToTable("MODIFICADORESLIN");

                entity.Property(e => e.Codmodificador).HasColumnName("CODMODIFICADOR");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codarticulocom).HasColumnName("CODARTICULOCOM");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Dosis).HasColumnName("DOSIS");

                entity.Property(e => e.Esarticulo).HasColumnName("ESARTICULO");

                entity.Property(e => e.Esdto)
                    .HasColumnName("ESDTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Incprecio).HasColumnName("INCPRECIO");

                entity.Property(e => e.Predeterminado).HasColumnName("PREDETERMINADO");
            });

            modelBuilder.Entity<Moneda>(entity =>
            {
                entity.HasKey(e => e.Codmoneda)
                    .HasName("MONEDAS_PK");

                entity.ToTable("MONEDAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MONEDASVERSION");

                entity.Property(e => e.Codmoneda)
                    .HasColumnName("CODMONEDA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aplicarcotdef)
                    .HasColumnName("APLICARCOTDEF")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cambiootramoneda)
                    .HasColumnName("CAMBIOOTRAMONEDA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cantidadprin).HasColumnName("CANTIDADPRIN");

                entity.Property(e => e.Cantidadsec).HasColumnName("CANTIDADSEC");

                entity.Property(e => e.Codigoiso)
                    .HasColumnName("CODIGOISO")
                    .HasMaxLength(10);

                entity.Property(e => e.Codigoisonum)
                    .HasColumnName("CODIGOISONUM")
                    .HasMaxLength(3);

                entity.Property(e => e.Comisioncambio)
                    .HasColumnName("COMISIONCAMBIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cotdef).HasColumnName("COTDEF");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(20);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.ImagenPng)
                    .HasColumnName("IMAGEN_PNG")
                    .HasColumnType("image");

                entity.Property(e => e.Iniciales)
                    .HasColumnName("INICIALES")
                    .HasMaxLength(4);

                entity.Property(e => e.Inicialesdelante)
                    .HasColumnName("INICIALESDELANTE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mora)
                    .HasColumnName("MORA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Numdecimales).HasColumnName("NUMDECIMALES");

                entity.Property(e => e.Numerador)
                    .HasColumnName("NUMERADOR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Principal)
                    .HasColumnName("PRINCIPAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Monedashiopo>(entity =>
            {
                entity.HasKey(e => e.Idmoneda)
                    .HasName("PK_MONEDA");

                entity.ToTable("MONEDASHIOPOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MONEDASHIOPOSVERSION");

                entity.Property(e => e.Idmoneda)
                    .HasColumnName("IDMONEDA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Decimales).HasColumnName("DECIMALES");

                entity.Property(e => e.Descatalogada).HasColumnName("DESCATALOGADA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Iniciales)
                    .HasColumnName("INICIALES")
                    .HasMaxLength(10);

                entity.Property(e => e.Inicialesdelante).HasColumnName("INICIALESDELANTE");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Versioninsert).HasColumnName("VERSIONINSERT");
            });

            modelBuilder.Entity<Monedaslin>(entity =>
            {
                entity.HasKey(e => new { e.Codmoneda, e.Cantidad })
                    .HasName("MONEDASLIN_PK");

                entity.ToTable("MONEDASLIN");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.HasOne(d => d.CodmonedaNavigation)
                    .WithMany(p => p.Monedaslins)
                    .HasForeignKey(d => d.Codmoneda)
                    .HasConstraintName("MONEDASLIN_MONEDAS");
            });

            modelBuilder.Entity<Monedaspiezashiopo>(entity =>
            {
                entity.HasKey(e => e.Idpiezamoneda)
                    .HasName("PK_DETALLEMONEDA");

                entity.ToTable("MONEDASPIEZASHIOPOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MONEDASPIEZASHIOPOSVERSION");

                entity.Property(e => e.Idpiezamoneda)
                    .HasColumnName("IDPIEZAMONEDA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idmoneda).HasColumnName("IDMONEDA");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Importe)
                    .HasColumnName("IMPORTE")
                    .HasColumnType("money");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Versioninsert).HasColumnName("VERSIONINSERT");
            });

            modelBuilder.Entity<Motivo>(entity =>
            {
                entity.HasKey(e => e.Codmotivo)
                    .HasName("MOTIVOS_PK");

                entity.ToTable("MOTIVOS");

                entity.Property(e => e.Codmotivo)
                    .HasColumnName("CODMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(75);
            });

            modelBuilder.Entity<Motivosabono>(entity =>
            {
                entity.ToTable("MOTIVOSABONO");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MotivosabonoIdioma>(entity =>
            {
                entity.HasKey(e => new { e.Idmotivoabono, e.Codidioma })
                    .HasName("MOTIVOSABONO_IDIOMAS_PK");

                entity.ToTable("MOTIVOSABONO_IDIOMAS");

                entity.Property(e => e.Idmotivoabono).HasColumnName("IDMOTIVOABONO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.IdmotivoabonoNavigation)
                    .WithMany(p => p.MotivosabonoIdiomas)
                    .HasForeignKey(d => d.Idmotivoabono)
                    .HasConstraintName("MOTIVOSABONO_IDIOMAS_FK");
            });

            modelBuilder.Entity<Motivosdescuadre>(entity =>
            {
                entity.HasKey(e => e.Idmotivo);

                entity.ToTable("MOTIVOSDESCUADRE");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MOTIVOSDESCUADREVERSION");

                entity.Property(e => e.Idmotivo)
                    .HasColumnName("IDMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Motivosdevolucion>(entity =>
            {
                entity.HasKey(e => e.Idmotivo)
                    .HasName("MOTIVOSDEVOLUCION_PK");

                entity.ToTable("MOTIVOSDEVOLUCION");

                entity.Property(e => e.Idmotivo)
                    .HasColumnName("IDMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Motivosdto>(entity =>
            {
                entity.HasKey(e => e.Idmotivo)
                    .HasName("MOTIVOSDTO_PK");

                entity.ToTable("MOTIVOSDTO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MOTIVOSDTOVERSION");

                entity.Property(e => e.Idmotivo)
                    .HasColumnName("IDMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aplicable).HasColumnName("APLICABLE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Descripcionaena)
                    .HasColumnName("DESCRIPCIONAENA")
                    .HasMaxLength(15);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtomodificable).HasColumnName("DTOMODIFICABLE");

                entity.Property(e => e.Mascara)
                    .HasColumnName("MASCARA")
                    .HasMaxLength(255);

                entity.Property(e => e.Sobrecambioprecio).HasColumnName("SOBRECAMBIOPRECIO");

                entity.Property(e => e.Sobredto).HasColumnName("SOBREDTO");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Trassubtotal)
                    .HasColumnName("TRASSUBTOTAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Motivosentradum>(entity =>
            {
                entity.HasKey(e => e.Idmotivo)
                    .HasName("MOTIVOSENTRADA_PK");

                entity.ToTable("MOTIVOSENTRADA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MOTIVOSENTRADAVERSION");

                entity.Property(e => e.Idmotivo)
                    .HasColumnName("IDMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Motivosmerma>(entity =>
            {
                entity.ToTable("MOTIVOSMERMAS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<Motivosparada>(entity =>
            {
                entity.HasKey(e => e.Codparada)
                    .HasName("MOTIVOSPARADAS_PK");

                entity.ToTable("MOTIVOSPARADAS");

                entity.Property(e => e.Codparada)
                    .HasColumnName("CODPARADA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descparada)
                    .HasColumnName("DESCPARADA")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Motivosrechazo>(entity =>
            {
                entity.HasKey(e => e.Idmotivo)
                    .HasName("MOTIVOSRECHAZO_PK");

                entity.ToTable("MOTIVOSRECHAZO");

                entity.Property(e => e.Idmotivo)
                    .HasColumnName("IDMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Motivossalidum>(entity =>
            {
                entity.HasKey(e => e.Idmotivo)
                    .HasName("MOTIVOSSALIDA_PK");

                entity.ToTable("MOTIVOSSALIDA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_MOTIVOSSALIDAVERSION");

                entity.Property(e => e.Idmotivo)
                    .HasColumnName("IDMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codtipo).HasColumnName("CODTIPO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.MostrarCpr)
                    .IsRequired()
                    .HasColumnName("MOSTRAR_CPR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Pagado).HasColumnName("PAGADO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Motivostraspaso>(entity =>
            {
                entity.HasKey(e => e.Idmotivo)
                    .HasName("MOTIVOSTRASPASO_PK");

                entity.ToTable("MOTIVOSTRASPASO");

                entity.Property(e => e.Idmotivo)
                    .HasColumnName("IDMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Descripcioneditable)
                    .HasColumnName("DESCRIPCIONEDITABLE")
                    .HasMaxLength(1);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MotivostraspasoIdioma>(entity =>
            {
                entity.HasKey(e => new { e.Idmotivo, e.Codidioma })
                    .HasName("MOTIVOSTRASPASO_IDIOMAS_PK");

                entity.ToTable("MOTIVOSTRASPASO_IDIOMAS");

                entity.Property(e => e.Idmotivo).HasColumnName("IDMOTIVO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.IdmotivoNavigation)
                    .WithMany(p => p.MotivostraspasoIdiomas)
                    .HasForeignKey(d => d.Idmotivo)
                    .HasConstraintName("MOTIVOSTRASPASO_IDIOMAS_FK");
            });

            modelBuilder.Entity<Moviment>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("MOVIMENTS_PK")
                    .IsClustered(false);

                entity.ToTable("MOVIMENTS");

                entity.HasIndex(e => e.Numdoc)
                    .HasName("MOVIMENTS_NUMDOC");

                entity.HasIndex(e => new { e.Seriedoc, e.Numdoc })
                    .HasName("MOVIMENST_SERIEDOCNUMDOC");

                entity.HasIndex(e => new { e.Fecha, e.Codalmacenorigen, e.Tipo })
                    .HasName("MOVIMENTS_FECHAALM");

                entity.HasIndex(e => new { e.Tipo, e.Seriedoc, e.Numdoc })
                    .HasName("MOVIMENTS_TIPO");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacendestino })
                    .HasName("MOVIMENTS_ARTIC_ALM_DEST");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacenorigen })
                    .HasName("MOVIMENTS_ARTIC_ALM_ORIG");

                entity.HasIndex(e => new { e.Tipo, e.Codalmacendestino, e.Codarticulo, e.Talla, e.Color, e.Fecha })
                    .HasName("MOVIMENTS_STOCK_DESTINO");

                entity.HasIndex(e => new { e.Tipo, e.Codalmacenorigen, e.Codarticulo, e.Talla, e.Color, e.Fecha })
                    .HasName("MOVIMENTS_STOCK_ORIGEN");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Calcmovpost)
                    .HasColumnName("CALCMOVPOST")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codalmacendestino)
                    .HasColumnName("CODALMACENDESTINO")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codmonedapvp)
                    .HasColumnName("CODMONEDAPVP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codprocli).HasColumnName("CODPROCLI");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numdoc).HasColumnName("NUMDOC");

                entity.Property(e => e.Numfaccompra).HasColumnName("NUMFACCOMPRA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(25);

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodmn).HasColumnName("PRECIODMN");

                entity.Property(e => e.Pvp)
                    .HasColumnName("PVP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pvpdmn).HasColumnName("PVPDMN");

                entity.Property(e => e.Seriecompra)
                    .HasColumnName("SERIECOMPRA")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriedoc)
                    .HasColumnName("SERIEDOC")
                    .HasMaxLength(4);

                entity.Property(e => e.Stock)
                    .HasColumnName("STOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stock2)
                    .HasColumnName("STOCK2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(3);

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Zona)
                    .HasColumnName("ZONA")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Moviments)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("MOVIMENTS_ARTICULO");
            });

            modelBuilder.Entity<NetCaja>(entity =>
            {
                entity.HasKey(e => e.IdCaja)
                    .HasName("PK_CAJATIENDA_1");

                entity.ToTable("NET_Caja");

                entity.Property(e => e.IdCaja).ValueGeneratedNever();

                entity.Property(e => e.IdAlmacen).HasMaxLength(3);

                entity.Property(e => e.SerieCaja).HasMaxLength(3);

                entity.Property(e => e.SerieCompras).HasMaxLength(4);

                entity.Property(e => e.SerieDevoluciones).HasMaxLength(4);

                entity.Property(e => e.SerieFacturas).HasMaxLength(4);

                entity.Property(e => e.SerieVentas).HasMaxLength(4);
            });

            modelBuilder.Entity<NetConfigTipoTerminal>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoTerminal, e.IdParametro });

                entity.ToTable("NET_ConfigTipoTerminal");

                entity.Property(e => e.Valor).HasMaxLength(250);

                entity.HasOne(d => d.IdTipoTerminalNavigation)
                    .WithMany(p => p.NetConfigTipoTerminals)
                    .HasForeignKey(d => d.IdTipoTerminal)
                    .HasConstraintName("FK_NET_ConfigTipoTerminal_NET_TipoTerminal");
            });

            modelBuilder.Entity<NetFamiliasNoModificable>(entity =>
            {
                entity.HasKey(e => e.IdFamilia);

                entity.ToTable("NET_FamiliasNoModificables");

                entity.Property(e => e.IdFamilia).ValueGeneratedNever();
            });

            modelBuilder.Entity<NetFamiliasTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.IdFamilia });

                entity.ToTable("NET_FamiliasTienda");

                entity.HasOne(d => d.IdFamiliaNavigation)
                    .WithMany(p => p.NetFamiliasTienda)
                    .HasForeignKey(d => d.IdFamilia)
                    .HasConstraintName("FK_NET_FamiliasTienda_FAVORITOSCAB");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetFamiliasTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .HasConstraintName("FK_NET_FamiliasTienda_NET_Tienda");
            });

            modelBuilder.Entity<NetGrupoTiendum>(entity =>
            {
                entity.HasKey(e => e.IdGrupoTienda);

                entity.ToTable("NET_GrupoTienda");

                entity.Property(e => e.Descripcion).HasMaxLength(250);
            });

            modelBuilder.Entity<NetImpuestosTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.TipoIva });

                entity.ToTable("NET_ImpuestosTienda");

                entity.Property(e => e.TipoIva).HasColumnName("TipoIVA");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetImpuestosTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .HasConstraintName("FK_NET_ImpuestosTienda_NET_Tienda");

                entity.HasOne(d => d.TipoIvaNavigation)
                    .WithMany(p => p.NetImpuestosTienda)
                    .HasForeignKey(d => d.TipoIva)
                    .HasConstraintName("FK_NET_ImpuestosTienda_IMPUESTOS");
            });

            modelBuilder.Entity<NetIncidenciasTerminal>(entity =>
            {
                entity.HasKey(e => e.IdIncidencia);

                entity.ToTable("NET_IncidenciasTerminal");

                entity.Property(e => e.Descripcion).HasColumnType("ntext");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.HasOne(d => d.IdTerminalNavigation)
                    .WithMany(p => p.NetIncidenciasTerminals)
                    .HasForeignKey(d => d.IdTerminal)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NET_IncidenciasTerminal_NET_Terminal");
            });

            modelBuilder.Entity<NetMediosPagoTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.CodTipoPago });

                entity.ToTable("NET_MediosPagoTienda");

                entity.Property(e => e.CodTipoPago).HasMaxLength(2);

                entity.HasOne(d => d.CodTipoPagoNavigation)
                    .WithMany(p => p.NetMediosPagoTienda)
                    .HasForeignKey(d => d.CodTipoPago)
                    .HasConstraintName("FK_NET_MediosPagoTienda_TIPOSPAGO");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetMediosPagoTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .HasConstraintName("FK_NET_MediosPagoTienda_NET_Tienda");
            });

            modelBuilder.Entity<NetMonedasTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.IdMoneda });

                entity.ToTable("NET_MonedasTienda");

                entity.HasOne(d => d.IdMonedaNavigation)
                    .WithMany(p => p.NetMonedasTienda)
                    .HasForeignKey(d => d.IdMoneda)
                    .HasConstraintName("FK_NET_MonedasTienda_MONEDAS");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetMonedasTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NET_MonedasTienda_NET_Tienda");
            });

            modelBuilder.Entity<NetMotivosDescuentoTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.IdMotivoDescuento });

                entity.ToTable("NET_MotivosDescuentoTienda");

                entity.HasOne(d => d.IdMotivoDescuentoNavigation)
                    .WithMany(p => p.NetMotivosDescuentoTienda)
                    .HasForeignKey(d => d.IdMotivoDescuento)
                    .HasConstraintName("FK_NET_MotivosDescuentoTienda_MOTIVOSDTO");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetMotivosDescuentoTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .HasConstraintName("FK_NET_MotivosDescuentoTienda_NET_Tienda");
            });

            modelBuilder.Entity<NetMotivosDevolucionTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.IdMotivoDevolucion });

                entity.ToTable("NET_MotivosDevolucionTienda");

                entity.HasOne(d => d.IdMotivoDevolucionNavigation)
                    .WithMany(p => p.NetMotivosDevolucionTienda)
                    .HasForeignKey(d => d.IdMotivoDevolucion)
                    .HasConstraintName("FK_NET_MotivosDevolucionTienda_MOTIVOSDEVOLUCION");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetMotivosDevolucionTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .HasConstraintName("FK_NET_MotivosDevolucionTienda_NET_Tienda1");
            });

            modelBuilder.Entity<NetPeticionReenvio>(entity =>
            {
                entity.HasKey(e => new { e.IdTerminal, e.IdEntidad });

                entity.ToTable("NET_PeticionReenvio");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.HasOne(d => d.IdTerminalNavigation)
                    .WithMany(p => p.NetPeticionReenvios)
                    .HasForeignKey(d => d.IdTerminal)
                    .HasConstraintName("FK_NET_PeticionReenvio_NET_Terminal");
            });

            modelBuilder.Entity<NetTarifasTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.IdTarifa });

                entity.ToTable("NET_TarifasTienda");

                entity.HasOne(d => d.IdTarifaNavigation)
                    .WithMany(p => p.NetTarifasTienda)
                    .HasForeignKey(d => d.IdTarifa)
                    .HasConstraintName("FK_NET_TarifasTienda_TARIFASVENTA");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetTarifasTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .HasConstraintName("FK_NET_TarifasTienda_NET_Tienda");
            });

            modelBuilder.Entity<NetTarjetaFidelizacion>(entity =>
            {
                entity.HasKey(e => e.IdTarjeta);

                entity.ToTable("NET_TarjetaFidelizacion");

                entity.Property(e => e.IdTarjeta).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).HasMaxLength(80);

                entity.Property(e => e.Descuento).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.IdMedioPago).HasMaxLength(2);

                entity.Property(e => e.InicioPista).HasMaxLength(5);

                entity.Property(e => e.Mascara).HasMaxLength(50);

                entity.Property(e => e.SeparadorCampos).HasMaxLength(5);
            });

            modelBuilder.Entity<NetTerminal>(entity =>
            {
                entity.HasKey(e => e.IdTerminal)
                    .HasName("PK_TERMINALTIENDA");

                entity.ToTable("NET_Terminal");

                entity.Property(e => e.IdTerminal).ValueGeneratedNever();

                entity.Property(e => e.FechaDownload).HasColumnType("datetime");

                entity.Property(e => e.FechaInicializacion).HasColumnType("datetime");

                entity.Property(e => e.FechaUpload).HasColumnType("datetime");

                entity.Property(e => e.NombreTerminal).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(20);

                entity.Property(e => e.Usuario).HasMaxLength(30);

                entity.HasOne(d => d.IdCajaNavigation)
                    .WithMany(p => p.NetTerminals)
                    .HasForeignKey(d => d.IdCaja)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_TERMINALTIENDA_CAJATIENDA");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetTerminals)
                    .HasForeignKey(d => d.IdTienda)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_TERMINALTIENDA_TIENDA");
            });

            modelBuilder.Entity<NetTiendum>(entity =>
            {
                entity.HasKey(e => e.IdTienda)
                    .HasName("PK_TIENDA");

                entity.ToTable("NET_Tienda");

                entity.Property(e => e.CampoImpuestoVenta).HasMaxLength(50);

                entity.Property(e => e.Cif).HasMaxLength(35);

                entity.Property(e => e.Codigo).HasMaxLength(5);

                entity.Property(e => e.CodigoPostal).HasMaxLength(15);

                entity.Property(e => e.Direccion).HasMaxLength(250);

                entity.Property(e => e.Direccion2).HasMaxLength(250);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Imagen).HasColumnType("image");

                entity.Property(e => e.Nombre).HasMaxLength(250);

                entity.Property(e => e.NombreComercial).HasMaxLength(250);

                entity.Property(e => e.Poblacion).HasMaxLength(80);

                entity.Property(e => e.Provincia).HasMaxLength(80);

                entity.Property(e => e.Telefono).HasMaxLength(35);

                entity.HasOne(d => d.IdGrupoTiendaNavigation)
                    .WithMany(p => p.NetTienda)
                    .HasForeignKey(d => d.IdGrupoTienda)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_NET_Tienda_NET_GrupoTienda");

                entity.HasOne(d => d.IdTipoTerminalNavigation)
                    .WithMany(p => p.NetTienda)
                    .HasForeignKey(d => d.IdTipoTerminal)
                    .HasConstraintName("FK_NET_Tienda_NET_TipoTerminal");
            });

            modelBuilder.Entity<NetTipoTerminal>(entity =>
            {
                entity.HasKey(e => e.IdTipoTerminal);

                entity.ToTable("NET_TipoTerminal");

                entity.Property(e => e.Descripcion).HasMaxLength(50);
            });

            modelBuilder.Entity<NetVendedoresTiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTienda, e.CodVendedor });

                entity.ToTable("NET_VendedoresTienda");

                entity.HasOne(d => d.CodVendedorNavigation)
                    .WithMany(p => p.NetVendedoresTienda)
                    .HasForeignKey(d => d.CodVendedor)
                    .HasConstraintName("FK_NET_VendedoresTienda_VENDEDORES1");

                entity.HasOne(d => d.IdTiendaNavigation)
                    .WithMany(p => p.NetVendedoresTienda)
                    .HasForeignKey(d => d.IdTienda)
                    .HasConstraintName("FK_NET_VendedoresTienda_NET_Tienda");
            });

            modelBuilder.Entity<Nombresdocsid>(entity =>
            {
                entity.HasKey(e => new { e.Codgrupo, e.Coddocumento })
                    .HasName("NOMBRESDOCSID_PK");

                entity.ToTable("NOMBRESDOCSID");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_NOMBRESDOCSIDVERSION");

                entity.Property(e => e.Codgrupo).HasColumnName("CODGRUPO");

                entity.Property(e => e.Coddocumento).HasColumnName("CODDOCUMENTO");

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Grupo)
                    .HasColumnName("GRUPO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Impresionrapida)
                    .HasColumnName("IMPRESIONRAPIDA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipodiseny).HasColumnName("TIPODISENY");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<NombresdocsidGruposalmacen>(entity =>
            {
                entity.HasKey(e => new { e.Codgrupo, e.Coddocumento, e.Codgrupoalmacen })
                    .HasName("NOMBRESDOCSID_GRUPOSALMACENPK");

                entity.ToTable("NOMBRESDOCSID_GRUPOSALMACEN");

                entity.Property(e => e.Codgrupo).HasColumnName("CODGRUPO");

                entity.Property(e => e.Coddocumento).HasColumnName("CODDOCUMENTO");

                entity.Property(e => e.Codgrupoalmacen).HasColumnName("CODGRUPOALMACEN");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.NombresdocsidGruposalmacens)
                    .HasForeignKey(d => new { d.Codgrupo, d.Coddocumento })
                    .HasConstraintName("FK_NOMBRESDOCSID_GRUPOSALMACENCLAVE");
            });

            modelBuilder.Entity<Nomina>(entity =>
            {
                entity.HasKey(e => new { e.Codempleado, e.Mes, e.Anyo })
                    .HasName("NOMINAS_PK");

                entity.ToTable("NOMINAS");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Anyo).HasColumnName("ANYO");

                entity.Property(e => e.Contabilizado).HasColumnName("CONTABILIZADO");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Retirpf).HasColumnName("RETIRPF");

                entity.Property(e => e.Ssempleado).HasColumnName("SSEMPLEADO");

                entity.Property(e => e.Ssempresa).HasColumnName("SSEMPRESA");

                entity.Property(e => e.TotalDevengado).HasColumnName("TOTAL_DEVENGADO");

                entity.HasOne(d => d.CodempleadoNavigation)
                    .WithMany(p => p.Nominas)
                    .HasForeignKey(d => d.Codempleado)
                    .HasConstraintName("NOMINAS_FK");
            });

            modelBuilder.Entity<Nominasenlacecontum>(entity =>
            {
                entity.HasKey(e => new { e.Mes, e.Anyo, e.EnlaceEmpresa, e.EnlaceEjercicio })
                    .HasName("NOMINASENLACECONTA_PK");

                entity.ToTable("NOMINASENLACECONTA");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Anyo).HasColumnName("ANYO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Norma>(entity =>
            {
                entity.HasKey(e => e.Codnorma)
                    .HasName("NORMAS_PK");

                entity.ToTable("NORMAS");

                entity.Property(e => e.Codnorma)
                    .HasColumnName("CODNORMA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Norma1)
                    .HasColumnName("NORMA")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Numerosserieregul>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacen })
                    .HasName("NUMEROSSERIEREGUL_PK");

                entity.ToTable("NUMEROSSERIEREGUL");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Numerosseriereguls)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("NUMEROSSERIEREGUL_FK");
            });

            modelBuilder.Entity<Ocupantesreserva>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idreserva, e.Idlinea, e.Orden })
                    .HasName("OCUPANTESRESERVA_PK");

                entity.ToTable("OCUPANTESRESERVA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Apellido1)
                    .HasColumnName("APELLIDO1")
                    .HasMaxLength(30);

                entity.Property(e => e.Apellido2)
                    .HasColumnName("APELLIDO2")
                    .HasMaxLength(30);

                entity.Property(e => e.Nif20)
                    .HasColumnName("NIF20")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombre1)
                    .HasColumnName("NOMBRE1")
                    .HasMaxLength(25);

                entity.Property(e => e.Nompersona)
                    .HasColumnName("NOMPERSONA")
                    .HasMaxLength(85);

                entity.HasOne(d => d.Reserva)
                    .WithMany(p => p.Ocupantesreservas)
                    .HasForeignKey(d => new { d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("RESERVAS_OCUPANTESRESERVA");
            });

            modelBuilder.Entity<Opcionestesorerium>(entity =>
            {
                entity.HasKey(e => e.Usuario)
                    .HasName("OPCIONESTESORERIA_PK");

                entity.ToTable("OPCIONESTESORERIA");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Ccoremcob).HasColumnName("CCOREMCOB");

                entity.Property(e => e.Ccorempag).HasColumnName("CCOREMPAG");

                entity.Property(e => e.Ccotraspcob).HasColumnName("CCOTRASPCOB");

                entity.Property(e => e.Ccotrasppag).HasColumnName("CCOTRASPPAG");

                entity.Property(e => e.Comremcob)
                    .HasColumnName("COMREMCOB")
                    .HasMaxLength(30);

                entity.Property(e => e.Comremcobbanco)
                    .HasColumnName("COMREMCOBBANCO")
                    .HasMaxLength(30);

                entity.Property(e => e.Comrempag)
                    .HasColumnName("COMREMPAG")
                    .HasMaxLength(30);

                entity.Property(e => e.Comrempagbanco)
                    .HasColumnName("COMREMPAGBANCO")
                    .HasMaxLength(30);

                entity.Property(e => e.Comtraspcob)
                    .HasColumnName("COMTRASPCOB")
                    .HasMaxLength(30);

                entity.Property(e => e.Comtrasppag)
                    .HasColumnName("COMTRASPPAG")
                    .HasMaxLength(30);

                entity.Property(e => e.Cueremcob)
                    .HasColumnName("CUEREMCOB")
                    .HasMaxLength(10);

                entity.Property(e => e.Cuerempag)
                    .HasColumnName("CUEREMPAG")
                    .HasMaxLength(10);

                entity.Property(e => e.Cuetraspcob)
                    .HasColumnName("CUETRASPCOB")
                    .HasMaxLength(10);

                entity.Property(e => e.Cuetrasppag)
                    .HasColumnName("CUETRASPPAG")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Ordenesfabcab>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.Numproducto })
                    .HasName("ORDENESFABCAB_PK");

                entity.ToTable("ORDENESFABCAB");

                entity.HasIndex(e => new { e.Codigoart, e.Talla, e.Color, e.Almacendestino })
                    .HasName("ORDENESFABCAB_ARTIC_ALM_DEST");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numproducto).HasColumnName("NUMPRODUCTO");

                entity.Property(e => e.Acabada)
                    .HasColumnName("ACABADA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Almacendestino)
                    .HasColumnName("ALMACENDESTINO")
                    .HasMaxLength(3);

                entity.Property(e => e.Almacenorigen)
                    .HasColumnName("ALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codigoart).HasColumnName("CODIGOART");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Desglosado)
                    .HasColumnName("DESGLOSADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.EnlaceAsientoAct).HasColumnName("ENLACE_ASIENTO_ACT");

                entity.Property(e => e.EnlaceAsientoFin).HasColumnName("ENLACE_ASIENTO_FIN");

                entity.Property(e => e.EnlaceEjercicioAct).HasColumnName("ENLACE_EJERCICIO_ACT");

                entity.Property(e => e.EnlaceEjercicioFin).HasColumnName("ENLACE_EJERCICIO_FIN");

                entity.Property(e => e.EnlaceEmpresaAct).HasColumnName("ENLACE_EMPRESA_ACT");

                entity.Property(e => e.EnlaceEmpresaFin).HasColumnName("ENLACE_EMPRESA_FIN");

                entity.Property(e => e.EnlaceUsuarioAct)
                    .HasColumnName("ENLACE_USUARIO_ACT")
                    .HasMaxLength(10);

                entity.Property(e => e.EnlaceUsuarioFin)
                    .HasColumnName("ENLACE_USUARIO_FIN")
                    .HasMaxLength(10);

                entity.Property(e => e.Fabricando)
                    .HasColumnName("FABRICANDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechainicio)
                    .HasColumnName("FECHAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaorden)
                    .HasColumnName("FECHAORDEN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechataller)
                    .HasColumnName("FECHATALLER")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numetiquetas)
                    .HasColumnName("NUMETIQUETAS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(35);

                entity.Property(e => e.Peso)
                    .HasColumnName("PESO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Preparada)
                    .HasColumnName("PREPARADA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Prorrateo)
                    .HasColumnName("PRORRATEO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Taller).HasColumnName("TALLER");

                entity.Property(e => e.Tarifaprorrateo)
                    .HasColumnName("TARIFAPRORRATEO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Vienedefo)
                    .HasColumnName("VIENEDEFO")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Ordenesfabfase>(entity =>
            {
                entity.HasKey(e => new { e.Seriefab, e.Numfab, e.Numfase, e.Numseriefabricado, e.Numseriecomponente })
                    .HasName("ORDENESFABFASESPK");

                entity.ToTable("ORDENESFABFASES");

                entity.Property(e => e.Seriefab)
                    .HasColumnName("SERIEFAB")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfab).HasColumnName("NUMFAB");

                entity.Property(e => e.Numfase).HasColumnName("NUMFASE");

                entity.Property(e => e.Numseriefabricado)
                    .HasColumnName("NUMSERIEFABRICADO")
                    .HasMaxLength(50);

                entity.Property(e => e.Numseriecomponente)
                    .HasColumnName("NUMSERIECOMPONENTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Ordenesfablin>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.Codigoart, e.Talla, e.Color })
                    .HasName("ORDENESFABLIN_PK");

                entity.ToTable("ORDENESFABLIN");

                entity.HasIndex(e => new { e.Codigoart, e.Talla, e.Color })
                    .HasName("STOCKSPORZ_ARTIC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Codigoart).HasColumnName("CODIGOART");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Desglosado)
                    .HasColumnName("DESGLOSADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Pesototal)
                    .HasColumnName("PESOTOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Udscomponente).HasColumnName("UDSCOMPONENTE");

                entity.Property(e => e.Udstotal).HasColumnName("UDSTOTAL");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");
            });

            modelBuilder.Entity<Ordenesmenudetalle>(entity =>
            {
                entity.HasKey(e => new { e.Codmodificador, e.Orden })
                    .HasName("ORDENESMENUDETALLE_PK");

                entity.ToTable("ORDENESMENUDETALLE");

                entity.Property(e => e.Codmodificador).HasColumnName("CODMODIFICADOR");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.HasOne(d => d.CodmodificadorNavigation)
                    .WithMany(p => p.Ordenesmenudetalles)
                    .HasForeignKey(d => d.Codmodificador)
                    .HasConstraintName("ORDENESMENUDETALLE_FK");
            });

            modelBuilder.Entity<Pago>(entity =>
            {
                entity.HasKey(e => new { e.Caja, e.Tipo, e.Numero, e.N, e.Cajaorigen })
                    .HasName("PAGOS_PK");

                entity.ToTable("PAGOS");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cajaorigen)
                    .HasColumnName("CAJAORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Cajadevuelta)
                    .HasColumnName("CAJADEVUELTA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cajaingreso)
                    .HasColumnName("CAJAINGRESO")
                    .HasMaxLength(3);

                entity.Property(e => e.Codconceptopago).HasColumnName("CODCONCEPTOPAGO");

                entity.Property(e => e.Codmediopago)
                    .HasColumnName("CODMEDIOPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(50);

                entity.Property(e => e.Comisioncambio).HasColumnName("COMISIONCAMBIO");

                entity.Property(e => e.Cuentadegastos)
                    .HasColumnName("CUENTADEGASTOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentadepagos)
                    .HasColumnName("CUENTADEPAGOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaingreso)
                    .HasColumnName("CUENTAINGRESO")
                    .HasMaxLength(12);

                entity.Property(e => e.Devuelto).HasColumnName("DEVUELTO");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Factor).HasColumnName("FACTOR");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Ndoc)
                    .HasColumnName("NDOC")
                    .HasMaxLength(1);

                entity.Property(e => e.Nif)
                    .HasColumnName("NIF")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Numerodevuelto).HasColumnName("NUMERODEVUELTO");

                entity.Property(e => e.Numerodoc).HasColumnName("NUMERODOC");

                entity.Property(e => e.Numsalidas).HasColumnName("NUMSALIDAS");

                entity.Property(e => e.Origen)
                    .HasColumnName("ORIGEN")
                    .HasMaxLength(50);

                entity.Property(e => e.Planta).HasColumnName("PLANTA");

                entity.Property(e => e.Seriedoc)
                    .HasColumnName("SERIEDOC")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriereserva)
                    .HasColumnName("SERIERESERVA")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipomovcaja).HasColumnName("TIPOMOVCAJA");

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");

                entity.Property(e => e.Zingreso).HasColumnName("ZINGRESO");
            });

            modelBuilder.Entity<Paise>(entity =>
            {
                entity.HasKey(e => e.Codpais)
                    .HasName("PAISES_PK");

                entity.ToTable("PAISES");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Alfa3)
                    .HasColumnName("ALFA3")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Descripcionpolicia)
                    .HasColumnName("DESCRIPCIONPOLICIA")
                    .HasMaxLength(50);

                entity.Property(e => e.Iso3166).HasColumnName("ISO3166");

                entity.Property(e => e.Zona)
                    .HasColumnName("ZONA")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Paqueteshotelcliente>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Codcliente })
                    .HasName("PAQUETESHOTELCLIENTE_PK");

                entity.ToTable("PAQUETESHOTELCLIENTE");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Combruto)
                    .IsRequired()
                    .HasColumnName("COMBRUTO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Paqueteshotelclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("PAQUETESHOTELCLIENTE_FKCLIENTE");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Paqueteshotelclientes)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("PAQUETESHOTELCLIENTE_FKTARIFASHOTEL");
            });

            modelBuilder.Entity<Parametro>(entity =>
            {
                entity.HasKey(e => new { e.Clave, e.Subclave, e.Usuario })
                    .HasName("PARAMETROS_PK");

                entity.ToTable("PARAMETROS");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Subclave)
                    .HasColumnName("SUBCLAVE")
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(25);

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<Parametrostiposterminal>(entity =>
            {
                entity.HasKey(e => new { e.Terminal, e.Clave })
                    .HasName("PARAMETROSTIPOSTERMINAL_PK");

                entity.ToTable("PARAMETROSTIPOSTERMINAL");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(25);

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Pasarelapago>(entity =>
            {
                entity.HasKey(e => e.Idpasarela);

                entity.ToTable("PASARELAPAGO");

                entity.Property(e => e.Idpasarela)
                    .HasColumnName("IDPASARELA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(10);

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(60);

                entity.Property(e => e.Clavedescarga)
                    .HasColumnName("CLAVEDESCARGA")
                    .HasMaxLength(50);

                entity.Property(e => e.Codcomercio)
                    .HasColumnName("CODCOMERCIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Nombrecomercio)
                    .HasColumnName("NOMBRECOMERCIO")
                    .HasMaxLength(200);

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Titularcomercio)
                    .HasColumnName("TITULARCOMERCIO")
                    .HasMaxLength(200);

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(200);

                entity.Property(e => e.Urlko)
                    .HasColumnName("URLKO")
                    .HasMaxLength(200);

                entity.Property(e => e.Urlok)
                    .HasColumnName("URLOK")
                    .HasMaxLength(200);

                entity.Property(e => e.Urlrespuesta)
                    .HasColumnName("URLRESPUESTA")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Pedcompracab>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N })
                    .HasName("PEDCOMPRACAB_PK");

                entity.ToTable("PEDCOMPRACAB");

                entity.HasIndex(e => e.Codproveedor)
                    .HasName("PEDCOMPRACAB_PROVEEDOR");

                entity.HasIndex(e => e.Fechapedido)
                    .HasName("PEDCOMPRACAB_FECHA");

                entity.HasIndex(e => e.Supedido)
                    .HasName("PEDCOMPRACAB_SUPEDIDO");

                entity.HasIndex(e => new { e.Numserie, e.Numpedido, e.N })
                    .HasName("PEDCOMPRACAB_DESC");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechapedido)
                    .HasColumnName("FECHAPEDIDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Frompedventacentral)
                    .HasColumnName("FROMPEDVENTACENTRAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nalbaran)
                    .HasColumnName("NALBARAN")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numeroalbaran).HasColumnName("NUMEROALBARAN");

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seriealbaran)
                    .HasColumnName("SERIEALBARAN")
                    .HasMaxLength(4);

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Todorecibido)
                    .HasColumnName("TODORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totbruto).HasColumnName("TOTBRUTO");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totimpuestos).HasColumnName("TOTIMPUESTOS");

                entity.Property(e => e.Totneto).HasColumnName("TOTNETO");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Pedcompracabt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PEDCOMPRACABT");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechapedido)
                    .HasColumnName("FECHAPEDIDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Frompedventacentral)
                    .HasColumnName("FROMPEDVENTACENTRAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nalbaran)
                    .HasColumnName("NALBARAN")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numeroalbaran).HasColumnName("NUMEROALBARAN");

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.Numserie)
                    .IsRequired()
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seriealbaran)
                    .HasColumnName("SERIEALBARAN")
                    .HasMaxLength(4);

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Todorecibido)
                    .HasColumnName("TODORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totbruto).HasColumnName("TOTBRUTO");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totimpuestos).HasColumnName("TOTIMPUESTOS");

                entity.Property(e => e.Totneto).HasColumnName("TOTNETO");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Pedcompracamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N })
                    .HasName("PEDCOMPRACAMPOSLIBRES_PK");

                entity.ToTable("PEDCOMPRACAMPOSLIBRES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasColumnName("DOCUMENTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Generado)
                    .HasColumnName("GENERADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numero)
                    .HasColumnName("NUMERO")
                    .HasMaxLength(10);

                entity.Property(e => e.Sucursal)
                    .HasColumnName("SUCURSAL")
                    .HasMaxLength(50);

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Pedcompracamposlibre)
                    .HasForeignKey<Pedcompracamposlibre>(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDCOMPRACAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Pedcompradto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea })
                    .HasName("PEDCOMPRADTOS_PK");

                entity.ToTable("PEDCOMPRADTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedcompradtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N })
                    .HasConstraintName("PEDCOMPRADTOS_FK");
            });

            modelBuilder.Entity<Pedcomprafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("PEDCOMPRAFIRMA_PK");

                entity.ToTable("PEDCOMPRAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Atdoccodeid)
                    .HasColumnName("ATDOCCODEID")
                    .HasMaxLength(250);

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.Pedcompracab)
                    .WithOne(p => p.Pedcomprafirma)
                    .HasForeignKey<Pedcomprafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("PEDCOMPRAFIRMA_FK");
            });

            modelBuilder.Entity<Pedcompralin>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Numlinea })
                    .HasName("PEDCOMPRALIN_PK");

                entity.ToTable("PEDCOMPRALIN");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("PEDCOMPRALINPORCODARTIC");

                entity.HasIndex(e => e.Supedido)
                    .HasName("PEDCOMPRALIN_SUPEDIDO");

                entity.HasIndex(e => new { e.Codarticulo, e.Color, e.Talla })
                    .HasName("PEDCOMPRALIN_CODCOLORTALLA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Deposito)
                    .HasColumnName("DEPOSITO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtotexto)
                    .HasColumnName("DTOTEXTO")
                    .HasMaxLength(60);

                entity.Property(e => e.Esoferta)
                    .HasColumnName("ESOFERTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lineaoculta)
                    .HasColumnName("LINEAOCULTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioventa).HasColumnName("PRECIOVENTA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Totallinea).HasColumnName("TOTALLINEA");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Unid1).HasColumnName("UNID1");

                entity.Property(e => e.Unid2).HasColumnName("UNID2");

                entity.Property(e => e.Unid3).HasColumnName("UNID3");

                entity.Property(e => e.Unid4).HasColumnName("UNID4");

                entity.Property(e => e.Unidadespen).HasColumnName("UNIDADESPEN");

                entity.Property(e => e.Unidadesrec).HasColumnName("UNIDADESREC");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedcompralins)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDCOMPRALIN_FK");
            });

            modelBuilder.Entity<Pedcompralint>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PEDCOMPRALINT");

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio).HasColumnName("CODENVIO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Deposito)
                    .HasColumnName("DEPOSITO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtotexto)
                    .HasColumnName("DTOTEXTO")
                    .HasMaxLength(60);

                entity.Property(e => e.Esoferta)
                    .HasColumnName("ESOFERTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lineaoculta)
                    .HasColumnName("LINEAOCULTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.Numserie)
                    .IsRequired()
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioventa).HasColumnName("PRECIOVENTA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Totallinea).HasColumnName("TOTALLINEA");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Unid1).HasColumnName("UNID1");

                entity.Property(e => e.Unid2).HasColumnName("UNID2");

                entity.Property(e => e.Unid3).HasColumnName("UNID3");

                entity.Property(e => e.Unid4).HasColumnName("UNID4");

                entity.Property(e => e.Unidadespen).HasColumnName("UNIDADESPEN");

                entity.Property(e => e.Unidadesrec).HasColumnName("UNIDADESREC");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");
            });

            modelBuilder.Entity<Pedcompratalla>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Numlinea, e.Talla })
                    .HasName("PEDCOMPRATALLAS_PK");

                entity.ToTable("PEDCOMPRATALLAS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Udspedidas).HasColumnName("UDSPEDIDAS");

                entity.Property(e => e.Udspendientes).HasColumnName("UDSPENDIENTES");

                entity.Property(e => e.Udsrecibidas).HasColumnName("UDSRECIBIDAS");
            });

            modelBuilder.Entity<Pedcompratot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("PEDCOMPRATOT_PK");

                entity.ToTable("PEDCOMPRATOT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.HasOne(d => d.Pedcompracab)
                    .WithMany(p => p.Pedcompratots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("PEDCOMPRATOT_FK");
            });

            modelBuilder.Entity<Pedtmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PEDTMP");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pedventacab>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N })
                    .HasName("PEDVENTACAB_PK");

                entity.ToTable("PEDVENTACAB");

                entity.HasIndex(e => e.Codcliente)
                    .HasName("PEDVENTACAB_CODCLIENTE");

                entity.HasIndex(e => e.Fechapedido)
                    .HasName("PEDVENTACAB_FECHA");

                entity.HasIndex(e => e.Supedido)
                    .HasName("PEDVENTACAB_SUPEDIDO");

                entity.HasIndex(e => new { e.Numserie, e.Numpedido, e.N })
                    .HasName("PEDVENTACAB_DESC");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Condentrega)
                    .HasColumnName("CONDENTREGA")
                    .HasMaxLength(3);

                entity.Property(e => e.Condentregaedi)
                    .HasColumnName("CONDENTREGAEDI")
                    .HasMaxLength(3);

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Estadoreserva).HasColumnName("ESTADORESERVA");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechapedido)
                    .HasColumnName("FECHAPEDIDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaentrega)
                    .HasColumnName("HORAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Impgastoscancel).HasColumnName("IMPGASTOSCANCEL");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nalbaran)
                    .HasColumnName("NALBARAN")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1);

                entity.Property(e => e.Numeroalbaran).HasColumnName("NUMEROALBARAN");

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Observreserva)
                    .HasColumnName("OBSERVRESERVA")
                    .HasColumnType("ntext");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seriealbaran)
                    .HasColumnName("SERIEALBARAN")
                    .HasMaxLength(4);

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tiporeserva).HasColumnName("TIPORESERVA");

                entity.Property(e => e.Todorecibido)
                    .HasColumnName("TODORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Totalcargosdtos)
                    .HasColumnName("TOTALCARGOSDTOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcosteiva)
                    .HasColumnName("TOTALCOSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totbruto).HasColumnName("TOTBRUTO");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totimpuestos).HasColumnName("TOTIMPUESTOS");

                entity.Property(e => e.Totneto).HasColumnName("TOTNETO");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Pedventacabt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PEDVENTACABT");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Condentrega)
                    .HasColumnName("CONDENTREGA")
                    .HasMaxLength(3);

                entity.Property(e => e.Condentregaedi)
                    .HasColumnName("CONDENTREGAEDI")
                    .HasMaxLength(3);

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Estadoreserva).HasColumnName("ESTADORESERVA");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechapedido)
                    .HasColumnName("FECHAPEDIDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaentrega)
                    .HasColumnName("HORAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Impgastoscancel).HasColumnName("IMPGASTOSCANCEL");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nalbaran)
                    .HasColumnName("NALBARAN")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nbultos).HasColumnName("NBULTOS");

                entity.Property(e => e.Norecibido)
                    .HasColumnName("NORECIBIDO")
                    .HasMaxLength(1);

                entity.Property(e => e.Numeroalbaran).HasColumnName("NUMEROALBARAN");

                entity.Property(e => e.Numimpresiones).HasColumnName("NUMIMPRESIONES");

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Numserie)
                    .IsRequired()
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Observreserva)
                    .HasColumnName("OBSERVRESERVA")
                    .HasColumnType("ntext");

                entity.Property(e => e.Portespag)
                    .HasColumnName("PORTESPAG")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seriealbaran)
                    .HasColumnName("SERIEALBARAN")
                    .HasMaxLength(4);

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tiporeserva).HasColumnName("TIPORESERVA");

                entity.Property(e => e.Todorecibido)
                    .HasColumnName("TODORECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Totalcargosdtos)
                    .HasColumnName("TOTALCARGOSDTOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcosteiva)
                    .HasColumnName("TOTALCOSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totbruto).HasColumnName("TOTBRUTO");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totimpuestos).HasColumnName("TOTIMPUESTOS");

                entity.Property(e => e.Totneto).HasColumnName("TOTNETO");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Pedventacamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N })
                    .HasName("PEDVENTACAMPOSLIBRES_PK");

                entity.ToTable("PEDVENTACAMPOSLIBRES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Requisicion)
                    .HasColumnName("REQUISICION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.NNavigation)
                    .WithOne(p => p.Pedventacamposlibre)
                    .HasForeignKey<Pedventacamposlibre>(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDVENTACAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Pedventaconsumo>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Numlinea, e.Codarticulo })
                    .HasName("PEDVENTACONSUMO_PK");

                entity.ToTable("PEDVENTACONSUMO");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Consumo).HasColumnName("CONSUMO");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventaconsumos)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDVENTACONSUMO_FK");
            });

            modelBuilder.Entity<Pedventacupone>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Eancupon })
                    .HasName("PEDVENTACUPONES_PK");

                entity.ToTable("PEDVENTACUPONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Eancupon)
                    .HasColumnName("EANCUPON")
                    .HasMaxLength(30);

                entity.Property(e => e.Idcupon).HasColumnName("IDCUPON");

                entity.Property(e => e.Importedto).HasColumnName("IMPORTEDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventacupones)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDVENTACUPONES_FK");
            });

            modelBuilder.Entity<Pedventacuponesgenerado>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Idpromocion, e.Eancupon })
                    .HasName("PEDVENTACUPONESGENERADOS_PK");

                entity.ToTable("PEDVENTACUPONESGENERADOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Eancupon)
                    .HasColumnName("EANCUPON")
                    .HasMaxLength(30);

                entity.Property(e => e.Importedto).HasColumnName("IMPORTEDTO");

                entity.Property(e => e.PromocionesclienteIdpromocion).HasColumnName("PROMOCIONESCLIENTE_IDPROMOCION");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventacuponesgenerados)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDVENTACUPONESGENERADOS_FK");
            });

            modelBuilder.Entity<Pedventadto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea })
                    .HasName("PEDVENTADTOS_PK");

                entity.ToTable("PEDVENTADTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventadtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N })
                    .HasConstraintName("PEDVENTADTOS_FK");
            });

            modelBuilder.Entity<Pedventafirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("PEDVENTAFIRMA_PK");

                entity.ToTable("PEDVENTAFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Claveacceso)
                    .HasColumnName("CLAVEACCESO")
                    .HasMaxLength(49);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Estado1).HasColumnName("ESTADO1");

                entity.Property(e => e.Estado2).HasColumnName("ESTADO2");

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.Pedventacab)
                    .WithOne(p => p.Pedventafirma)
                    .HasForeignKey<Pedventafirma>(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("PEDVENTAFIRMA_FK");
            });

            modelBuilder.Entity<Pedventalin>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Numlin })
                    .HasName("PEDVENTALIN_PK");

                entity.ToTable("PEDVENTALIN");

                entity.HasIndex(e => e.Codalmacen)
                    .HasName("PEDVENTALIN_CODALMACEN");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("PEDVENTALINPORCODARTICULO");

                entity.HasIndex(e => new { e.Codarticulo, e.Color, e.Talla })
                    .HasName("PEDVENTALIN_CODCOLORTALLA");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codenvio)
                    .HasColumnName("CODENVIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codmacro).HasColumnName("CODMACRO");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Costeiva)
                    .HasColumnName("COSTEIVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtoantespromocion).HasColumnName("DTOANTESPROMOCION");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Importeantespromocion).HasColumnName("IMPORTEANTESPROMOCION");

                entity.Property(e => e.Importeantespromocioniva).HasColumnName("IMPORTEANTESPROMOCIONIVA");

                entity.Property(e => e.Impreso).HasColumnName("IMPRESO");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lineaoculta)
                    .HasColumnName("LINEAOCULTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Pesounitario).HasColumnName("PESOUNITARIO");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Prestamo)
                    .HasColumnName("PRESTAMO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tarifaantespromocion).HasColumnName("TARIFAANTESPROMOCION");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Udspedidas).HasColumnName("UDSPEDIDAS");

                entity.Property(e => e.Unid1).HasColumnName("UNID1");

                entity.Property(e => e.Unid2).HasColumnName("UNID2");

                entity.Property(e => e.Unid3).HasColumnName("UNID3");

                entity.Property(e => e.Unid4).HasColumnName("UNID4");

                entity.Property(e => e.Unidadespen).HasColumnName("UNIDADESPEN");

                entity.Property(e => e.Unidadesrec).HasColumnName("UNIDADESREC");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventalins)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDVENTALIN_FK");
            });

            modelBuilder.Entity<Pedventalinpromocione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Numlin, e.Idpromocion })
                    .HasName("PEDVENTALINPROMOCIONES_PK");

                entity.ToTable("PEDVENTALINPROMOCIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importepromocion).HasColumnName("IMPORTEPROMOCION");

                entity.Property(e => e.Importepromocioniva).HasColumnName("IMPORTEPROMOCIONIVA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventalinpromociones)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N, d.Numlin })
                    .HasConstraintName("PEDVENTALINPROMOCIONES_FK");
            });

            modelBuilder.Entity<Pedventamodif>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Numlinea, e.Nummodif })
                    .HasName("PEDVENTAMODIF_PK");

                entity.ToTable("PEDVENTAMODIF");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Nummodif).HasColumnName("NUMMODIF");

                entity.Property(e => e.Anulado).HasColumnName("ANULADO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codmodif).HasColumnName("CODMODIF");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Dosis).HasColumnName("DOSIS");

                entity.Property(e => e.Esarticulo).HasColumnName("ESARTICULO");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Incprecio).HasColumnName("INCPRECIO");

                entity.Property(e => e.Incpreciobase).HasColumnName("INCPRECIOBASE");

                entity.Property(e => e.Nivel).HasColumnName("NIVEL");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventamodifs)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDVENTAMODIF_FK");
            });

            modelBuilder.Entity<Pedventapromocione>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpedido, e.N, e.Idpromocion })
                    .HasName("PEDVENTAPROMOCIONES_PK");

                entity.ToTable("PEDVENTAPROMOCIONES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpedido).HasColumnName("NUMPEDIDO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Pedventapromociones)
                    .HasForeignKey(d => new { d.Numserie, d.Numpedido, d.N })
                    .HasConstraintName("PEDVENTAPROMOCIONES_FK");
            });

            modelBuilder.Entity<Pedventatot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("PEDVENTATOT_PK");

                entity.ToTable("PEDVENTATOT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Esgasto)
                    .HasColumnName("ESGASTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.HasOne(d => d.Pedventacab)
                    .WithMany(p => p.Pedventatots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N })
                    .HasConstraintName("PEDVENTATOT_FK");
            });

            modelBuilder.Entity<Persona>(entity =>
            {
                entity.HasKey(e => e.Nif)
                    .HasName("PERSONAS_PK");

                entity.ToTable("PERSONAS");

                entity.Property(e => e.Nif)
                    .HasColumnName("NIF")
                    .HasMaxLength(20);

                entity.Property(e => e.Apellido1)
                    .HasColumnName("APELLIDO1")
                    .HasMaxLength(30);

                entity.Property(e => e.Apellido2)
                    .HasColumnName("APELLIDO2")
                    .HasMaxLength(30);

                entity.Property(e => e.Boleanos)
                    .HasColumnName("BOLEANOS")
                    .HasMaxLength(15);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpaisnacionalidad)
                    .HasColumnName("CODPAISNACIONALIDAD")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Comentarios)
                    .HasColumnName("COMENTARIOS")
                    .HasColumnType("ntext");

                entity.Property(e => e.Comunidadcod)
                    .HasColumnName("COMUNIDADCOD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(30);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(35);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechaexpedicion)
                    .HasColumnName("FECHAEXPEDICION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechanacimiento)
                    .HasColumnName("FECHANACIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Idioma).HasColumnName("IDIOMA");

                entity.Property(e => e.Idtipodoc).HasColumnName("IDTIPODOC");

                entity.Property(e => e.Imagendoc)
                    .HasColumnName("IMAGENDOC")
                    .HasColumnType("image");

                entity.Property(e => e.Lugarnacimiento)
                    .HasColumnName("LUGARNACIMIENTO")
                    .HasMaxLength(30);

                entity.Property(e => e.Matricula)
                    .HasColumnName("MATRICULA")
                    .HasMaxLength(15);

                entity.Property(e => e.Modelo)
                    .HasColumnName("MODELO")
                    .HasMaxLength(25);

                entity.Property(e => e.Nacionalidad)
                    .HasColumnName("NACIONALIDAD")
                    .HasMaxLength(30);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(85);

                entity.Property(e => e.Nombre1)
                    .HasColumnName("NOMBRE1")
                    .HasMaxLength(25);

                entity.Property(e => e.Numtarjeta)
                    .HasColumnName("NUMTARJETA")
                    .HasMaxLength(20);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(25);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(25);

                entity.Property(e => e.Sexo)
                    .HasColumnName("SEXO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tarcaducidad)
                    .HasColumnName("TARCADUCIDAD")
                    .HasMaxLength(4);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipotarjeta).HasColumnName("TIPOTARJETA");
            });

            modelBuilder.Entity<Planta>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Planta1 })
                    .HasName("PLANTAS_PK");

                entity.ToTable("PLANTAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PLANTASVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Planta1).HasColumnName("PLANTA");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Plantilla>(entity =>
            {
                entity.HasKey(e => new { e.Tipoplantilla, e.Tipocolumna })
                    .HasName("PLANTILLAS_PK");

                entity.ToTable("PLANTILLAS");

                entity.Property(e => e.Tipoplantilla)
                    .HasColumnName("TIPOPLANTILLA")
                    .HasMaxLength(20);

                entity.Property(e => e.Tipocolumna)
                    .HasColumnName("TIPOCOLUMNA")
                    .HasMaxLength(20);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Titulocolumna)
                    .HasColumnName("TITULOCOLUMNA")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Plantillasusuario>(entity =>
            {
                entity.HasKey(e => new { e.Tituloplantilla, e.Tipoplantilla, e.Tipocolumna })
                    .HasName("PLANTILLASUSUARIO_PK");

                entity.ToTable("PLANTILLASUSUARIO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PLANTILLASUSUARIOVERSION");

                entity.Property(e => e.Tituloplantilla)
                    .HasColumnName("TITULOPLANTILLA")
                    .HasMaxLength(20);

                entity.Property(e => e.Tipoplantilla)
                    .HasColumnName("TIPOPLANTILLA")
                    .HasMaxLength(20);

                entity.Property(e => e.Tipocolumna)
                    .HasColumnName("TIPOCOLUMNA")
                    .HasMaxLength(20);

                entity.Property(e => e.Activa)
                    .HasColumnName("ACTIVA")
                    .HasMaxLength(1);

                entity.Property(e => e.Ancho).HasColumnName("ANCHO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Decimales).HasColumnName("DECIMALES");

                entity.Property(e => e.Multiple).HasColumnName("MULTIPLE");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Programa).HasColumnName("PROGRAMA");

                entity.Property(e => e.Titulocolumna)
                    .HasColumnName("TITULOCOLUMNA")
                    .HasMaxLength(20);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Pluggin>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PLUGGINS_PK");

                entity.ToTable("PLUGGINS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PLUGGINSVERSION");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comando)
                    .HasColumnName("COMANDO")
                    .HasMaxLength(500);

                entity.Property(e => e.Cuando).HasColumnName("CUANDO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Filenamexml)
                    .HasColumnName("FILENAMEXML")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Plugginsempresa>(entity =>
            {
                entity.HasKey(e => new { e.Posicion, e.Codigo })
                    .HasName("PLUGGINSEMPRESA_PK");

                entity.ToTable("PLUGGINSEMPRESA");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");
            });

            modelBuilder.Entity<Plugin>(entity =>
            {
                entity.HasKey(e => e.Idplugin);

                entity.ToTable("PLUGINS");

                entity.Property(e => e.Idplugin)
                    .HasColumnName("IDPLUGIN")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Dllname)
                    .HasColumnName("DLLNAME")
                    .HasMaxLength(30);

                entity.Property(e => e.Idioma)
                    .HasColumnName("IDIOMA")
                    .HasMaxLength(5);

                entity.Property(e => e.Idmodulo).HasColumnName("IDMODULO");

                entity.Property(e => e.Imageindex).HasColumnName("IMAGEINDEX");

                entity.Property(e => e.Menucaption)
                    .HasColumnName("MENUCAPTION")
                    .HasMaxLength(30);

                entity.Property(e => e.Menuitem)
                    .HasColumnName("MENUITEM")
                    .HasMaxLength(30);

                entity.Property(e => e.Pluginname)
                    .HasColumnName("PLUGINNAME")
                    .HasMaxLength(30);

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.Property(e => e.Versionmanager).HasColumnName("VERSIONMANAGER");
            });

            modelBuilder.Entity<PmSituacione>(entity =>
            {
                entity.HasKey(e => new { e.Idsituacion, e.Clave, e.Subclave })
                    .HasName("PM_SITUACIONES_PK");

                entity.ToTable("PM_SITUACIONES");

                entity.Property(e => e.Idsituacion).HasColumnName("IDSITUACION");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Subclave)
                    .HasColumnName("SUBCLAVE")
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<PmTerminale>(entity =>
            {
                entity.HasKey(e => e.Idterminal)
                    .HasName("PM_TERMINALES_PK");

                entity.ToTable("PM_TERMINALES");

                entity.Property(e => e.Idterminal)
                    .HasColumnName("IDTERMINAL")
                    .HasMaxLength(25);

                entity.Property(e => e.Docimpreso)
                    .HasColumnName("DOCIMPRESO")
                    .HasMaxLength(70);

                entity.Property(e => e.Idultimaop)
                    .HasColumnName("IDULTIMAOP")
                    .HasMaxLength(15);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodocimpreso)
                    .HasColumnName("TIPODOCIMPRESO")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Preciosc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_PRECIOSC");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Costo).HasColumnName("COSTO");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Precioscompra>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Idtarifac, e.N, e.Codarticulo, e.Talla, e.Color, e.X, e.Codformato })
                    .HasName("PRECIOSCOMPRA_PK");

                entity.ToTable("PRECIOSCOMPRA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PRECIOSCOMPRAVERSION");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color })
                    .HasName("PRECIOSCOMPRA_CODART_TALLA_COLOR");

                entity.HasIndex(e => new { e.Codproveedor, e.Idtarifac, e.Codarticulo, e.Talla, e.Color })
                    .HasName("PRECIOSCOMPRA_FECHAMODIFICADO");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Idtarifac).HasColumnName("IDTARIFAC");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("('B')");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dtotexto)
                    .HasColumnName("DTOTEXTO")
                    .HasMaxLength(60);

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pbruto).HasColumnName("PBRUTO");

                entity.Property(e => e.Pneto).HasColumnName("PNETO");

                entity.Property(e => e.Pnetoanterior).HasColumnName("PNETOANTERIOR");

                entity.Property(e => e.Totaldto).HasColumnName("TOTALDTO");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Tarifascompra)
                    .WithMany(p => p.Precioscompras)
                    .HasForeignKey(d => new { d.Codproveedor, d.Idtarifac })
                    .HasConstraintName("FK__PRECIOSCOMPRA__4EC8A2F6");

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Precioscompras)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("PRECIOSCOMPRA_FK");
            });

            modelBuilder.Entity<Precioshabitaciondium>(entity =>
            {
                entity.HasKey(e => new { e.Dia, e.Codcliente, e.Codtarifa, e.Codhabitacion })
                    .HasName("PRECIOSHABITACIONDIA_PK");

                entity.ToTable("PRECIOSHABITACIONDIA");

                entity.Property(e => e.Dia)
                    .HasColumnName("DIA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codhabitacion).HasColumnName("CODHABITACION");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodhabitacionNavigation)
                    .WithMany(p => p.Precioshabitaciondia)
                    .HasForeignKey(d => d.Codhabitacion)
                    .HasConstraintName("PRECIOSHABITACIONDIA_FKHABITACION");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Precioshabitaciondia)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("PRECIOSHABITACIONDIA_FKTARIFA");
            });

            modelBuilder.Entity<Precioshotel>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Idtemporada, e.Codarticulo, e.Codcliente, e.Idrango, e.Codhabitacion, e.Tipo, e.Subtipo })
                    .HasName("PRECIOSHOTEL_PK");

                entity.ToTable("PRECIOSHOTEL");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PRECIOSHOTELVERSION");

                entity.HasIndex(e => new { e.Codtarifa, e.Codcliente, e.Idrango, e.Idtemporada, e.Codhabitacion, e.Codarticulo, e.Precio })
                    .HasName("PRECIOSHOTEL_CODHAB");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Idrango).HasColumnName("IDRANGO");

                entity.Property(e => e.Codhabitacion)
                    .HasColumnName("CODHABITACION")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Dtotextosle)
                    .HasColumnName("DTOTEXTOSLE")
                    .HasMaxLength(10);

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Produccion).HasColumnName("PRODUCCION");

                entity.Property(e => e.Produccionextras).HasColumnName("PRODUCCIONEXTRAS");

                entity.Property(e => e.Produccionservicios).HasColumnName("PRODUCCIONSERVICIOS");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Precioshotels)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("PRECIOSHOTEL_FKTARIFA");

                entity.HasOne(d => d.IdrangoNavigation)
                    .WithMany(p => p.Precioshotels)
                    .HasForeignKey(d => d.Idrango)
                    .HasConstraintName("PRECIOSHOTEL_FKRANGOS");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Precioshotels)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("PRECIOSHOTEL_FKTEMPORADAS");
            });

            modelBuilder.Entity<Precioshoteldium>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Codtarifa, e.Codhabitacion, e.Dia, e.Codregimen });

                entity.ToTable("PRECIOSHOTELDIA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PRECIOSHOTELDIAVERSION");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codhabitacion).HasColumnName("CODHABITACION");

                entity.Property(e => e.Dia)
                    .HasColumnName("DIA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codregimen).HasColumnName("CODREGIMEN");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioregimen).HasColumnName("PRECIOREGIMEN");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Precioshoteldia)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("FK_PRECIOSHOTELDIA_CLIENTES");

                entity.HasOne(d => d.CodhabitacionNavigation)
                    .WithMany(p => p.Precioshoteldia)
                    .HasForeignKey(d => d.Codhabitacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRECIOSHOTELDIA_ARTICULOSHABITACIONES");

                entity.HasOne(d => d.CodregimenNavigation)
                    .WithMany(p => p.Precioshoteldia)
                    .HasForeignKey(d => d.Codregimen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRECIOSHOTELDIA_ARTICULOSREGIMENES");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Precioshoteldia)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("FK_PRECIOSHOTELDIA_TARIFASHOTEL");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Precioshoteldia)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("FK_PRECIOSHOTELDIA_TEMPORADASHOTEL");
            });

            modelBuilder.Entity<Preciosregiman>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codregimen, e.Idtarifav, e.Fechaini, e.Fechafin, e.Diasemana })
                    .HasName("PRECIOSREGIMEN_PK");

                entity.ToTable("PRECIOSREGIMEN");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codregimen)
                    .HasColumnName("CODREGIMEN")
                    .HasMaxLength(4);

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Diasemana)
                    .HasColumnName("DIASEMANA")
                    .HasMaxLength(7);

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Preciosregimen)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOS_PRECIOSREGIMEN");
            });

            modelBuilder.Entity<Preciossuplemento>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codsuplemento, e.Idtarifav, e.Fechaini, e.Fechafin, e.Diasemana })
                    .HasName("PRECIOSSUPLEMENTO_PK");

                entity.ToTable("PRECIOSSUPLEMENTO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codsuplemento).HasColumnName("CODSUPLEMENTO");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Diasemana)
                    .HasColumnName("DIASEMANA")
                    .HasMaxLength(7);

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Preciossuplementos)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("ARTICULOS_PRECIOSSUPLEMENTO");
            });

            modelBuilder.Entity<Preciosventum>(entity =>
            {
                entity.HasKey(e => new { e.Idtarifav, e.Codarticulo, e.Talla, e.Color, e.Codformato })
                    .HasName("PRECIOSVENTA_PK");

                entity.ToTable("PRECIOSVENTA");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("PVPORCODARTIC");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PRECIOSVENTAVERSION");

                entity.HasIndex(e => new { e.Codarticulo, e.Color, e.Talla })
                    .HasName("PRECIOSVENTA_COD_COLOR_TALLA");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color })
                    .HasName("CODARTTALLACOLOR");

                entity.HasIndex(e => new { e.Idtarifav, e.Codarticulo, e.Color, e.Talla })
                    .HasName("PRECIOSVENTA_TV_COD_COLOR_TALLA");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Beneficio).HasColumnName("BENEFICIO");

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Costesupuesto)
                    .HasColumnName("COSTESUPUESTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Desde2)
                    .HasColumnName("DESDE2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Dto2).HasColumnName("DTO2");

                entity.Property(e => e.Dtotexto)
                    .HasColumnName("DTOTEXTO")
                    .HasMaxLength(60);

                entity.Property(e => e.Dtotexto2)
                    .HasColumnName("DTOTEXTO2")
                    .HasMaxLength(60);

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta2)
                    .HasColumnName("HASTA2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pbruto).HasColumnName("PBRUTO");

                entity.Property(e => e.Pbruto2).HasColumnName("PBRUTO2");

                entity.Property(e => e.Pneto).HasColumnName("PNETO");

                entity.Property(e => e.Pneto2).HasColumnName("PNETO2");

                entity.Property(e => e.Pnetoanterior).HasColumnName("PNETOANTERIOR");

                entity.Property(e => e.Porcc).HasColumnName("PORCC");

                entity.Property(e => e.Porcdef).HasColumnName("PORCDEF");

                entity.Property(e => e.Porctb).HasColumnName("PORCTB");

                entity.Property(e => e.Porcv).HasColumnName("PORCV");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Preciosventa)
                    .HasForeignKey(d => d.Idtarifav)
                    .HasConstraintName("PRECIOSVENTA_FK");

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Preciosventa)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("PRECIOSVENTA_ARTICULO");
            });

            modelBuilder.Entity<Predefinidoslin>(entity =>
            {
                entity.HasKey(e => new { e.Codlin, e.Idtipoasunto })
                    .HasName("PREDEFINIDOSLIN_PK");

                entity.ToTable("PREDEFINIDOSLIN");

                entity.Property(e => e.Codlin).HasColumnName("CODLIN");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Cadaxpax).HasColumnName("CADAXPAX");

                entity.Property(e => e.Codconcepto)
                    .HasColumnName("CODCONCEPTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codempleado)
                    .HasColumnName("CODEMPLEADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codrecurso)
                    .HasColumnName("CODRECURSO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Codservicio)
                    .HasColumnName("CODSERVICIO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Defecto)
                    .HasColumnName("DEFECTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.DisenyoCl).HasColumnName("DISENYO_CL");

                entity.Property(e => e.Duracionpredefinida)
                    .HasColumnName("DURACIONPREDEFINIDA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Horafijada)
                    .HasColumnName("HORAFIJADA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idpestanyadefecto).HasColumnName("IDPESTANYADEFECTO");

                entity.Property(e => e.Modofact)
                    .HasColumnName("MODOFACT")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Pax)
                    .HasColumnName("PAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipodoc)
                    .HasColumnName("TIPODOC")
                    .HasDefaultValueSql("((-1))");

                entity.HasOne(d => d.IdtipoasuntoNavigation)
                    .WithMany(p => p.Predefinidoslins)
                    .HasForeignKey(d => d.Idtipoasunto)
                    .HasConstraintName("PREDEFINIDOSLIN_FK");
            });

            modelBuilder.Entity<Preguntasglobale>(entity =>
            {
                entity.HasKey(e => e.Codpregunta)
                    .HasName("PREGUNTASGLOBALES_PK");

                entity.ToTable("PREGUNTASGLOBALES");

                entity.Property(e => e.Codpregunta)
                    .HasColumnName("CODPREGUNTA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Captioninforme)
                    .HasColumnName("CAPTIONINFORME")
                    .HasMaxLength(25);

                entity.Property(e => e.Textopregunta)
                    .HasColumnName("TEXTOPREGUNTA")
                    .HasMaxLength(40);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<Presupuesto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpresupuesto, e.N })
                    .HasName("PRESUPUESTOS_PK");

                entity.ToTable("PRESUPUESTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpresupuesto).HasColumnName("NUMPRESUPUESTO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Supresupuesto)
                    .HasColumnName("SUPRESUPUESTO")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Presupuestoscab>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpresupuesto, e.N, e.Version })
                    .HasName("PRESUPUESTOSCAB_PK");

                entity.ToTable("PRESUPUESTOSCAB");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpresupuesto).HasColumnName("NUMPRESUPUESTO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Contacto).HasColumnName("CONTACTO");

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idestado).HasColumnName("IDESTADO");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numeroasunto)
                    .HasColumnName("NUMEROASUNTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Numrollo).HasColumnName("NUMROLLO");

                entity.Property(e => e.Serieasunto)
                    .HasColumnName("SERIEASUNTO")
                    .HasMaxLength(4);

                entity.Property(e => e.Supresupuesto)
                    .HasColumnName("SUPRESUPUESTO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Totalcargosdtos).HasColumnName("TOTALCARGOSDTOS");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalcosteiva).HasColumnName("TOTALCOSTEIVA");

                entity.Property(e => e.Totbruto).HasColumnName("TOTBRUTO");

                entity.Property(e => e.Totdtocomercial).HasColumnName("TOTDTOCOMERCIAL");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totimpuestos).HasColumnName("TOTIMPUESTOS");

                entity.Property(e => e.Totneto).HasColumnName("TOTNETO");

                entity.Property(e => e.Z).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Presupuestoscamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpresupuesto, e.N, e.Version })
                    .HasName("PRESUPUESTOSCAMPOSLIBRES_PK");

                entity.ToTable("PRESUPUESTOSCAMPOSLIBRES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpresupuesto).HasColumnName("NUMPRESUPUESTO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.HasOne(d => d.Presupuestoscab)
                    .WithOne(p => p.Presupuestoscamposlibre)
                    .HasForeignKey<Presupuestoscamposlibre>(d => new { d.Numserie, d.Numpresupuesto, d.N, d.Version })
                    .HasConstraintName("PRESUPUESTOSCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Presupuestosdto>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numero, e.N, e.Linea, e.Version })
                    .HasName("PRESUPUESTOSDTOS_PK");

                entity.ToTable("PRESUPUESTOSDTOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocargo).HasColumnName("DTOCARGO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeunitariodesc).HasColumnName("IMPORTEUNITARIODESC");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numlindoc).HasColumnName("NUMLINDOC");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodto)
                    .HasColumnName("TIPODTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Udsdto).HasColumnName("UDSDTO");

                entity.HasOne(d => d.Presupuestoscab)
                    .WithMany(p => p.Presupuestosdtos)
                    .HasForeignKey(d => new { d.Numserie, d.Numero, d.N, d.Version })
                    .HasConstraintName("PRESUPUESTOSDTOS_FK");
            });

            modelBuilder.Entity<Presupuestoslin>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpresupuesto, e.N, e.Version, e.Numlinea })
                    .HasName("PRESUPUESTOSLIN_PK");

                entity.ToTable("PRESUPUESTOSLIN");

                entity.HasIndex(e => e.Supedido)
                    .HasName("PRESUPUESTOSLIN_SUPEDIDO");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpresupuesto).HasColumnName("NUMPRESUPUESTO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Cargo1).HasColumnName("CARGO1");

                entity.Property(e => e.Cargo2).HasColumnName("CARGO2");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Costeiva).HasColumnName("COSTEIVA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Idpartida).HasColumnName("IDPARTIDA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Numkg).HasColumnName("NUMKG");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Unid1).HasColumnName("UNID1");

                entity.Property(e => e.Unid2).HasColumnName("UNID2");

                entity.Property(e => e.Unid3).HasColumnName("UNID3");

                entity.Property(e => e.Unid4).HasColumnName("UNID4");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");

                entity.HasOne(d => d.Presupuestoscab)
                    .WithMany(p => p.Presupuestoslins)
                    .HasForeignKey(d => new { d.Numserie, d.Numpresupuesto, d.N, d.Version })
                    .HasConstraintName("PRESUPUESTOSLIN_FK");
            });

            modelBuilder.Entity<Presupuestospartida>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numpresupuesto, e.N, e.Version, e.Idpartida })
                    .HasName("PRESUPUESTOSPARTIDAS_PK");

                entity.ToTable("PRESUPUESTOSPARTIDAS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numpresupuesto).HasColumnName("NUMPRESUPUESTO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.Property(e => e.Idpartida).HasColumnName("IDPARTIDA");

                entity.Property(e => e.Area)
                    .HasColumnName("AREA")
                    .HasMaxLength(6);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.HasOne(d => d.Presupuestoscab)
                    .WithMany(p => p.Presupuestospartida)
                    .HasForeignKey(d => new { d.Numserie, d.Numpresupuesto, d.N, d.Version })
                    .HasConstraintName("PRESUPUESTOSPARTIDAS_FK");
            });

            modelBuilder.Entity<Presupuestostot>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N, e.Version, e.Numlinea })
                    .HasName("PRESUPUESTOSTOT_PK");

                entity.ToTable("PRESUPUESTOSTOT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Baseimponible).HasColumnName("BASEIMPONIBLE");

                entity.Property(e => e.Bruto).HasColumnName("BRUTO");

                entity.Property(e => e.Coddto).HasColumnName("CODDTO");

                entity.Property(e => e.Dtocomerc).HasColumnName("DTOCOMERC");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totdtocomerc).HasColumnName("TOTDTOCOMERC");

                entity.Property(e => e.Totdtopp).HasColumnName("TOTDTOPP");

                entity.Property(e => e.Totiva).HasColumnName("TOTIVA");

                entity.Property(e => e.Totreq).HasColumnName("TOTREQ");

                entity.HasOne(d => d.Presupuestoscab)
                    .WithMany(p => p.Presupuestostots)
                    .HasForeignKey(d => new { d.Serie, d.Numero, d.N, d.Version })
                    .HasConstraintName("PRESUPUESTOSTOT_FK");
            });

            modelBuilder.Entity<Previsioncompra>(entity =>
            {
                entity.ToTable("PREVISIONCOMPRAS");

                entity.HasIndex(e => e.Anyo)
                    .HasName("PREVISIONCOMPRAS_ANYO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Abril).HasColumnName("ABRIL");

                entity.Property(e => e.Agosto).HasColumnName("AGOSTO");

                entity.Property(e => e.Anyo).HasColumnName("ANYO");

                entity.Property(e => e.Diciembre).HasColumnName("DICIEMBRE");

                entity.Property(e => e.Enero).HasColumnName("ENERO");

                entity.Property(e => e.Febrero).HasColumnName("FEBRERO");

                entity.Property(e => e.Filtro)
                    .IsRequired()
                    .HasColumnName("FILTRO")
                    .HasMaxLength(4000);

                entity.Property(e => e.Julio).HasColumnName("JULIO");

                entity.Property(e => e.Junio).HasColumnName("JUNIO");

                entity.Property(e => e.Marzo).HasColumnName("MARZO");

                entity.Property(e => e.Mayo).HasColumnName("MAYO");

                entity.Property(e => e.Noviembre).HasColumnName("NOVIEMBRE");

                entity.Property(e => e.Octubre).HasColumnName("OCTUBRE");

                entity.Property(e => e.Prevision).HasColumnName("PREVISION");

                entity.Property(e => e.Septiembre).HasColumnName("SEPTIEMBRE");
            });

            modelBuilder.Entity<Previsiondpto>(entity =>
            {
                entity.ToTable("PREVISIONDPTO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Numdpto).HasColumnName("NUMDPTO");

                entity.Property(e => e.Numfamilia).HasColumnName("NUMFAMILIA");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.Property(e => e.Numsubfamilia).HasColumnName("NUMSUBFAMILIA");

                entity.Property(e => e.Year).HasColumnName("YEAR");
            });

            modelBuilder.Entity<Previsione>(entity =>
            {
                entity.HasKey(e => new { e.AO, e.Mes })
                    .HasName("PREVISIONES_PK");

                entity.ToTable("PREVISIONES");

                entity.Property(e => e.AO).HasColumnName("A_O");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Fechaprevision)
                    .HasColumnName("FECHAPREVISION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prevision).HasColumnName("PREVISION");
            });

            modelBuilder.Entity<Previsiontemp>(entity =>
            {
                entity.HasKey(e => new { e.Codalmacen, e.Numlinea, e.Numterminal })
                    .HasName("PREVISIONTEMP_PK");

                entity.ToTable("PREVISIONTEMP");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Numterminal).HasColumnName("NUMTERMINAL");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Dtotexto)
                    .HasColumnName("DTOTEXTO")
                    .HasMaxLength(60);

                entity.Property(e => e.Idtarifac).HasColumnName("IDTARIFAC");

                entity.Property(e => e.Pbruto).HasColumnName("PBRUTO");

                entity.Property(e => e.Pneto).HasColumnName("PNETO");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.Property(e => e.Udsnecesarias).HasColumnName("UDSNECESARIAS");
            });

            modelBuilder.Entity<Previsionventa>(entity =>
            {
                entity.ToTable("PREVISIONVENTAS");

                entity.HasIndex(e => e.Anyo)
                    .HasName("PREVISIONVENTAS_ANYO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Abril).HasColumnName("ABRIL");

                entity.Property(e => e.Agosto).HasColumnName("AGOSTO");

                entity.Property(e => e.Anyo).HasColumnName("ANYO");

                entity.Property(e => e.Diciembre).HasColumnName("DICIEMBRE");

                entity.Property(e => e.Enero).HasColumnName("ENERO");

                entity.Property(e => e.Febrero).HasColumnName("FEBRERO");

                entity.Property(e => e.Filtro)
                    .IsRequired()
                    .HasColumnName("FILTRO")
                    .HasMaxLength(4000);

                entity.Property(e => e.Julio).HasColumnName("JULIO");

                entity.Property(e => e.Junio).HasColumnName("JUNIO");

                entity.Property(e => e.Marzo).HasColumnName("MARZO");

                entity.Property(e => e.Mayo).HasColumnName("MAYO");

                entity.Property(e => e.Noviembre).HasColumnName("NOVIEMBRE");

                entity.Property(e => e.Octubre).HasColumnName("OCTUBRE");

                entity.Property(e => e.Prevision).HasColumnName("PREVISION");

                entity.Property(e => e.Septiembre).HasColumnName("SEPTIEMBRE");
            });

            modelBuilder.Entity<Procedencia>(entity =>
            {
                entity.HasKey(e => e.Codigoprocedencia)
                    .HasName("PROCEDENCIAS_PK");

                entity.ToTable("PROCEDENCIAS");

                entity.Property(e => e.Codigoprocedencia)
                    .HasColumnName("CODIGOPROCEDENCIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Proceso>(entity =>
            {
                entity.HasKey(e => e.Idproceso)
                    .HasName("PROCESOS_PK");

                entity.ToTable("PROCESOS");

                entity.Property(e => e.Idproceso)
                    .HasColumnName("IDPROCESO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Activo).HasColumnName("ACTIVO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Domingo).HasColumnName("DOMINGO");

                entity.Property(e => e.Enhilosecundario)
                    .HasColumnName("ENHILOSECUNDARIO")
                    .HasMaxLength(1);

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Frecuencia).HasColumnName("FRECUENCIA");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horadomingo)
                    .HasColumnName("HORADOMINGO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horajueves)
                    .HasColumnName("HORAJUEVES")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horalunes)
                    .HasColumnName("HORALUNES")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horamartes)
                    .HasColumnName("HORAMARTES")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horamiercoles)
                    .HasColumnName("HORAMIERCOLES")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horasabado)
                    .HasColumnName("HORASABADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaviernes)
                    .HasColumnName("HORAVIERNES")
                    .HasColumnType("datetime");

                entity.Property(e => e.Jueves).HasColumnName("JUEVES");

                entity.Property(e => e.Lastejecucion)
                    .HasColumnName("LASTEJECUCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lastejecucionmsg)
                    .HasColumnName("LASTEJECUCIONMSG")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastejecucionterminal)
                    .HasColumnName("LASTEJECUCIONTERMINAL")
                    .HasMaxLength(40);

                entity.Property(e => e.Lunes).HasColumnName("LUNES");

                entity.Property(e => e.Martes).HasColumnName("MARTES");

                entity.Property(e => e.Miercoles).HasColumnName("MIERCOLES");

                entity.Property(e => e.Nextejecucion)
                    .HasColumnName("NEXTEJECUCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sabado).HasColumnName("SABADO");

                entity.Property(e => e.Terminalejecutante)
                    .HasColumnName("TERMINALEJECUTANTE")
                    .HasMaxLength(40);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoejecutante).HasColumnName("TIPOEJECUTANTE");

                entity.Property(e => e.Viernes).HasColumnName("VIERNES");

                entity.Property(e => e.Xdias).HasColumnName("XDIAS");

                entity.Property(e => e.Xsegundos).HasColumnName("XSEGUNDOS");
            });

            modelBuilder.Entity<Procesosemail>(entity =>
            {
                entity.ToTable("PROCESOSEMAIL");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Procesosespeciale>(entity =>
            {
                entity.ToTable("PROCESOSESPECIALES");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<Procesosespecialesexec>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Fecha, e.Hora, e.Codusuario })
                    .HasName("PROCESOSESPECIALESEXEC_PK");

                entity.ToTable("PROCESOSESPECIALESEXEC");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.Procesosespecialesexecs)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("PROCESOSESPECIALESEXEC_FK");
            });

            modelBuilder.Entity<Procesosespecialesparam>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Numsql, e.Numparametro })
                    .HasName("PROCESOSESPECIALESPARAMS_PK");

                entity.ToTable("PROCESOSESPECIALESPARAMS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Numsql).HasColumnName("NUMSQL");

                entity.Property(e => e.Numparametro).HasColumnName("NUMPARAMETRO");

                entity.Property(e => e.Camposeleccion)
                    .HasColumnName("CAMPOSELECCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Caption)
                    .HasColumnName("CAPTION")
                    .HasMaxLength(30);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(30);

                entity.Property(e => e.Preguntar)
                    .HasColumnName("PREGUNTAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Seleccion)
                    .HasColumnName("SELECCION")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipocampo)
                    .HasColumnName("TIPOCAMPO")
                    .HasMaxLength(15);

                entity.Property(e => e.Valordef)
                    .HasColumnName("VALORDEF")
                    .HasMaxLength(30);

                entity.HasOne(d => d.Procesosespecialessql)
                    .WithMany(p => p.Procesosespecialesparams)
                    .HasForeignKey(d => new { d.Id, d.Numsql })
                    .HasConstraintName("PROCESOSESPECIALESPARAMS_FK");
            });

            modelBuilder.Entity<Procesosespecialessql>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Numsql })
                    .HasName("PROCESOSESPECIALESSQL_PK");

                entity.ToTable("PROCESOSESPECIALESSQL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Numsql).HasColumnName("NUMSQL");

                entity.Property(e => e.Consulta)
                    .HasColumnName("CONSULTA")
                    .HasColumnType("image");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Sqldegestion)
                    .HasColumnName("SQLDEGESTION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.Procesosespecialessqls)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("PROCESOSESPECIALESSQL_FK");
            });

            modelBuilder.Entity<Procesosespecialesusu>(entity =>
            {
                entity.HasKey(e => new { e.Idproceso, e.Codusuario })
                    .HasName("PROCESOSESPECIALESUSU_PK");

                entity.ToTable("PROCESOSESPECIALESUSU");

                entity.Property(e => e.Idproceso).HasColumnName("IDPROCESO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.HasOne(d => d.IdprocesoNavigation)
                    .WithMany(p => p.Procesosespecialesusus)
                    .HasForeignKey(d => d.Idproceso)
                    .HasConstraintName("PROCESOSESPECIALESUSU_FK");
            });

            modelBuilder.Entity<Procesoslin>(entity =>
            {
                entity.HasKey(e => new { e.Idproceso, e.Clave, e.Subclave })
                    .HasName("PROCESOSLIN_PK");

                entity.ToTable("PROCESOSLIN");

                entity.Property(e => e.Idproceso).HasColumnName("IDPROCESO");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Subclave)
                    .HasColumnName("SUBCLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdprocesoNavigation)
                    .WithMany(p => p.Procesoslins)
                    .HasForeignKey(d => d.Idproceso)
                    .HasConstraintName("PROCESOSLIN_FK");
            });

            modelBuilder.Entity<Procesoslog>(entity =>
            {
                entity.ToTable("PROCESOSLOG");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ejecucionmsg)
                    .HasColumnName("EJECUCIONMSG")
                    .HasMaxLength(255);

                entity.Property(e => e.Ejecucionterminal)
                    .HasColumnName("EJECUCIONTERMINAL")
                    .HasMaxLength(40);

                entity.Property(e => e.Enhilosecundario)
                    .HasColumnName("ENHILOSECUNDARIO")
                    .HasMaxLength(1);

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fechaejecucion)
                    .HasColumnName("FECHAEJECUCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaejecucion)
                    .HasColumnName("HORAEJECUCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idproceso).HasColumnName("IDPROCESO");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoejecutante).HasColumnName("TIPOEJECUTANTE");
            });

            modelBuilder.Entity<Promocione>(entity =>
            {
                entity.HasKey(e => e.Idpromocion)
                    .HasName("PROMOCIONESPK");

                entity.ToTable("PROMOCIONES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PROMOCIONESVERSION");

                entity.Property(e => e.Idpromocion)
                    .HasColumnName("IDPROMOCION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Abonable)
                    .HasColumnName("ABONABLE")
                    .HasMaxLength(1);

                entity.Property(e => e.Actualizarremfronts)
                    .HasColumnName("ACTUALIZARREMFRONTS")
                    .HasMaxLength(1);

                entity.Property(e => e.Alcomprarminimoaplicarmaximo)
                    .HasColumnName("ALCOMPRARMINIMOAPLICARMAXIMO")
                    .HasMaxLength(1);

                entity.Property(e => e.Aplicarnveces).HasColumnName("APLICARNVECES");

                entity.Property(e => e.Aproximacionredondeocupongenerado).HasColumnName("APROXIMACIONREDONDEOCUPONGENERADO");

                entity.Property(e => e.Cadaxpuntoscupongenerado).HasColumnName("CADAXPUNTOSCUPONGENERADO");

                entity.Property(e => e.Clienteobligatorio)
                    .HasColumnName("CLIENTEOBLIGATORIO")
                    .HasMaxLength(1);

                entity.Property(e => e.Condicionaplicacion).HasColumnName("CONDICIONAPLICACION");

                entity.Property(e => e.Cumpleanyos).HasColumnName("CUMPLEANYOS");

                entity.Property(e => e.Cuponfin)
                    .HasColumnName("CUPONFIN")
                    .HasMaxLength(40);

                entity.Property(e => e.Cuponini)
                    .HasColumnName("CUPONINI")
                    .HasMaxLength(40);

                entity.Property(e => e.Cuponserializado)
                    .HasColumnName("CUPONSERIALIZADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Cuponserializadoiscv)
                    .HasColumnName("CUPONSERIALIZADOISCV")
                    .HasMaxLength(1);

                entity.Property(e => e.Cuponserializadoisean13)
                    .HasColumnName("CUPONSERIALIZADOISEAN13")
                    .HasMaxLength(1);

                entity.Property(e => e.Definebarato).HasColumnName("DEFINEBARATO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(200);

                entity.Property(e => e.Descripcionaena)
                    .HasColumnName("DESCRIPCIONAENA")
                    .HasMaxLength(15);

                entity.Property(e => e.Descuentosencascada)
                    .HasColumnName("DESCUENTOSENCASCADA")
                    .HasMaxLength(1);

                entity.Property(e => e.Diassemana)
                    .HasColumnName("DIASSEMANA")
                    .HasMaxLength(7);

                entity.Property(e => e.Eancupon)
                    .HasColumnName("EANCUPON")
                    .HasMaxLength(30);

                entity.Property(e => e.Eancuponalias)
                    .HasColumnName("EANCUPONALIAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Fechafinal)
                    .HasColumnName("FECHAFINAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechainicial)
                    .HasColumnName("FECHAINICIAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Filtprecio)
                    .HasColumnName("FILTPRECIO")
                    .HasMaxLength(1);

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Generaricgfidel)
                    .HasColumnName("GENERARICGFIDEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Grupoimportecupongenerado).HasColumnName("GRUPOIMPORTECUPONGENERADO");

                entity.Property(e => e.Hipervinculo)
                    .HasColumnName("HIPERVINCULO")
                    .HasMaxLength(800);

                entity.Property(e => e.Horafinal)
                    .HasColumnName("HORAFINAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainicial)
                    .HasColumnName("HORAINICIAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Idgrupoclientes).HasColumnName("IDGRUPOCLIENTES");

                entity.Property(e => e.Idpromocionmain).HasColumnName("IDPROMOCIONMAIN");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Iguales)
                    .HasColumnName("IGUALES")
                    .HasMaxLength(1);

                entity.Property(e => e.Importeminimo).HasColumnName("IMPORTEMINIMO");

                entity.Property(e => e.Imprimirimportedto)
                    .HasColumnName("IMPRIMIRIMPORTEDTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Manual)
                    .HasColumnName("MANUAL")
                    .HasMaxLength(1);

                entity.Property(e => e.Mascararedondeocupongenerado)
                    .HasColumnName("MASCARAREDONDEOCUPONGENERADO")
                    .HasMaxLength(50);

                entity.Property(e => e.Modoimportecupongenerado).HasColumnName("MODOIMPORTECUPONGENERADO");

                entity.Property(e => e.Momentoaplicacion).HasColumnName("MOMENTOAPLICACION");

                entity.Property(e => e.Nextcuponserializado)
                    .HasColumnName("NEXTCUPONSERIALIZADO")
                    .HasMaxLength(40);

                entity.Property(e => e.Numeroarticulos).HasColumnName("NUMEROARTICULOS");

                entity.Property(e => e.Observaciones1)
                    .HasColumnName("OBSERVACIONES1")
                    .HasMaxLength(255);

                entity.Property(e => e.Observaciones2)
                    .HasColumnName("OBSERVACIONES2")
                    .HasMaxLength(255);

                entity.Property(e => e.Observaciones3)
                    .HasColumnName("OBSERVACIONES3")
                    .HasMaxLength(255);

                entity.Property(e => e.Pedircuponserializado)
                    .HasColumnName("PEDIRCUPONSERIALIZADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Porcada)
                    .HasColumnName("PORCADA")
                    .HasMaxLength(1);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Preciomax).HasColumnName("PRECIOMAX");

                entity.Property(e => e.Preciomin).HasColumnName("PRECIOMIN");

                entity.Property(e => e.Prioridad).HasColumnName("PRIORIDAD");

                entity.Property(e => e.Textoalaplicar)
                    .HasColumnName("TEXTOALAPLICAR")
                    .HasMaxLength(1000);

                entity.Property(e => e.Textoimprimir)
                    .HasColumnName("TEXTOIMPRIMIR")
                    .HasMaxLength(200);

                entity.Property(e => e.Textovisibleenvisor)
                    .HasColumnName("TEXTOVISIBLEENVISOR")
                    .HasMaxLength(100);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoaplicacion).HasColumnName("TIPOAPLICACION");

                entity.Property(e => e.Tipoincompatibilidad).HasColumnName("TIPOINCOMPATIBILIDAD");

                entity.Property(e => e.Tiporedondeocupongenerado).HasColumnName("TIPOREDONDEOCUPONGENERADO");

                entity.Property(e => e.Valorimportecupongenerado).HasColumnName("VALORIMPORTECUPONGENERADO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");

                entity.Property(e => e.Visibleenvisor)
                    .HasColumnName("VISIBLEENVISOR")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<Promocionescliente>(entity =>
            {
                entity.ToTable("PROMOCIONESCLIENTE");

                entity.HasIndex(e => new { e.Codcliente, e.Fechaimpresion })
                    .HasName("PROMOCIONESCLIENTE_CLIENTE");

                entity.HasIndex(e => new { e.Codcliente, e.Idpromocion, e.Usado })
                    .HasName("PROMOCIONESCLIENTE_CLIENTE_PROMOCION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Cupon)
                    .HasColumnName("CUPON")
                    .HasMaxLength(40);

                entity.Property(e => e.Fechaenvio)
                    .HasColumnName("FECHAENVIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechageneracion)
                    .HasColumnName("FECHAGENERACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaimpresion)
                    .HasColumnName("FECHAIMPRESION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechauso)
                    .HasColumnName("FECHAUSO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Front).HasColumnName("FRONT");

                entity.Property(e => e.Horageneracion)
                    .HasColumnName("HORAGENERACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Importedto)
                    .HasColumnName("IMPORTEDTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Usado).HasColumnName("USADO");
            });

            modelBuilder.Entity<Promocionesconseguida>(entity =>
            {
                entity.HasKey(e => new { e.Idtarjeta, e.Idfront, e.Idlinea })
                    .HasName("PROMOCIONESCONSEGUIDAS_PK");

                entity.ToTable("PROMOCIONESCONSEGUIDAS");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Mostrar)
                    .HasColumnName("MOSTRAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.IdtarjetaNavigation)
                    .WithMany(p => p.Promocionesconseguida)
                    .HasForeignKey(d => d.Idtarjeta)
                    .HasConstraintName("PROMOCIONESCONSEGUIDAS_FK");
            });

            modelBuilder.Entity<Promocionesempresa>(entity =>
            {
                entity.ToTable("PROMOCIONESEMPRESA");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Promocionesformaspago>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Codformapago })
                    .HasName("PROMOCIONESFORMASPAGO_PK");

                entity.ToTable("PROMOCIONESFORMASPAGO");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Promocionesformaspagos)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("PROMOCIONESFORMASPAGO_FK");
            });

            modelBuilder.Entity<Promocionesgrupo>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Posicion })
                    .HasName("PROMOCIONESGRUPOS_PK");

                entity.ToTable("PROMOCIONESGRUPOS");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Promocionesgrupos)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("PROMOCIONESGRUPOS_FK");
            });

            modelBuilder.Entity<Promocionesgruposalmacen>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Idgrupo })
                    .HasName("PROMOCIONESGRUPOSALMACEN_PK");

                entity.ToTable("PROMOCIONESGRUPOSALMACEN");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Fechafinal)
                    .HasColumnName("FECHAFINAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechainicial)
                    .HasColumnName("FECHAINICIAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafinal)
                    .HasColumnName("HORAFINAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainicial)
                    .HasColumnName("HORAINICIAL")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Promocionesgruposalmacens)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("PROMOCIONESGRUPOSALMACEN_FK");
            });

            modelBuilder.Entity<Promocioneshostelerium>(entity =>
            {
                entity.HasKey(e => e.Idpromocion)
                    .HasName("PROMOCIONESHOSTELERIA_PK");

                entity.ToTable("PROMOCIONESHOSTELERIA");

                entity.Property(e => e.Idpromocion)
                    .HasColumnName("IDPROMOCION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aplicada).HasColumnName("APLICADA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Fechaaplicacion)
                    .HasColumnName("FECHAAPLICACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaini)
                    .HasColumnName("HORAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idmotivodto).HasColumnName("IDMOTIVODTO");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Promocionesidioma>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Codidioma })
                    .HasName("PROMOCIONESIDIOMAS_PK");

                entity.ToTable("PROMOCIONESIDIOMAS");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(200);

                entity.Property(e => e.Textoimprimir)
                    .HasColumnName("TEXTOIMPRIMIR")
                    .HasMaxLength(200);

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Promocionesidiomas)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("PROMOCIONESIDIOMAS_FK");
            });

            modelBuilder.Entity<Promocionesincompatible>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Posicion })
                    .HasName("PROMOCIONESINCOMPATIBLES_PK");

                entity.ToTable("PROMOCIONESINCOMPATIBLES");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Idpromocionincompatible).HasColumnName("IDPROMOCIONINCOMPATIBLE");

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Promocionesincompatibles)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("PROMOCIONESINCOMPATIBLES_FK");
            });

            modelBuilder.Entity<Promocionestarifa>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Idtarifav })
                    .HasName("PROMOCIONESTARIFASPK");

                entity.ToTable("PROMOCIONESTARIFAS");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Promocionestarifas)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("PROMOCIONESTARIFASFK");
            });

            modelBuilder.Entity<Promocionesusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Id })
                    .HasName("PROMOCIONESUSUARIO_PK");

                entity.ToTable("PROMOCIONESUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Proveedore>(entity =>
            {
                entity.HasKey(e => e.Codproveedor)
                    .HasName("PROVEEDORES_PK");

                entity.ToTable("PROVEEDORES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_PROVEEDORESVERSION");

                entity.Property(e => e.Codproveedor)
                    .HasColumnName("CODPROVEEDOR")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alias)
                    .HasColumnName("ALIAS")
                    .HasMaxLength(255);

                entity.Property(e => e.Aptocorreos)
                    .HasColumnName("APTOCORREOS")
                    .HasMaxLength(12);

                entity.Property(e => e.B2bIdmapping).HasColumnName("B2B_IDMAPPING");

                entity.Property(e => e.B2bIdmappingpedido).HasColumnName("B2B_IDMAPPINGPEDIDO");

                entity.Property(e => e.B2bOrigen).HasColumnName("B2B_ORIGEN");

                entity.Property(e => e.B2bOrigenpedido).HasColumnName("B2B_ORIGENPEDIDO");

                entity.Property(e => e.Bloqueado)
                    .HasColumnName("BLOQUEADO")
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('F')");

                entity.Property(e => e.Cantportespag).HasColumnName("CANTPORTESPAG");

                entity.Property(e => e.Cif)
                    .HasColumnName("CIF")
                    .HasMaxLength(12);

                entity.Property(e => e.Codbanco)
                    .HasColumnName("CODBANCO")
                    .HasMaxLength(4);

                entity.Property(e => e.Codcentral).HasColumnName("CODCENTRAL");

                entity.Property(e => e.Codcentralpedido).HasColumnName("CODCENTRALPEDIDO");

                entity.Property(e => e.Codclisuyo)
                    .HasColumnName("CODCLISUYO")
                    .HasMaxLength(12);

                entity.Property(e => e.Codcontable)
                    .HasColumnName("CODCONTABLE")
                    .HasMaxLength(12);

                entity.Property(e => e.Codcontablecompra)
                    .HasColumnName("CODCONTABLECOMPRA")
                    .HasMaxLength(12);

                entity.Property(e => e.Codcontabledmn)
                    .HasColumnName("CODCONTABLEDMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Codigoiban)
                    .HasColumnName("CODIGOIBAN")
                    .HasMaxLength(100);

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Codpostalbanco)
                    .HasColumnName("CODPOSTALBANCO")
                    .HasMaxLength(8);

                entity.Property(e => e.Codswift)
                    .HasColumnName("CODSWIFT")
                    .HasMaxLength(15);

                entity.Property(e => e.Codtalla)
                    .HasColumnName("CODTALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codvisible).HasColumnName("CODVISIBLE");

                entity.Property(e => e.Comprarivaincluido)
                    .HasColumnName("COMPRARIVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Comprarsinimpuestos)
                    .HasColumnName("COMPRARSINIMPUESTOS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Diapago1).HasColumnName("DIAPAGO1");

                entity.Property(e => e.Diapago2).HasColumnName("DIAPAGO2");

                entity.Property(e => e.Digcontrolbanco)
                    .HasColumnName("DIGCONTROLBANCO")
                    .HasMaxLength(2);

                entity.Property(e => e.Direccion1)
                    .HasColumnName("DIRECCION1")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccionbanco)
                    .HasColumnName("DIRECCIONBANCO")
                    .HasMaxLength(255);

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.EMail)
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Enviocodpais)
                    .HasColumnName("ENVIOCODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Enviocodpostal)
                    .HasColumnName("ENVIOCODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Enviodirecion)
                    .HasColumnName("ENVIODIRECION")
                    .HasMaxLength(255);

                entity.Property(e => e.Enviopais)
                    .HasColumnName("ENVIOPAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Enviopoblacion)
                    .HasColumnName("ENVIOPOBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Envioprovincia)
                    .HasColumnName("ENVIOPROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Esprovdelgrupo)
                    .HasColumnName("ESPROVDELGRUPO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Facturarconimpuesto).HasColumnName("FACTURARCONIMPUESTO");

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Faxpedidos)
                    .HasColumnName("FAXPEDIDOS")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ivanodeducible).HasColumnName("IVANODEDUCIBLE");

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Nif20)
                    .HasColumnName("NIF20")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombrebanco)
                    .HasColumnName("NOMBREBANCO")
                    .HasMaxLength(255);

                entity.Property(e => e.Nomcomercial)
                    .HasColumnName("NOMCOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Nomproveedor)
                    .HasColumnName("NOMPROVEEDOR")
                    .HasMaxLength(255);

                entity.Property(e => e.Numcuenta)
                    .HasColumnName("NUMCUENTA")
                    .HasMaxLength(10);

                entity.Property(e => e.Numdiascancelacion).HasColumnName("NUMDIASCANCELACION");

                entity.Property(e => e.Numdiasentrega).HasColumnName("NUMDIASENTREGA");

                entity.Property(e => e.Numsucursal)
                    .HasColumnName("NUMSUCURSAL")
                    .HasMaxLength(4);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Ordenadeudo)
                    .HasColumnName("ORDENADEUDO")
                    .HasMaxLength(35);

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Pedidominimo).HasColumnName("PEDIDOMINIMO");

                entity.Property(e => e.Pedidosvencimsegun).HasColumnName("PEDIDOSVENCIMSEGUN");

                entity.Property(e => e.Personacontacto)
                    .HasColumnName("PERSONACONTACTO")
                    .HasMaxLength(255);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Poblacionbanco)
                    .HasColumnName("POBLACIONBANCO")
                    .HasMaxLength(100);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Recc).HasColumnName("RECC");

                entity.Property(e => e.Regimfact)
                    .HasColumnName("REGIMFACT")
                    .HasMaxLength(1);

                entity.Property(e => e.Regimret)
                    .HasColumnName("REGIMRET")
                    .HasMaxLength(1);

                entity.Property(e => e.RetFechafinexclusion)
                    .HasColumnName("RET_FECHAFINEXCLUSION")
                    .HasColumnType("datetime");

                entity.Property(e => e.RetFechainiexclusion)
                    .HasColumnName("RET_FECHAINIEXCLUSION")
                    .HasColumnType("datetime");

                entity.Property(e => e.RetPorcexclusion).HasColumnName("RET_PORCEXCLUSION");

                entity.Property(e => e.RetTiporetencioniva).HasColumnName("RET_TIPORETENCIONIVA");

                entity.Property(e => e.Seriealbindirecta)
                    .HasColumnName("SERIEALBINDIRECTA")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefacindirecta)
                    .HasColumnName("SERIEFACINDIRECTA")
                    .HasMaxLength(4);

                entity.Property(e => e.Telefono1)
                    .HasColumnName("TELEFONO1")
                    .HasMaxLength(15);

                entity.Property(e => e.Telefono2)
                    .HasColumnName("TELEFONO2")
                    .HasMaxLength(15);

                entity.Property(e => e.Telex)
                    .HasColumnName("TELEX")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipoportes)
                    .HasColumnName("TIPOPORTES")
                    .HasMaxLength(1);

                entity.Property(e => e.Tiporet).HasColumnName("TIPORET");

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vencimsegun)
                    .HasColumnName("VENCIMSEGUN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Proveedorescamposlibre>(entity =>
            {
                entity.HasKey(e => e.Codproveedor)
                    .HasName("PROVEEDORESCAMPOSLIBRES_PK");

                entity.ToTable("PROVEEDORESCAMPOSLIBRES");

                entity.Property(e => e.Codproveedor)
                    .HasColumnName("CODPROVEEDOR")
                    .ValueGeneratedNever();

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(3);

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithOne(p => p.Proveedorescamposlibre)
                    .HasForeignKey<Proveedorescamposlibre>(d => d.Codproveedor)
                    .HasConstraintName("PROVEEDORESCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Proveedoresretencionesiva>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Codtiporetencion })
                    .HasName("PROVEEDORESRETENCIONESIVA_PK");

                entity.ToTable("PROVEEDORESRETENCIONESIVA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codtiporetencion).HasColumnName("CODTIPORETENCION");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Proveedoresretencionesivas)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("PROVEEDORESRETENCIONESIVA_PROVEEDORES_PK");

                entity.HasOne(d => d.CodtiporetencionNavigation)
                    .WithMany(p => p.Proveedoresretencionesivas)
                    .HasForeignKey(d => d.Codtiporetencion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PROVEEDORESRETENCIONESIVA_TIPOSRETENCION_PK");
            });

            modelBuilder.Entity<Proveedoresterminal>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Id })
                    .HasName("PROVEEDORESTERMINAL_PK");

                entity.ToTable("PROVEEDORESTERMINAL");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");

                entity.HasOne(d => d.IdterminalNavigation)
                    .WithMany(p => p.Proveedoresterminals)
                    .HasForeignKey(d => d.Idterminal)
                    .HasConstraintName("PROVEEDORESTERMINAL_FK");
            });

            modelBuilder.Entity<Raicescontable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RAICESCONTABLES");

                entity.HasIndex(e => new { e.Tipo, e.Subtipo })
                    .HasName("RAICESCONTABLES_TIPO");

                entity.Property(e => e.Contador).HasColumnName("CONTADOR");

                entity.Property(e => e.Origentesoreria)
                    .HasColumnName("ORIGENTESORERIA")
                    .HasMaxLength(1);

                entity.Property(e => e.Raiz)
                    .HasColumnName("RAIZ")
                    .HasMaxLength(12);

                entity.Property(e => e.Subtipo)
                    .HasColumnName("SUBTIPO")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<Raicesserie>(entity =>
            {
                entity.HasKey(e => e.Raiz)
                    .HasName("RAICESSERIE_PK");

                entity.ToTable("RAICESSERIE");

                entity.Property(e => e.Raiz)
                    .HasColumnName("RAIZ")
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Rango>(entity =>
            {
                entity.HasKey(e => new { e.Codcomision, e.Posicion })
                    .HasName("RANGOS_PK");

                entity.ToTable("RANGOS");

                entity.Property(e => e.Codcomision).HasColumnName("CODCOMISION");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Desde).HasColumnName("DESDE");

                entity.Property(e => e.Hasta).HasColumnName("HASTA");

                entity.HasOne(d => d.CodcomisionNavigation)
                    .WithMany(p => p.Rangos)
                    .HasForeignKey(d => d.Codcomision)
                    .HasConstraintName("RANGOS_FK");
            });

            modelBuilder.Entity<Rangohora>(entity =>
            {
                entity.HasKey(e => e.Idperiodo)
                    .HasName("RANGOHORAS_PK");

                entity.ToTable("RANGOHORAS");

                entity.Property(e => e.Idperiodo)
                    .HasColumnName("IDPERIODO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horain)
                    .HasColumnName("HORAIN")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Rappelsproveedore>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Codrappel })
                    .HasName("RAPPELSPROVEEDORES_PK");

                entity.ToTable("RAPPELSPROVEEDORES");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codrappel).HasColumnName("CODRAPPEL");

                entity.Property(e => e.Codartrappel)
                    .HasColumnName("CODARTRAPPEL")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Colorrappel)
                    .HasColumnName("COLORRAPPEL")
                    .HasMaxLength(10);

                entity.Property(e => e.Facturacion)
                    .HasColumnName("FACTURACION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechacobro)
                    .HasColumnName("FECHACOBRO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importecompra).HasColumnName("IMPORTECOMPRA");

                entity.Property(e => e.Importerappel).HasColumnName("IMPORTERAPPEL");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nomrappel)
                    .HasColumnName("NOMRAPPEL")
                    .HasMaxLength(25);

                entity.Property(e => e.Numconcepto)
                    .HasColumnName("NUMCONCEPTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Porcimporte)
                    .HasColumnName("PORCIMPORTE")
                    .HasMaxLength(1);

                entity.Property(e => e.Rappelpor)
                    .HasColumnName("RAPPELPOR")
                    .HasMaxLength(1);

                entity.Property(e => e.Siglas)
                    .HasColumnName("SIGLAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Tallarappel)
                    .HasColumnName("TALLARAPPEL")
                    .HasMaxLength(10);

                entity.Property(e => e.Udscompra).HasColumnName("UDSCOMPRA");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Rappelsproveedores)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("RAPPELSPROVEEDORES_FK");
            });

            modelBuilder.Entity<Recursosempresa>(entity =>
            {
                entity.HasKey(e => e.Codrecurso)
                    .HasName("RECURSOSEMPRESA_PK");

                entity.ToTable("RECURSOSEMPRESA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_RECURSOSEMPRESAVERSION");

                entity.Property(e => e.Codrecurso)
                    .HasColumnName("CODRECURSO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Nomrecurso)
                    .IsRequired()
                    .HasColumnName("NOMRECURSO")
                    .HasMaxLength(35);

                entity.Property(e => e.Paxmax).HasColumnName("PAXMAX");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Recursosservicio>(entity =>
            {
                entity.HasKey(e => new { e.Codrecurso, e.Idintervencion, e.Serie, e.Numero })
                    .HasName("RECURSOSSERVICIOS_PK");

                entity.ToTable("RECURSOSSERVICIOS");

                entity.Property(e => e.Codrecurso).HasColumnName("CODRECURSO");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.HasOne(d => d.CodrecursoNavigation)
                    .WithMany(p => p.Recursosservicios)
                    .HasForeignKey(d => d.Codrecurso)
                    .HasConstraintName("RECURSOSSERVICIOS_FK_RECURSOS");

                entity.HasOne(d => d.Servicio)
                    .WithMany(p => p.Recursosservicios)
                    .HasForeignKey(d => new { d.Idintervencion, d.Serie, d.Numero })
                    .HasConstraintName("RECURSOSSERVICIOS_FK_SERVEI");
            });

            modelBuilder.Entity<Referencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_REFERENCIAS");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Refproveedor)
                    .HasColumnName("REFPROVEEDOR")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Referenciasprov>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Refproveedor, e.Codproveedor })
                    .HasName("REFERENCIASPROV_PK");

                entity.ToTable("REFERENCIASPROV");

                entity.HasIndex(e => new { e.Refproveedor, e.Codproveedor })
                    .HasName("PORREFERENCIA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Refproveedor)
                    .HasColumnName("REFPROVEEDOR")
                    .HasMaxLength(15);

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Principal)
                    .HasColumnName("PRINCIPAL")
                    .HasMaxLength(1);

                entity.Property(e => e.Udsdefecto).HasColumnName("UDSDEFECTO");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Referenciasprovs)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("REFERENCIASPROV_FK");
            });

            modelBuilder.Entity<Regalospendientestarjetum>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Idtarjeta, e.Idlinea })
                    .HasName("REGALOSPENDIENTESTARJETA_PK");

                entity.ToTable("REGALOSPENDIENTESTARJETA");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Consumiciones).HasColumnName("CONSUMICIONES");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Mostraraviso)
                    .HasColumnName("MOSTRARAVISO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Puntos).HasColumnName("PUNTOS");

                entity.Property(e => e.Textoaviso)
                    .HasColumnName("TEXTOAVISO")
                    .HasMaxLength(50);

                entity.Property(e => e.Tickets).HasColumnName("TICKETS");

                entity.HasOne(d => d.Tarjetascliente)
                    .WithMany(p => p.Regalospendientestarjeta)
                    .HasForeignKey(d => new { d.Codcliente, d.Idtarjeta })
                    .HasConstraintName("REGALOSPENDIENTESTARJETA_FK");
            });

            modelBuilder.Entity<Regimene>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("REGIMENES_PK");

                entity.ToTable("REGIMENES");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .HasMaxLength(4);

                entity.Property(e => e.Dispalmuerzo)
                    .HasColumnName("DISPALMUERZO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dispalojamiento)
                    .HasColumnName("DISPALOJAMIENTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dispcena)
                    .HasColumnName("DISPCENA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dispdesayuno)
                    .HasColumnName("DISPDESAYUNO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(30);

                entity.Property(e => e.Porcalmuerzo).HasColumnName("PORCALMUERZO");

                entity.Property(e => e.Porcalojamiento).HasColumnName("PORCALOJAMIENTO");

                entity.Property(e => e.Porccena).HasColumnName("PORCCENA");

                entity.Property(e => e.Porcdesayuno).HasColumnName("PORCDESAYUNO");

                entity.Property(e => e.Porpersona)
                    .HasColumnName("PORPERSONA")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Regimenesfacturacion>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("REGIMENESFACTURACION_PK");

                entity.ToTable("REGIMENESFACTURACION");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Abreviacion)
                    .IsRequired()
                    .HasColumnName("ABREVIACION")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Librocompras).HasColumnName("LIBROCOMPRAS");

                entity.Property(e => e.Libroiva)
                    .IsRequired()
                    .HasColumnName("LIBROIVA")
                    .HasMaxLength(3);

                entity.Property(e => e.Libroventas).HasColumnName("LIBROVENTAS");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Regimenasociado)
                    .HasColumnName("REGIMENASOCIADO")
                    .HasMaxLength(3);

                entity.Property(e => e.Siempresinimpuestos).HasColumnName("SIEMPRESINIMPUESTOS");
            });

            modelBuilder.Entity<Regimenfacturacion>(entity =>
            {
                entity.HasKey(e => new { e.Tiporegimen, e.Codregimen })
                    .HasName("REGIMENFACTURACION_PK");

                entity.ToTable("REGIMENFACTURACION");

                entity.Property(e => e.Tiporegimen)
                    .HasColumnName("TIPOREGIMEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Codregimen)
                    .HasColumnName("CODREGIMEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Regimenret>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("REGIMENRET_PK");

                entity.ToTable("REGIMENRET");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Claveretarticulo)
                    .HasColumnName("CLAVERETARTICULO")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Registroanulacione>(entity =>
            {
                entity.HasKey(e => e.Numlinea)
                    .HasName("REGISTROANULACIONES_PK");

                entity.ToTable("REGISTROANULACIONES");

                entity.Property(e => e.Numlinea)
                    .HasColumnName("NUMLINEA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Concepto)
                    .HasColumnName("CONCEPTO")
                    .HasMaxLength(35);

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Costeiva).HasColumnName("COSTEIVA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(45);

                entity.Property(e => e.Estocado)
                    .HasColumnName("ESTOCADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numtrasp).HasColumnName("NUMTRASP");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Serietrasp)
                    .HasColumnName("SERIETRASP")
                    .HasMaxLength(4);

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");
            });

            modelBuilder.Entity<Registroauditorium>(entity =>
            {
                entity.ToTable("REGISTROAUDITORIA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cajaint).HasColumnName("CAJAINT");

                entity.Property(e => e.Cajastr)
                    .HasColumnName("CAJASTR")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(45);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mesa).HasColumnName("MESA");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precio2).HasColumnName("PRECIO2");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Sala).HasColumnName("SALA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.Property(e => e.Vienedefront)
                    .HasColumnName("VIENEDEFRONT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Registroempleado>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Codempleado, e.Caja, e.Dia, e.Horain })
                    .HasName("REGISTROEMPLEADOS_PK");

                entity.ToTable("REGISTROEMPLEADOS");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Dia)
                    .HasColumnName("DIA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horain)
                    .HasColumnName("HORAIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codmotivo).HasColumnName("CODMOTIVO");

                entity.Property(e => e.Codmotivoentrada).HasColumnName("CODMOTIVOENTRADA");

                entity.Property(e => e.Costehora).HasColumnName("COSTEHORA");

                entity.Property(e => e.Costehoraextra).HasColumnName("COSTEHORAEXTRA");

                entity.Property(e => e.Horaout)
                    .HasColumnName("HORAOUT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horas).HasColumnName("HORAS");

                entity.Property(e => e.Horasextra).HasColumnName("HORASEXTRA");

                entity.Property(e => e.Horasnormal).HasColumnName("HORASNORMAL");

                entity.Property(e => e.Numventas).HasColumnName("NUMVENTAS");

                entity.Property(e => e.Ventas).HasColumnName("VENTAS");
            });

            modelBuilder.Entity<Registroincidenciase>(entity =>
            {
                entity.ToTable("REGISTROINCIDENCIASES");

                entity.HasIndex(e => e.Codempleado)
                    .HasName("REGISTROINCIDENCIASES_EMPLEADO");

                entity.HasIndex(e => e.Fecha)
                    .HasName("REGISTROINCIDENCIASES_FECHA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Descturno)
                    .HasColumnName("DESCTURNO")
                    .HasMaxLength(30);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaentrada)
                    .HasColumnName("HORAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaentradareal)
                    .HasColumnName("HORAENTRADAREAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horasalida)
                    .HasColumnName("HORASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horasalidareal)
                    .HasColumnName("HORASALIDAREAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Tipoanomalia).HasColumnName("TIPOANOMALIA");
            });

            modelBuilder.Entity<Regularizacion>(entity =>
            {
                entity.HasKey(e => new { e.Codalmacen, e.Codarticulo, e.Talla, e.Color })
                    .HasName("REGULARIZACION_PK");

                entity.ToTable("REGULARIZACION");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Cuadrado)
                    .HasColumnName("CUADRADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Stockfinal).HasColumnName("STOCKFINAL");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Regularizacions)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("REGULARIZACION_FK");
            });

            modelBuilder.Entity<Relacionescuentasefectivo>(entity =>
            {
                entity.HasKey(e => new { e.Caja, e.Codigo })
                    .HasName("RELACIONESCUENTASEFECTIVO_PK");

                entity.ToTable("RELACIONESCUENTASEFECTIVO");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Cuenta)
                    .HasColumnName("CUENTA")
                    .HasMaxLength(8);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Relcamposlibresubicacion>(entity =>
            {
                entity.HasKey(e => new { e.Tabla, e.Subtipo, e.Idgrupo, e.Iddiseny })
                    .HasName("RELCAMPOSLIBRESUBICACION_PK");

                entity.ToTable("RELCAMPOSLIBRESUBICACION");

                entity.Property(e => e.Tabla).HasColumnName("TABLA");

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Iddiseny).HasColumnName("IDDISENY");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Relcamposlibresubicacions)
                    .HasForeignKey(d => new { d.Idgrupo, d.Iddiseny })
                    .HasConstraintName("FK_RELCAMPOSLIBRESUBICACION_IMPRESIONDOC");
            });

            modelBuilder.Entity<RemAccione>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Accion, e.Identidad });

                entity.ToTable("REM_ACCIONES");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Accion).HasColumnName("ACCION");

                entity.Property(e => e.Identidad).HasColumnName("IDENTIDAD");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemAcciones)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("FK_REM_ACCIONES_REM_FRONTS");
            });

            modelBuilder.Entity<RemCajasfront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Cajafront });

                entity.ToTable("REM_CAJASFRONT");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_REM_CAJASFRONTVERSION");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Cajafront).HasColumnName("CAJAFRONT");

                entity.Property(e => e.Cajamanager)
                    .HasColumnName("CAJAMANAGER")
                    .HasMaxLength(3);

                entity.Property(e => e.Cajaseguridad)
                    .HasColumnName("CAJASEGURIDAD")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmcompras)
                    .HasColumnName("CODALMCOMPRAS")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmmermas)
                    .HasColumnName("CODALMMERMAS")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmrepos)
                    .HasColumnName("CODALMREPOS")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmventas)
                    .HasColumnName("CODALMVENTAS")
                    .HasMaxLength(3);

                entity.Property(e => e.ContratoAena)
                    .HasColumnName("CONTRATO_AENA")
                    .HasMaxLength(1);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Horaruptura)
                    .HasColumnName("HORARUPTURA")
                    .HasColumnType("datetime");

                entity.Property(e => e.LocalAena)
                    .HasColumnName("LOCAL_AENA")
                    .HasMaxLength(1);

                entity.Property(e => e.Serieabonosalbaranes)
                    .HasColumnName("SERIEABONOSALBARANES")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieabonosfacturas)
                    .HasColumnName("SERIEABONOSFACTURAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieabonostiquets)
                    .HasColumnName("SERIEABONOSTIQUETS")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriealbaranes)
                    .HasColumnName("SERIEALBARANES")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriecobroscuenta)
                    .HasColumnName("SERIECOBROSCUENTA")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriecompras)
                    .HasColumnName("SERIECOMPRAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieecuenta)
                    .HasColumnName("SERIEECUENTA")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieextras)
                    .HasColumnName("SERIEEXTRAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefacturas)
                    .HasColumnName("SERIEFACTURAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieinventario)
                    .HasColumnName("SERIEINVENTARIO")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieinvitaciones)
                    .HasColumnName("SERIEINVITACIONES")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriepcuenta)
                    .HasColumnName("SERIEPCUENTA")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriepedidos)
                    .HasColumnName("SERIEPEDIDOS")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriereservas)
                    .HasColumnName("SERIERESERVAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serietiquets)
                    .HasColumnName("SERIETIQUETS")
                    .HasMaxLength(4);

                entity.Property(e => e.TpvAena)
                    .HasColumnName("TPV_AENA")
                    .HasMaxLength(50);

                entity.Property(e => e.Usarserieinvitacionimportecero)
                    .HasColumnName("USARSERIEINVITACIONIMPORTECERO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Usarseriesabonos).HasColumnName("USARSERIESABONOS");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemCajasfronts)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("FK_REM_CAJASFRONT_REM_FRONTS");
            });

            modelBuilder.Entity<RemCajasfrontseries>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REM_CAJASFRONTSERIES");

                entity.Property(e => e.Cajafront).HasColumnName("CAJAFRONT");

                entity.Property(e => e.Iddissenycamposlibres).HasColumnName("IDDISSENYCAMPOSLIBRES");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");
            });

            modelBuilder.Entity<RemCajasfrontsseriessubempresa>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Cajafront, e.Subempresa, e.Tipodoc })
                    .HasName("REM_CAJASFRONTSSERIESSUBEMPRESAS_PK");

                entity.ToTable("REM_CAJASFRONTSSERIESSUBEMPRESAS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Cajafront).HasColumnName("CAJAFRONT");

                entity.Property(e => e.Subempresa).HasColumnName("SUBEMPRESA");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemCajasfrontsseriessubempresas)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_CAJASFRONTSSERIESSUBEMPRESAS_FK");
            });

            modelBuilder.Entity<RemCajasfrontsseriessubempresasdecentral>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Cajafront, e.Subempresa, e.Tipodoc })
                    .HasName("REM_CAJASFRONTSSERIESSUBEMPRESASDECENTRAL_PK");

                entity.ToTable("REM_CAJASFRONTSSERIESSUBEMPRESASDECENTRAL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Cajafront).HasColumnName("CAJAFRONT");

                entity.Property(e => e.Subempresa).HasColumnName("SUBEMPRESA");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<RemConfig>(entity =>
            {
                entity.HasKey(e => e.Idconfig);

                entity.ToTable("REM_CONFIG");

                entity.Property(e => e.Idconfig)
                    .HasColumnName("IDCONFIG")
                    .ValueGeneratedNever();

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<RemConfigdisenysimpresorarest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Terminal, e.Tipo })
                    .HasName("REM_CONFIGDISENYSIMPRESORAREST_PK");

                entity.ToTable("REM_CONFIGDISENYSIMPRESORAREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(25);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Impresora)
                    .HasColumnName("IMPRESORA")
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemConfigdisenysimpresorarests)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_CONFIGDISENYSIMPRESORAREST_FK");
            });

            modelBuilder.Entity<RemConfigemailfront>(entity =>
            {
                entity.HasKey(e => e.Idfront)
                    .HasName("REM_CONFIGEMAILFRONT_PK");

                entity.ToTable("REM_CONFIGEMAILFRONT");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .ValueGeneratedNever();

                entity.Property(e => e.Autemail).HasColumnName("AUTEMAIL");

                entity.Property(e => e.Ccopyz)
                    .HasColumnName("CCOPYZ")
                    .HasMaxLength(60);

                entity.Property(e => e.Descuadrelimit).HasColumnName("DESCUADRELIMIT");

                entity.Property(e => e.Disenyo).HasColumnName("DISENYO");

                entity.Property(e => e.Emailz)
                    .HasColumnName("EMAILZ")
                    .HasMaxLength(60);

                entity.Property(e => e.Enviarventa)
                    .HasColumnName("ENVIARVENTA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Exportarepez).HasColumnName("EXPORTAREPEZ");

                entity.Property(e => e.Exportarresx)
                    .HasColumnName("EXPORTARRESX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Exportarresz).HasColumnName("EXPORTARRESZ");

                entity.Property(e => e.Fromemail)
                    .HasColumnName("FROMEMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Host)
                    .HasColumnName("HOST")
                    .HasMaxLength(60);

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(30);

                entity.Property(e => e.Port).HasColumnName("PORT");

                entity.Property(e => e.Tipoemlz).HasColumnName("TIPOEMLZ");

                entity.Property(e => e.Tipoempleado).HasColumnName("TIPOEMPLEADO");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(60);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithOne(p => p.RemConfigemailfront)
                    .HasForeignKey<RemConfigemailfront>(d => d.Idfront)
                    .HasConstraintName("REM_CONFIGEMAILFRONT_FK");
            });

            modelBuilder.Entity<RemConfigsala>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Sala, e.Numobjeto })
                    .HasName("REM_CONFIGSALA_PK");

                entity.ToTable("REM_CONFIGSALA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Sala).HasColumnName("SALA");

                entity.Property(e => e.Numobjeto).HasColumnName("NUMOBJETO");

                entity.Property(e => e.Cargo).HasColumnName("CARGO");

                entity.Property(e => e.Codartconsummin).HasColumnName("CODARTCONSUMMIN");

                entity.Property(e => e.Consumomax).HasColumnName("CONSUMOMAX");

                entity.Property(e => e.Impfacturas)
                    .HasColumnName("IMPFACTURAS")
                    .HasMaxLength(40);

                entity.Property(e => e.Importeconsummin).HasColumnName("IMPORTECONSUMMIN");

                entity.Property(e => e.Imptiquets)
                    .HasColumnName("IMPTIQUETS")
                    .HasMaxLength(40);

                entity.Property(e => e.Numcomensales).HasColumnName("NUMCOMENSALES");

                entity.Property(e => e.Nummesa).HasColumnName("NUMMESA");

                entity.Property(e => e.Nummesareal).HasColumnName("NUMMESAREAL");

                entity.Property(e => e.Opciones)
                    .HasColumnName("OPCIONES")
                    .HasMaxLength(10);

                entity.Property(e => e.Posx).HasColumnName("POSX");

                entity.Property(e => e.Posy).HasColumnName("POSY");

                entity.Property(e => e.Propinadef).HasColumnName("PROPINADEF");

                entity.Property(e => e.Tarifa).HasColumnName("TARIFA");

                entity.Property(e => e.Tasaespecial)
                    .HasColumnName("TASAESPECIAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipoobjeto).HasColumnName("TIPOOBJETO");

                entity.Property(e => e.Tiposervicio).HasColumnName("TIPOSERVICIO");

                entity.HasOne(d => d.RemSala)
                    .WithMany(p => p.RemConfigsalas)
                    .HasForeignKey(d => new { d.Idfront, d.Sala })
                    .HasConstraintName("REM_CONFIGSALA_SALAS");
            });

            modelBuilder.Entity<RemConfigscreen>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Pantalla, e.Elemento })
                    .HasName("REM_CONFIGSCREEN_PK");

                entity.ToTable("REM_CONFIGSCREEN");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Pantalla).HasColumnName("PANTALLA");

                entity.Property(e => e.Elemento)
                    .HasColumnName("ELEMENTO")
                    .HasMaxLength(5);

                entity.Property(e => e.Columnas).HasColumnName("COLUMNAS");

                entity.Property(e => e.Comando).HasColumnName("COMANDO");

                entity.Property(e => e.Filas).HasColumnName("FILAS");

                entity.Property(e => e.Height).HasColumnName("HEIGHT");

                entity.Property(e => e.ITop).HasColumnName("iTOP");

                entity.Property(e => e.Lineastexto).HasColumnName("LINEASTEXTO");

                entity.Property(e => e.Nomfuente)
                    .HasColumnName("NOMFUENTE")
                    .HasMaxLength(35);

                entity.Property(e => e.Tamfuente).HasColumnName("TAMFUENTE");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Visible)
                    .HasColumnName("VISIBLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Width).HasColumnName("WIDTH");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemConfigscreens)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_CONFIGSCREEN_FK");
            });

            modelBuilder.Entity<RemControlacceso>(entity =>
            {
                entity.HasKey(e => e.Idfront);

                entity.ToTable("REM_CONTROLACCESO");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .ValueGeneratedNever();

                entity.Property(e => e.Errormsg)
                    .HasColumnName("ERRORMSG")
                    .HasMaxLength(60);

                entity.Property(e => e.Errormsgact)
                    .HasColumnName("ERRORMSGACT")
                    .HasMaxLength(60);

                entity.Property(e => e.Errormsgauto)
                    .HasColumnName("ERRORMSGAUTO")
                    .HasMaxLength(140);

                entity.Property(e => e.Errormsgrecep)
                    .HasColumnName("ERRORMSGRECEP")
                    .HasMaxLength(140);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaact)
                    .HasColumnName("FECHAACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecharecep)
                    .HasColumnName("FECHARECEP")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mediatransaccion).HasColumnName("MEDIATRANSACCION");

                entity.Property(e => e.Resultado).HasColumnName("RESULTADO");

                entity.Property(e => e.Resultadoact).HasColumnName("RESULTADOACT");

                entity.Property(e => e.Resultadoauto).HasColumnName("RESULTADOAUTO");

                entity.Property(e => e.Resultadorecep).HasColumnName("RESULTADORECEP");

                entity.Property(e => e.Tipotrans).HasColumnName("TIPOTRANS");

                entity.Property(e => e.Transacciones).HasColumnName("TRANSACCIONES");

                entity.Property(e => e.Transaccioneshoy).HasColumnName("TRANSACCIONESHOY");
            });

            modelBuilder.Entity<RemControlreplicacion>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Terminal });

                entity.ToTable("REM_CONTROLREPLICACION");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);

                entity.Property(e => e.Errormsg)
                    .HasColumnName("ERRORMSG")
                    .HasMaxLength(300);

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fechaact)
                    .HasColumnName("FECHAACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaerror)
                    .HasColumnName("FECHAERROR")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transcola).HasColumnName("TRANSCOLA");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemControlreplicacions)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("FK_REM_CONTROLREPLICACION");
            });

            modelBuilder.Entity<RemCubierto>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Sala, e.Mesa, e.Numlinea })
                    .HasName("REM_CUBIERTOS_PK");

                entity.ToTable("REM_CUBIERTOS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Sala).HasColumnName("SALA");

                entity.Property(e => e.Mesa).HasColumnName("MESA");

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Porcomensal)
                    .HasColumnName("PORCOMENSAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemCubiertos)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_CUBIERTOS_FK");
            });

            modelBuilder.Entity<RemDisenysdoc>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo, e.Grupo, e.Codigo, e.Nuevo });

                entity.ToTable("REM_DISENYSDOC");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_REM_DISENYSDOCVERSION");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Nuevo).HasColumnName("NUEVO");

                entity.Property(e => e.Codalternativo).HasColumnName("CODALTERNATIVO");

                entity.Property(e => e.Desdealternativo)
                    .HasColumnName("DESDEALTERNATIVO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hastaalternativo)
                    .HasColumnName("HASTAALTERNATIVO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RemDispositivo>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idterminal, e.Tipodispositivo, e.Nombre })
                    .HasName("REM_DISPOSITIVOS_PK");

                entity.ToTable("REM_DISPOSITIVOS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Tipodispositivo)
                    .HasColumnName("TIPODISPOSITIVO")
                    .HasMaxLength(5);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Caracs).HasColumnName("CARACS");

                entity.Property(e => e.Formato)
                    .HasColumnName("FORMATO")
                    .HasMaxLength(60);

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Impresoracajon)
                    .HasColumnName("IMPRESORACAJON")
                    .HasMaxLength(255);

                entity.Property(e => e.Longitud1).HasColumnName("LONGITUD1");

                entity.Property(e => e.Longitud2).HasColumnName("LONGITUD2");

                entity.Property(e => e.Opciones)
                    .HasColumnName("OPCIONES")
                    .HasMaxLength(20);

                entity.Property(e => e.Secuencia1)
                    .HasColumnName("SECUENCIA1")
                    .HasMaxLength(40);

                entity.Property(e => e.Secuencia2)
                    .HasColumnName("SECUENCIA2")
                    .HasMaxLength(40);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemDispositivos)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_DISPOSITIVOS_FK");
            });

            modelBuilder.Entity<RemDispositivoslin>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idterminal, e.Tipodispositivo, e.Nombre, e.Posicion })
                    .HasName("REM_DISPOSITIVOSLIN_PK");

                entity.ToTable("REM_DISPOSITIVOSLIN");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Tipodispositivo)
                    .HasColumnName("TIPODISPOSITIVO")
                    .HasMaxLength(5);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Secuencia)
                    .HasColumnName("SECUENCIA")
                    .HasMaxLength(40);

                entity.HasOne(d => d.RemDispositivo)
                    .WithMany(p => p.RemDispositivoslins)
                    .HasForeignKey(d => new { d.Idfront, d.Idterminal, d.Tipodispositivo, d.Nombre })
                    .HasConstraintName("REM_DISPOSITIVOSLIN_FK");
            });

            modelBuilder.Entity<RemDispositivosrest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Terminal, e.Tipodispositivo, e.Nombre })
                    .HasName("REM_DISPOSITIVOSREST_PK");

                entity.ToTable("REM_DISPOSITIVOSREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(25);

                entity.Property(e => e.Tipodispositivo)
                    .HasColumnName("TIPODISPOSITIVO")
                    .HasMaxLength(5);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(100);

                entity.Property(e => e.Gruposecuencias).HasColumnName("GRUPOSECUENCIAS");

                entity.Property(e => e.Impresoracajon)
                    .HasColumnName("IMPRESORACAJON")
                    .HasMaxLength(255);

                entity.Property(e => e.Numcaja).HasColumnName("NUMCAJA");

                entity.Property(e => e.Opciones)
                    .HasColumnName("OPCIONES")
                    .HasMaxLength(20);

                entity.Property(e => e.Secuencia)
                    .HasColumnName("SECUENCIA")
                    .HasMaxLength(40);

                entity.Property(e => e.Secuencia2)
                    .HasColumnName("SECUENCIA2")
                    .HasMaxLength(40);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemDispositivosrests)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_DISPOSITIVOSREST_FK");
            });

            modelBuilder.Entity<RemFront>(entity =>
            {
                entity.HasKey(e => e.Idfront);

                entity.ToTable("REM_FRONTS");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .ValueGeneratedNever();

                entity.Property(e => e.Abonoscentralizados).HasColumnName("ABONOSCENTRALIZADOS");

                entity.Property(e => e.Accesosarticulo)
                    .HasColumnName("ACCESOSARTICULO")
                    .HasMaxLength(60);

                entity.Property(e => e.Actimmediato).HasColumnName("ACTIMMEDIATO");

                entity.Property(e => e.Actnumfisc).HasColumnName("ACTNUMFISC");

                entity.Property(e => e.AeropuertoAena)
                    .HasColumnName("AEROPUERTO_AENA")
                    .HasMaxLength(3);

                entity.Property(e => e.Almacen)
                    .HasColumnName("ALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Almacendoblecoste)
                    .HasColumnName("ALMACENDOBLECOSTE")
                    .HasMaxLength(3);

                entity.Property(e => e.Auditoria)
                    .HasColumnName("AUDITORIA")
                    .HasMaxLength(30);

                entity.Property(e => e.Bloquearbdotroequipo).HasColumnName("BLOQUEARBDOTROEQUIPO");

                entity.Property(e => e.Cajafuerte)
                    .HasColumnName("CAJAFUERTE")
                    .HasMaxLength(3);

                entity.Property(e => e.Calcularriesgocliente).HasColumnName("CALCULARRIESGOCLIENTE");

                entity.Property(e => e.Camta).HasColumnName("CAMTA");

                entity.Property(e => e.Canclact).HasColumnName("CANCLACT");

                entity.Property(e => e.Checkletracif).HasColumnName("CHECKLETRACIF");

                entity.Property(e => e.Cif)
                    .HasColumnName("CIF")
                    .HasMaxLength(20);

                entity.Property(e => e.Clienteunico).HasColumnName("CLIENTEUNICO");

                entity.Property(e => e.Cliobligvales).HasColumnName("CLIOBLIGVALES");

                entity.Property(e => e.CobrosRemotos)
                    .HasColumnName("COBROS_REMOTOS")
                    .HasMaxLength(1);

                entity.Property(e => e.Codalmacencentral)
                    .HasColumnName("CODALMACENCENTRAL")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmcostes)
                    .HasColumnName("CODALMCOSTES")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codclienteunico).HasColumnName("CODCLIENTEUNICO");

                entity.Property(e => e.Codconceptodescuadre).HasColumnName("CODCONCEPTODESCUADRE");

                entity.Property(e => e.Codconceptoentrada).HasColumnName("CODCONCEPTOENTRADA");

                entity.Property(e => e.Codconceptoretirada).HasColumnName("CODCONCEPTORETIRADA");

                entity.Property(e => e.Codcontablevarios)
                    .HasColumnName("CODCONTABLEVARIOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codviscli).HasColumnName("CODVISCLI");

                entity.Property(e => e.Codvisible).HasColumnName("CODVISIBLE");

                entity.Property(e => e.Coloresestserv).HasColumnName("COLORESESTSERV");

                entity.Property(e => e.Configemail).HasColumnName("CONFIGEMAIL");

                entity.Property(e => e.ContratoAena)
                    .HasColumnName("CONTRATO_AENA")
                    .HasMaxLength(30);

                entity.Property(e => e.Crc)
                    .HasColumnName("CRC")
                    .HasMaxLength(50);

                entity.Property(e => e.Cuetagastosredondeo)
                    .HasColumnName("CUETAGASTOSREDONDEO")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuetaingresosredondeo)
                    .HasColumnName("CUETAINGRESOSREDONDEO")
                    .HasMaxLength(12);

                entity.Property(e => e.Datosproveedor)
                    .HasColumnName("DATOSPROVEEDOR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Descidfiscal)
                    .HasColumnName("DESCIDFISCAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Desctasa1)
                    .HasColumnName("DESCTASA1")
                    .HasMaxLength(15);

                entity.Property(e => e.Desctasa2)
                    .HasColumnName("DESCTASA2")
                    .HasMaxLength(15);

                entity.Property(e => e.Diasnomodifdatos).HasColumnName("DIASNOMODIFDATOS");

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Directorio)
                    .HasColumnName("DIRECTORIO")
                    .HasMaxLength(255);

                entity.Property(e => e.Directorioftp)
                    .HasColumnName("DIRECTORIOFTP")
                    .HasMaxLength(255);

                entity.Property(e => e.Doblecoste).HasColumnName("DOBLECOSTE");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Entidadesexport)
                    .HasColumnName("ENTIDADESEXPORT")
                    .HasMaxLength(50);

                entity.Property(e => e.Entidadesimport)
                    .HasColumnName("ENTIDADESIMPORT")
                    .HasMaxLength(100);

                entity.Property(e => e.Enviarclientesrutas).HasColumnName("ENVIARCLIENTESRUTAS");

                entity.Property(e => e.Enviarpedidoscompraproveedores).HasColumnName("ENVIARPEDIDOSCOMPRAPROVEEDORES");

                entity.Property(e => e.Errordescargaftp)
                    .HasColumnName("ERRORDESCARGAFTP")
                    .HasColumnType("ntext");

                entity.Property(e => e.Escliente).HasColumnName("ESCLIENTE");

                entity.Property(e => e.Espaciofiscal)
                    .HasColumnName("ESPACIOFISCAL")
                    .HasMaxLength(10);

                entity.Property(e => e.Estadoftp).HasColumnName("ESTADOFTP");

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechapeticiondescarga)
                    .HasColumnName("FECHAPETICIONDESCARGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaultimadescarga)
                    .HasColumnName("FECHAULTIMADESCARGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Filtraralmacenes).HasColumnName("FILTRARALMACENES");

                entity.Property(e => e.Filtrarclientes).HasColumnName("FILTRARCLIENTES");

                entity.Property(e => e.Filtrarconceptosajuste).HasColumnName("FILTRARCONCEPTOSAJUSTE");

                entity.Property(e => e.Filtrarconceptospago).HasColumnName("FILTRARCONCEPTOSPAGO");

                entity.Property(e => e.Filtrardisenyosemail).HasColumnName("FILTRARDISENYOSEMAIL");

                entity.Property(e => e.Filtrarfavoritos).HasColumnName("FILTRARFAVORITOS");

                entity.Property(e => e.Filtrarfpago).HasColumnName("FILTRARFPAGO");

                entity.Property(e => e.Filtrargruposempleados).HasColumnName("FILTRARGRUPOSEMPLEADOS");

                entity.Property(e => e.Filtrargruposrecursos).HasColumnName("FILTRARGRUPOSRECURSOS");

                entity.Property(e => e.Filtrarmotivosabono).HasColumnName("FILTRARMOTIVOSABONO");

                entity.Property(e => e.Filtrarmotivosdescuadre).HasColumnName("FILTRARMOTIVOSDESCUADRE");

                entity.Property(e => e.Filtrarmotivosdto).HasColumnName("FILTRARMOTIVOSDTO");

                entity.Property(e => e.Filtrarmotivostraspaso).HasColumnName("FILTRARMOTIVOSTRASPASO");

                entity.Property(e => e.Filtrarpromociones).HasColumnName("FILTRARPROMOCIONES");

                entity.Property(e => e.Filtrarproveedores).HasColumnName("FILTRARPROVEEDORES");

                entity.Property(e => e.Filtrarrutas).HasColumnName("FILTRARRUTAS");

                entity.Property(e => e.Filtrarturnos).HasColumnName("FILTRARTURNOS");

                entity.Property(e => e.Filtrarvendedores).HasColumnName("FILTRARVENDEDORES");

                entity.Property(e => e.Filtrocreatarjetas).HasColumnName("FILTROCREATARJETAS");

                entity.Property(e => e.Filtrousotarjetas).HasColumnName("FILTROUSOTARJETAS");

                entity.Property(e => e.Flagsdescargasauto)
                    .HasColumnName("FLAGSDESCARGASAUTO")
                    .HasMaxLength(255);

                entity.Property(e => e.Fotofptotales).HasColumnName("FOTOFPTOTALES");

                entity.Property(e => e.Fpagofoodstamp)
                    .HasColumnName("FPAGOFOODSTAMP")
                    .HasMaxLength(6);

                entity.Property(e => e.Frecuenciaconexion).HasColumnName("FRECUENCIACONEXION");

                entity.Property(e => e.Frecuenciaexport).HasColumnName("FRECUENCIAEXPORT");

                entity.Property(e => e.Frecuenciaimport).HasColumnName("FRECUENCIAIMPORT");

                entity.Property(e => e.Fvisibpromo).HasColumnName("FVISIBPROMO");

                entity.Property(e => e.Fvisibtarifv).HasColumnName("FVISIBTARIFV");

                entity.Property(e => e.Fvisibvend).HasColumnName("FVISIBVEND");

                entity.Property(e => e.Genventascli).HasColumnName("GENVENTASCLI");

                entity.Property(e => e.Gruporecurso)
                    .HasColumnName("GRUPORECURSO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Horadescargasauto)
                    .HasColumnName("HORADESCARGASAUTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Ignorarudscompra).HasColumnName("IGNORARUDSCOMPRA");

                entity.Property(e => e.Ignorarudsventa).HasColumnName("IGNORARUDSVENTA");

                entity.Property(e => e.Imparticcompra)
                    .HasColumnName("IMPARTICCOMPRA")
                    .HasMaxLength(50);

                entity.Property(e => e.Impuestoartic)
                    .HasColumnName("IMPUESTOARTIC")
                    .HasMaxLength(50);

                entity.Property(e => e.Inicializacion)
                    .HasColumnName("INICIALIZACION")
                    .HasMaxLength(40);

                entity.Property(e => e.Licencia)
                    .HasColumnName("LICENCIA")
                    .HasMaxLength(25);

                entity.Property(e => e.LocalAena)
                    .HasColumnName("LOCAL_AENA")
                    .HasMaxLength(50);

                entity.Property(e => e.Logo)
                    .HasColumnName("LOGO")
                    .HasColumnType("image");

                entity.Property(e => e.Modcli).HasColumnName("MODCLI");

                entity.Property(e => e.Modclitarjetas).HasColumnName("MODCLITARJETAS");

                entity.Property(e => e.Mostnsz).HasColumnName("MOSTNSZ");

                entity.Property(e => e.Nocalcpreciosimport).HasColumnName("NOCALCPRECIOSIMPORT");

                entity.Property(e => e.Noenviarclientesrango).HasColumnName("NOENVIARCLIENTESRANGO");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial)
                    .HasColumnName("NOMBRECOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial2)
                    .HasColumnName("NOMBRECOMERCIAL2")
                    .HasMaxLength(255);

                entity.Property(e => e.Numcajas).HasColumnName("NUMCAJAS");

                entity.Property(e => e.Numcrc)
                    .HasColumnName("NUMCRC")
                    .HasMaxLength(50);

                entity.Property(e => e.Numpolicia)
                    .HasColumnName("NUMPOLICIA")
                    .HasMaxLength(10);

                entity.Property(e => e.Opcionesasuntos)
                    .HasColumnName("OPCIONESASUNTOS")
                    .HasMaxLength(30);

                entity.Property(e => e.Opcionescentral)
                    .HasColumnName("OPCIONESCENTRAL")
                    .HasMaxLength(50);

                entity.Property(e => e.Ownpack).HasColumnName("OWNPACK");

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(10);

                entity.Property(e => e.Passw)
                    .HasColumnName("PASSW")
                    .HasMaxLength(15);

                entity.Property(e => e.Passwordftp)
                    .HasColumnName("PASSWORDFTP")
                    .HasMaxLength(50);

                entity.Property(e => e.Plantillaventa)
                    .HasColumnName("PLANTILLAVENTA")
                    .HasMaxLength(20);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Pockmngcentr).HasColumnName("POCKMNGCENTR");

                entity.Property(e => e.Proteccionhardware)
                    .HasColumnName("PROTECCIONHARDWARE")
                    .HasMaxLength(12);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Puertofremote).HasColumnName("PUERTOFREMOTE");

                entity.Property(e => e.Puertoftp).HasColumnName("PUERTOFTP");

                entity.Property(e => e.Raizanticiposcliente)
                    .HasColumnName("RAIZANTICIPOSCLIENTE")
                    .HasMaxLength(12);

                entity.Property(e => e.Raizanticiposdeudor)
                    .HasColumnName("RAIZANTICIPOSDEUDOR")
                    .HasMaxLength(12);

                entity.Property(e => e.Raizcontableacreedor)
                    .HasColumnName("RAIZCONTABLEACREEDOR")
                    .HasMaxLength(12);

                entity.Property(e => e.Raizcontablecod)
                    .HasColumnName("RAIZCONTABLECOD")
                    .HasMaxLength(12);

                entity.Property(e => e.Raizcontabledeudor)
                    .HasColumnName("RAIZCONTABLEDEUDOR")
                    .HasMaxLength(12);

                entity.Property(e => e.Raizcontableprov)
                    .HasColumnName("RAIZCONTABLEPROV")
                    .HasMaxLength(12);

                entity.Property(e => e.Raizrecargasgratis)
                    .HasColumnName("RAIZRECARGASGRATIS")
                    .HasMaxLength(12);

                entity.Property(e => e.Serverfremote)
                    .HasColumnName("SERVERFREMOTE")
                    .HasMaxLength(40);

                entity.Property(e => e.Serverftp)
                    .HasColumnName("SERVERFTP")
                    .HasMaxLength(40);

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Tarifavdoblecoste).HasColumnName("TARIFAVDOBLECOSTE");

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Terminalftp)
                    .HasColumnName("TERMINALFTP")
                    .HasMaxLength(40);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoartfoodstamp).HasColumnName("TIPOARTFOODSTAMP");

                entity.Property(e => e.Tipoimpuestodef).HasColumnName("TIPOIMPUESTODEF");

                entity.Property(e => e.Titplantillaret)
                    .HasColumnName("TITPLANTILLARET")
                    .HasMaxLength(20);

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(45);

                entity.Property(e => e.Tserver)
                    .HasColumnName("TSERVER")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Ultactstocks)
                    .HasColumnName("ULTACTSTOCKS")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usacostesxalm).HasColumnName("USACOSTESXALM");

                entity.Property(e => e.Usadescargasauto).HasColumnName("USADESCARGASAUTO");

                entity.Property(e => e.Usafoodstamp).HasColumnName("USAFOODSTAMP");

                entity.Property(e => e.Usafremote).HasColumnName("USAFREMOTE");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(20);

                entity.Property(e => e.Usuarioftp)
                    .HasColumnName("USUARIOFTP")
                    .HasMaxLength(50);

                entity.Property(e => e.ValesRemotos)
                    .HasColumnName("VALES_REMOTOS")
                    .HasMaxLength(1);

                entity.Property(e => e.Ventasclientecentral).HasColumnName("VENTASCLIENTECENTRAL");

                entity.Property(e => e.Versionexe).HasColumnName("VERSIONEXE");

                entity.Property(e => e.Vnsss).HasColumnName("VNSSS");
            });

            modelBuilder.Entity<RemFrontsinformedecentral>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Posicion })
                    .HasName("REM_FRONTSINFORMEDECENTRALPK");

                entity.ToTable("REM_FRONTSINFORMEDECENTRAL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Idinforme).HasColumnName("IDINFORME");
            });

            modelBuilder.Entity<RemFrontsinstancia>(entity =>
            {
                entity.HasKey(e => e.Posicion);

                entity.ToTable("REM_FRONTSINSTANCIAS");

                entity.Property(e => e.Posicion)
                    .HasColumnName("POSICION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<RemFrontsplugginsdecentral>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Posicion })
                    .HasName("REM_FRONTSPLUGGINSDECENTRALPK");

                entity.ToTable("REM_FRONTSPLUGGINSDECENTRAL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codpluggin).HasColumnName("CODPLUGGIN");
            });

            modelBuilder.Entity<RemFrontspropiedade>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Clave, e.Subclave })
                    .HasName("REM_FRONTSPROPIEDADES_PK");

                entity.ToTable("REM_FRONTSPROPIEDADES");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Subclave)
                    .HasColumnName("SUBCLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemFrontspropiedades)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_FRONTSPROPIEDADES_FK");
            });

            modelBuilder.Entity<RemFrontspropiedadesdecentral>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Clave, e.Subclave })
                    .HasName("REM_FRONTSPROPIEDADESDECENTRAL_PK");

                entity.ToTable("REM_FRONTSPROPIEDADESDECENTRAL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Subclave)
                    .HasColumnName("SUBCLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<RemFrontssubempresa>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Codigo })
                    .HasName("REM_FRONTSSUBEMPRESAS_PK");

                entity.ToTable("REM_FRONTSSUBEMPRESAS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Cif)
                    .HasColumnName("CIF")
                    .HasMaxLength(20);

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial)
                    .HasColumnName("NOMBRECOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial2)
                    .HasColumnName("NOMBRECOMERCIAL2")
                    .HasMaxLength(255);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemFrontssubempresas)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_FRONTSSUBEMPRESAS_FK");
            });

            modelBuilder.Entity<RemFrontssubempresasdecentral>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Codigo })
                    .HasName("REM_FRONTSSUBEMPRESASDECENTRAL_PK");

                entity.ToTable("REM_FRONTSSUBEMPRESASDECENTRAL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Cif)
                    .HasColumnName("CIF")
                    .HasMaxLength(20);

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccion2)
                    .HasColumnName("DIRECCION2")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial)
                    .HasColumnName("NOMBRECOMERCIAL")
                    .HasMaxLength(255);

                entity.Property(e => e.Nombrecomercial2)
                    .HasColumnName("NOMBRECOMERCIAL2")
                    .HasMaxLength(255);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<RemFrontsterminale>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Nombreterminal, e.Siglas, e.Licencia, e.Hardware });

                entity.ToTable("REM_FRONTSTERMINALES");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Nombreterminal)
                    .HasColumnName("NOMBRETERMINAL")
                    .HasMaxLength(40);

                entity.Property(e => e.Siglas)
                    .HasColumnName("SIGLAS")
                    .HasMaxLength(5);

                entity.Property(e => e.Licencia)
                    .HasColumnName("LICENCIA")
                    .HasMaxLength(25);

                entity.Property(e => e.Hardware)
                    .HasColumnName("HARDWARE")
                    .HasMaxLength(12);

                entity.Property(e => e.Actualizadook)
                    .HasColumnName("ACTUALIZADOOK")
                    .HasMaxLength(1);

                entity.Property(e => e.Actualizadookcontab)
                    .HasColumnName("ACTUALIZADOOKCONTAB")
                    .HasMaxLength(1);

                entity.Property(e => e.Actualizadookgeneral)
                    .HasColumnName("ACTUALIZADOOKGENERAL")
                    .HasMaxLength(1);

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codtipoterminal).HasColumnName("CODTIPOTERMINAL");

                entity.Property(e => e.Databasegeneral)
                    .HasColumnName("DATABASEGENERAL")
                    .HasMaxLength(50);

                entity.Property(e => e.Databasegestion)
                    .HasColumnName("DATABASEGESTION")
                    .HasMaxLength(50);

                entity.Property(e => e.Errordescargaftp)
                    .HasColumnName("ERRORDESCARGAFTP")
                    .HasColumnType("ntext");

                entity.Property(e => e.Esservidorclaves)
                    .HasColumnName("ESSERVIDORCLAVES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Estadoftp).HasColumnName("ESTADOFTP");

                entity.Property(e => e.Fechaactualizacion)
                    .HasColumnName("FECHAACTUALIZACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaactualizacion)
                    .HasColumnName("HORAACTUALIZACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idprograma).HasColumnName("IDPROGRAMA");

                entity.Property(e => e.Ipremote)
                    .HasColumnName("IPREMOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ismainsiglas)
                    .HasColumnName("ISMAINSIGLAS")
                    .HasMaxLength(1);

                entity.Property(e => e.Majorversion).HasColumnName("MAJORVERSION");

                entity.Property(e => e.Minorversion).HasColumnName("MINORVERSION");

                entity.Property(e => e.Numentradas).HasColumnName("NUMENTRADAS");

                entity.Property(e => e.Numusuarios).HasColumnName("NUMUSUARIOS");

                entity.Property(e => e.Passwordremote)
                    .HasColumnName("PASSWORDREMOTE")
                    .HasMaxLength(15);

                entity.Property(e => e.Plugginerrordescargaftp)
                    .HasColumnName("PLUGGINERRORDESCARGAFTP")
                    .HasColumnType("ntext");

                entity.Property(e => e.Plugginestadoftp).HasColumnName("PLUGGINESTADOFTP");

                entity.Property(e => e.Puertoremote).HasColumnName("PUERTOREMOTE");

                entity.Property(e => e.Ultimaactualizacion)
                    .HasColumnName("ULTIMAACTUALIZACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usuarioremote)
                    .HasColumnName("USUARIOREMOTE")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<RemFrontsupdate>(entity =>
            {
                entity.HasKey(e => e.Idupdate)
                    .HasName("REM_FRONTSUPTDATE_PK");

                entity.ToTable("REM_FRONTSUPDATE");

                entity.Property(e => e.Idupdate)
                    .HasColumnName("IDUPDATE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Basedatos)
                    .HasColumnName("BASEDATOS")
                    .HasMaxLength(60);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Majorversionexe).HasColumnName("MAJORVERSIONEXE");

                entity.Property(e => e.Minorversionexe).HasColumnName("MINORVERSIONEXE");

                entity.Property(e => e.Nombreterminal)
                    .HasColumnName("NOMBRETERMINAL")
                    .HasMaxLength(40);

                entity.Property(e => e.Ok)
                    .HasColumnName("OK")
                    .HasMaxLength(1);

                entity.Property(e => e.Siglas)
                    .HasColumnName("SIGLAS")
                    .HasMaxLength(5);

                entity.Property(e => e.Tipobd).HasColumnName("TIPOBD");

                entity.Property(e => e.Versionbd).HasColumnName("VERSIONBD");
            });

            modelBuilder.Entity<RemFrontsupdatelin>(entity =>
            {
                entity.HasKey(e => new { e.Idupdate, e.Pto })
                    .HasName("REM_FRONTSUPDATELIN_PK");

                entity.ToTable("REM_FRONTSUPDATELIN");

                entity.Property(e => e.Idupdate).HasColumnName("IDUPDATE");

                entity.Property(e => e.Pto)
                    .HasColumnName("PTO")
                    .HasMaxLength(25);

                entity.Property(e => e.Msgerror)
                    .HasColumnName("MSGERROR")
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdupdateNavigation)
                    .WithMany(p => p.RemFrontsupdatelins)
                    .HasForeignKey(d => d.Idupdate)
                    .HasConstraintName("REM_FRONTSUPDATELIN_FK");
            });

            modelBuilder.Entity<RemGrupossecsimpresorarest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idgruposecuencias })
                    .HasName("REM_GRUPOSSECSIMPRESORAREST_PK");

                entity.ToTable("REM_GRUPOSSECSIMPRESORAREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idgruposecuencias).HasColumnName("IDGRUPOSECUENCIAS");

                entity.Property(e => e.Nombregruposecuencias)
                    .HasColumnName("NOMBREGRUPOSECUENCIAS")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemGrupossecsimpresorarests)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_GRUPOSSECSIMPRESORAREST_FK");
            });

            modelBuilder.Entity<RemHotelesFront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idhotel })
                    .HasName("REM_HOTELES_FRONT_PK");

                entity.ToTable("REM_HOTELES_FRONT");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_REM_HOTELES_FRONTVERSION");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Actualizado).HasColumnName("ACTUALIZADO");

                entity.Property(e => e.Nuevo).HasColumnName("NUEVO");

                entity.Property(e => e.Serieabonos)
                    .HasColumnName("SERIEABONOS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieabonostiquets)
                    .HasColumnName("SERIEABONOSTIQUETS")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriealbaranes)
                    .HasColumnName("SERIEALBARANES")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefacturas)
                    .HasColumnName("SERIEFACTURAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriegastos)
                    .HasColumnName("SERIEGASTOS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieinvitaciones)
                    .HasColumnName("SERIEINVITACIONES")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriereservas)
                    .HasColumnName("SERIERESERVAS")
                    .HasMaxLength(4);

                entity.Property(e => e.Serietiquets)
                    .HasColumnName("SERIETIQUETS")
                    .HasMaxLength(4);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemHotelesFronts)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_HOTELES_FRONT_FK");
            });

            modelBuilder.Entity<RemImpresora>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Nombreimpresora })
                    .HasName("REM_IMPRESORAS_PK");

                entity.ToTable("REM_IMPRESORAS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Nombreimpresora)
                    .HasColumnName("NOMBREIMPRESORA")
                    .HasMaxLength(60);

                entity.Property(e => e.Nombreformato)
                    .HasColumnName("NOMBREFORMATO")
                    .HasMaxLength(60);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemImpresoras)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_IMPRESORAS_FK");
            });

            modelBuilder.Entity<RemImpresorasrest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Nombre })
                    .HasName("REM_IMPRESORASREST_PK");

                entity.ToTable("REM_IMPRESORASREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(100);

                entity.Property(e => e.Gruposecuencias).HasColumnName("GRUPOSECUENCIAS");

                entity.Property(e => e.Modelo)
                    .HasColumnName("MODELO")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemImpresorasrests)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_IMPRESORASREST_FK");
            });

            modelBuilder.Entity<RemIncidencia>(entity =>
            {
                entity.HasKey(e => e.Idincidencia)
                    .HasName("REM_INCIDENCIAS_PK");

                entity.ToTable("REM_INCIDENCIAS");

                entity.Property(e => e.Idincidencia).HasColumnName("IDINCIDENCIA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Fechadoc)
                    .HasColumnName("FECHADOC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidenciaorig).HasColumnName("IDINCIDENCIAORIG");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<RemInfoentidadesfront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Entitat })
                    .HasName("REM_INFOENTIDADESFRONTS_PK");

                entity.ToTable("REM_INFOENTIDADESFRONTS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Entitat).HasColumnName("ENTITAT");

                entity.Property(e => e.Iddescarga)
                    .HasColumnName("IDDESCARGA")
                    .HasMaxLength(32);

                entity.Property(e => e.Numreg).HasColumnName("NUMREG");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemInfoentidadesfronts)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_INFOENTIDADESFRONTS_FK");
            });

            modelBuilder.Entity<RemInfoversionesfront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Entitat })
                    .HasName("REM_INFOVERSIONESFRONTS_PK");

                entity.ToTable("REM_INFOVERSIONESFRONTS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Entitat).HasColumnName("ENTITAT");

                entity.Property(e => e.Version).HasColumnName("VERSION");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemInfoversionesfronts)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_INFOVERSIONESFRONTS_FK");
            });

            modelBuilder.Entity<RemInitconfiguracione>(entity =>
            {
                entity.HasKey(e => e.Idfront)
                    .HasName("REM_INITCONFIGURACIONES_PK");

                entity.ToTable("REM_INITCONFIGURACIONES");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .ValueGeneratedNever();

                entity.Property(e => e.Delventasexit).HasColumnName("DELVENTASEXIT");

                entity.Property(e => e.Diasdelventasexit).HasColumnName("DIASDELVENTASEXIT");

                entity.Property(e => e.Idconfigpantventa).HasColumnName("IDCONFIGPANTVENTA");

                entity.Property(e => e.Idconfigsalas).HasColumnName("IDCONFIGSALAS");

                entity.Property(e => e.Idconfigtermdisp).HasColumnName("IDCONFIGTERMDISP");

                entity.Property(e => e.Initpantventa).HasColumnName("INITPANTVENTA");

                entity.Property(e => e.Initsalas).HasColumnName("INITSALAS");

                entity.Property(e => e.Inittermndisp).HasColumnName("INITTERMNDISP");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithOne(p => p.RemInitconfiguracione)
                    .HasForeignKey<RemInitconfiguracione>(d => d.Idfront)
                    .HasConstraintName("REM_INITCONFIGURACIONES_FK");
            });

            modelBuilder.Entity<RemIpfront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo })
                    .HasName("REM_IPFRONTS_PK");

                entity.ToTable("REM_IPFRONTS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(100);

                entity.Property(e => e.Passw)
                    .HasColumnName("PASSW")
                    .HasMaxLength(15);

                entity.Property(e => e.Puerto).HasColumnName("PUERTO");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<RemIpfrontslocal>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo })
                    .HasName("REM_IPFRONTSLOCAL_PK");

                entity.ToTable("REM_IPFRONTSLOCAL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(100);

                entity.Property(e => e.Passw)
                    .HasColumnName("PASSW")
                    .HasMaxLength(15);

                entity.Property(e => e.Puerto).HasColumnName("PUERTO");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<RemListasfront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo, e.Codigo });

                entity.ToTable("REM_LISTASFRONTS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_REM_LISTASFRONTSVERSION");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Codigostr)
                    .HasColumnName("CODIGOSTR")
                    .HasMaxLength(30);

                entity.Property(e => e.Fechafinal)
                    .HasColumnName("FECHAFINAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechainicial)
                    .HasColumnName("FECHAINICIAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafinal)
                    .HasColumnName("HORAFINAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horainicial)
                    .HasColumnName("HORAINICIAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemListasfronts)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("FK_REM_LISTAS_REM_FRONTS");
            });

            modelBuilder.Entity<RemListasfrontsdecentral>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo, e.Codigo })
                    .HasName("REMLISTASFRONTSDECENTRAL_PK");

                entity.ToTable("REM_LISTASFRONTSDECENTRAL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Codigostr)
                    .HasColumnName("CODIGOSTR")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<RemListasfrontsdetalle>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo, e.Codigo, e.Subtipo });

                entity.ToTable("REM_LISTASFRONTSDETALLE");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Codigostr)
                    .IsRequired()
                    .HasColumnName("CODIGOSTR")
                    .HasMaxLength(30);

                entity.HasOne(d => d.RemListasfront)
                    .WithMany(p => p.RemListasfrontsdetalles)
                    .HasForeignKey(d => new { d.Idfront, d.Tipo, d.Codigo })
                    .HasConstraintName("FK_REM_LISTAS_REM_FRONTSDETALLE");
            });

            modelBuilder.Entity<RemListashotele>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Tipo, e.Codigo });

                entity.ToTable("REM_LISTASHOTELES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_REM_LISTASHOTELESVERSION");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Codigostr)
                    .HasColumnName("CODIGOSTR")
                    .HasMaxLength(30);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdhotelNavigation)
                    .WithMany(p => p.RemListashoteles)
                    .HasForeignKey(d => d.Idhotel)
                    .HasConstraintName("FK_REM_LISTASHOTELES_HOTELES");
            });

            modelBuilder.Entity<RemModelosimpresorarest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Modeloimpresora })
                    .HasName("REM_MODELOSIMPRESORAREST_PK");

                entity.ToTable("REM_MODELOSIMPRESORAREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Modeloimpresora)
                    .HasColumnName("MODELOIMPRESORA")
                    .HasMaxLength(150);

                entity.Property(e => e.Gruposecuencias).HasColumnName("GRUPOSECUENCIAS");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemModelosimpresorarests)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_MODELOSIMPRESORAREST_FK");
            });

            modelBuilder.Entity<RemPedtempcab>(entity =>
            {
                entity.HasKey(e => e.Idpedido)
                    .HasName("PK_REM_CABPED_SINCONFIRM");

                entity.ToTable("REM_PEDTEMPCAB");

                entity.Property(e => e.Idpedido).HasColumnName("IDPEDIDO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Enviopor)
                    .HasColumnName("ENVIOPOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrega)
                    .HasColumnName("FECHAENTREGA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Supedido)
                    .HasColumnName("SUPEDIDO")
                    .HasMaxLength(15);

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");
            });

            modelBuilder.Entity<RemPedtemplin>(entity =>
            {
                entity.HasKey(e => new { e.Idpedido, e.Idlinea })
                    .HasName("PK_REM_LINPED_SINCONFIRM");

                entity.ToTable("REM_PEDTEMPLIN");

                entity.Property(e => e.Idpedido).HasColumnName("IDPEDIDO");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Unid1).HasColumnName("UNID1");

                entity.Property(e => e.Unid2).HasColumnName("UNID2");

                entity.Property(e => e.Unid3).HasColumnName("UNID3");

                entity.Property(e => e.Unid4).HasColumnName("UNID4");

                entity.Property(e => e.Unidaltern).HasColumnName("UNIDALTERN");

                entity.HasOne(d => d.IdpedidoNavigation)
                    .WithMany(p => p.RemPedtemplins)
                    .HasForeignKey(d => d.Idpedido)
                    .HasConstraintName("FK_REM_LINPED_SINCONFIRM_REM_CABPED_SINCONFIRM");
            });

            modelBuilder.Entity<RemProveedoresfront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Codproveedor });

                entity.ToTable("REM_PROVEEDORESFRONT");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Dtocomercial).HasColumnName("DTOCOMERCIAL");

                entity.Property(e => e.Dtopp).HasColumnName("DTOPP");

                entity.Property(e => e.Factsinimpuestos)
                    .HasColumnName("FACTSINIMPUESTOS")
                    .HasMaxLength(1);

                entity.Property(e => e.Idcentralpedido).HasColumnName("IDCENTRALPEDIDO");

                entity.Property(e => e.Idcentralrecepcion).HasColumnName("IDCENTRALRECEPCION");

                entity.Property(e => e.Passwordped)
                    .HasColumnName("PASSWORDPED")
                    .HasMaxLength(40);

                entity.Property(e => e.Passwordrecep)
                    .HasColumnName("PASSWORDRECEP")
                    .HasMaxLength(40);

                entity.Property(e => e.Regfacturacion)
                    .HasColumnName("REGFACTURACION")
                    .HasMaxLength(1);

                entity.Property(e => e.Usuarioped)
                    .HasColumnName("USUARIOPED")
                    .HasMaxLength(40);

                entity.Property(e => e.Usuariorecep)
                    .HasColumnName("USUARIORECEP")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<RemRango>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Tipo });

                entity.ToTable("REM_RANGOS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Maximo).HasColumnName("MAXIMO");

                entity.Property(e => e.Minimo).HasColumnName("MINIMO");

                entity.Property(e => e.Puedecrear).HasColumnName("PUEDECREAR");
            });

            modelBuilder.Entity<RemRegistrodispositivosrest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Terminal, e.Nombre, e.Tipodispositivo, e.Clave, e.Nombrevalor })
                    .HasName("REGISTRODIPOSITIVOSREST_PK");

                entity.ToTable("REM_REGISTRODISPOSITIVOSREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(25);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(100);

                entity.Property(e => e.Tipodispositivo)
                    .HasColumnName("TIPODISPOSITIVO")
                    .HasMaxLength(5);

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(200);

                entity.Property(e => e.Nombrevalor)
                    .HasColumnName("NOMBREVALOR")
                    .HasMaxLength(100);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(500);

                entity.HasOne(d => d.RemDispositivosrest)
                    .WithMany(p => p.RemRegistrodispositivosrests)
                    .HasForeignKey(d => new { d.Idfront, d.Terminal, d.Tipodispositivo, d.Nombre })
                    .HasConstraintName("REGDISPREST_DISPREST_FK");
            });

            modelBuilder.Entity<RemSala>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Sala })
                    .HasName("REM_SALAS_PK");

                entity.ToTable("REM_SALAS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Sala).HasColumnName("SALA");

                entity.Property(e => e.Desactmesas).HasColumnName("DESACTMESAS");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemSalas)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_SALAS_FK");
            });

            modelBuilder.Entity<RemSecsimpresora>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Nombreformato, e.Codsecuencia })
                    .HasName("REM_SECSIMPRESORA_PK");

                entity.ToTable("REM_SECSIMPRESORA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Nombreformato)
                    .HasColumnName("NOMBREFORMATO")
                    .HasMaxLength(30);

                entity.Property(e => e.Codsecuencia).HasColumnName("CODSECUENCIA");

                entity.Property(e => e.Secuencia)
                    .HasColumnName("SECUENCIA")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemSecsimpresoras)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_SECSIMPRESORA_FK");
            });

            modelBuilder.Entity<RemSecsimpresorarest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idgruposecuencias, e.Codsecuencia })
                    .HasName("REM_SECSIMPRESORAREST_PK");

                entity.ToTable("REM_SECSIMPRESORAREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idgruposecuencias).HasColumnName("IDGRUPOSECUENCIAS");

                entity.Property(e => e.Codsecuencia).HasColumnName("CODSECUENCIA");

                entity.Property(e => e.Secuencia)
                    .HasColumnName("SECUENCIA")
                    .HasMaxLength(60);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemSecsimpresorarests)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_SECSIMPRESORAREST_FK");
            });

            modelBuilder.Entity<RemSqlsfront>(entity =>
            {
                entity.HasKey(e => new { e.Idsql, e.Idfront });

                entity.ToTable("REM_SQLSFRONT");

                entity.Property(e => e.Idsql).HasColumnName("IDSQL");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Fechaejecucion)
                    .HasColumnName("FECHAEJECUCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .HasColumnName("MENSAJE")
                    .HasColumnType("ntext");

                entity.Property(e => e.Realizada).HasColumnName("REALIZADA");

                entity.Property(e => e.Resultado).HasColumnName("RESULTADO");

                entity.Property(e => e.Textosql)
                    .HasColumnName("TEXTOSQL")
                    .HasColumnType("ntext");

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemSqlsfronts)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("FK_REM_SQLSFRONT_REM_FRONTS");
            });

            modelBuilder.Entity<RemTerminale>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idterminal })
                    .HasName("REM_TERMINALES_PK");

                entity.ToTable("REM_TERMINALES");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Actualizado)
                    .HasColumnName("ACTUALIZADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Conectado).HasColumnName("CONECTADO");

                entity.Property(e => e.Exeactualizado)
                    .HasColumnName("EXEACTUALIZADO")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.Property(e => e.Progsqueejecuta)
                    .HasColumnName("PROGSQUEEJECUTA")
                    .HasMaxLength(20);

                entity.Property(e => e.Versionbas)
                    .HasColumnName("VERSIONBAS")
                    .HasMaxLength(10);

                entity.Property(e => e.Versioncrm)
                    .HasColumnName("VERSIONCRM")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionexe)
                    .HasColumnName("VERSIONEXE")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionhba)
                    .HasColumnName("VERSIONHBA")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionmng)
                    .HasColumnName("VERSIONMNG")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionorg)
                    .HasColumnName("VERSIONORG")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionpym)
                    .HasColumnName("VERSIONPYM")
                    .HasMaxLength(10);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemTerminales)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_TERMINALES_FK");
            });

            modelBuilder.Entity<RemTerminaleslin>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idterminal, e.Tipodoc })
                    .HasName("REM_TERMINALESLIN_PK");

                entity.ToTable("REM_TERMINALESLIN");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Disenyimp)
                    .HasColumnName("DISENYIMP")
                    .HasMaxLength(60);

                entity.Property(e => e.Disenyimpn)
                    .HasColumnName("DISENYIMPN")
                    .HasMaxLength(60);

                entity.Property(e => e.Disenymail)
                    .HasColumnName("DISENYMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Dismailn)
                    .HasColumnName("DISMAILN")
                    .HasMaxLength(60);

                entity.Property(e => e.Impresora)
                    .HasColumnName("IMPRESORA")
                    .HasMaxLength(60);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RemTerminaleslins)
                    .HasForeignKey(d => new { d.Idfront, d.Idterminal })
                    .HasConstraintName("REM_TERMCAB_TERMLIN");
            });

            modelBuilder.Entity<RemTerminalesrest>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Terminal })
                    .HasName("REM_TERMINALESREST_PK");

                entity.ToTable("REM_TERMINALESREST");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(25);

                entity.Property(e => e.Actualizado)
                    .HasColumnName("ACTUALIZADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.Codfo).HasColumnName("CODFO");

                entity.Property(e => e.Conectado).HasColumnName("CONECTADO");

                entity.Property(e => e.Idtipoterminal).HasColumnName("IDTIPOTERMINAL");

                entity.Property(e => e.Versionexe)
                    .HasColumnName("VERSIONEXE")
                    .HasMaxLength(10);

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithMany(p => p.RemTerminalesrests)
                    .HasForeignKey(d => d.Idfront)
                    .HasConstraintName("REM_TERMINALESREST_FK");
            });

            modelBuilder.Entity<RemTransaccione>(entity =>
            {
                entity.ToTable("REM_TRANSACCIONES");

                entity.HasIndex(e => e.Idcentral)
                    .HasName("REM_TRANSACCIONES_IDCENTRAL");

                entity.HasIndex(e => e.Terminal)
                    .HasName("REM_TRANSACCIONES_TERMINAL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Accion).HasColumnName("ACCION");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cajanum).HasColumnName("CAJANUM");

                entity.Property(e => e.Campobit).HasColumnName("CAMPOBIT");

                entity.Property(e => e.Codigostr)
                    .HasColumnName("CODIGOSTR")
                    .HasMaxLength(50);

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha2)
                    .HasColumnName("FECHA2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha3)
                    .HasColumnName("FECHA3")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idcentral).HasColumnName("IDCENTRAL");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numero2).HasColumnName("NUMERO2");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Subtipo).HasColumnName("SUBTIPO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<RemVersione>(entity =>
            {
                entity.HasKey(e => e.Idtabla);

                entity.ToTable("REM_VERSIONES");

                entity.Property(e => e.Idtabla)
                    .HasColumnName("IDTABLA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Versionexp).HasColumnName("VERSIONEXP");

                entity.Property(e => e.Versionimp).HasColumnName("VERSIONIMP");
            });

            modelBuilder.Entity<RemVersionesdefront>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Idtabla });

                entity.ToTable("REM_VERSIONESDEFRONTS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idtabla).HasColumnName("IDTABLA");

                entity.Property(e => e.Versionexp).HasColumnName("VERSIONEXP");

                entity.Property(e => e.Versionimp).HasColumnName("VERSIONIMP");
            });

            modelBuilder.Entity<RemVersioneslocal>(entity =>
            {
                entity.HasKey(e => new { e.Idtabla, e.Clave });

                entity.ToTable("REM_VERSIONESLOCAL");

                entity.Property(e => e.Idtabla).HasColumnName("IDTABLA");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(50);

                entity.Property(e => e.Versionexp).HasColumnName("VERSIONEXP");

                entity.Property(e => e.Versionimp).HasColumnName("VERSIONIMP");
            });

            modelBuilder.Entity<Remesa>(entity =>
            {
                entity.HasKey(e => e.Numeroremesa)
                    .HasName("REMESAS_PK");

                entity.ToTable("REMESAS");

                entity.Property(e => e.Numeroremesa)
                    .HasColumnName("NUMEROREMESA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Asentamiento).HasColumnName("ASENTAMIENTO");

                entity.Property(e => e.Codempresaconta).HasColumnName("CODEMPRESACONTA");

                entity.Property(e => e.Codlineadesc).HasColumnName("CODLINEADESC");

                entity.Property(e => e.Codpais)
                    .HasColumnName("CODPAIS")
                    .HasMaxLength(2);

                entity.Property(e => e.Contrapartida)
                    .HasColumnName("CONTRAPARTIDA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentalineadescuento)
                    .HasColumnName("CUENTALINEADESCUENTO")
                    .HasMaxLength(12);

                entity.Property(e => e.Ejercicio).HasColumnName("EJERCICIO");

                entity.Property(e => e.Fechaconfeccion)
                    .HasColumnName("FECHACONFECCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lineadescuento).HasColumnName("LINEADESCUENTO");

                entity.Property(e => e.Norma).HasColumnName("NORMA");

                entity.Property(e => e.Subnorma).HasColumnName("SUBNORMA");

                entity.Property(e => e.Tipoagrup)
                    .HasColumnName("TIPOAGRUP")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Remesasadeudo>(entity =>
            {
                entity.HasKey(e => new { e.Numeroremesa, e.Codcliente })
                    .HasName("REMESASADEUDO_PK");

                entity.ToTable("REMESASADEUDO");

                entity.Property(e => e.Numeroremesa).HasColumnName("NUMEROREMESA");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Ordenadeudo)
                    .HasColumnName("ORDENADEUDO")
                    .HasMaxLength(35);

                entity.Property(e => e.Secuenciaadeudo).HasColumnName("SECUENCIAADEUDO");

                entity.Property(e => e.Subnorma).HasColumnName("SUBNORMA");

                entity.HasOne(d => d.NumeroremesaNavigation)
                    .WithMany(p => p.Remesasadeudos)
                    .HasForeignKey(d => d.Numeroremesa)
                    .HasConstraintName("REMESASADEUDO_FK");
            });

            modelBuilder.Entity<Remesasvencimiento>(entity =>
            {
                entity.HasKey(e => e.Numrem)
                    .HasName("REMESASVENCIMIENTO_PK");

                entity.ToTable("REMESASVENCIMIENTO");

                entity.Property(e => e.Numrem).HasColumnName("NUMREM");

                entity.Property(e => e.Codempresaconta).HasColumnName("CODEMPRESACONTA");

                entity.Property(e => e.Ejercicio).HasColumnName("EJERCICIO");

                entity.Property(e => e.Fecharemesa)
                    .HasColumnName("FECHAREMESA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechavencimiento)
                    .HasColumnName("FECHAVENCIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numeroremesa).HasColumnName("NUMEROREMESA");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Origen)
                    .IsRequired()
                    .HasColumnName("ORIGEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipodocumento)
                    .IsRequired()
                    .HasColumnName("TIPODOCUMENTO")
                    .HasMaxLength(1);

                entity.HasOne(d => d.NumeroremesaNavigation)
                    .WithMany(p => p.Remesasvencimientos)
                    .HasForeignKey(d => d.Numeroremesa)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("REMESASVENCIMIENTO_FK");

                entity.HasOne(d => d.Tesorerium)
                    .WithMany(p => p.Remesasvencimientos)
                    .HasForeignKey(d => new { d.Origen, d.Tipodocumento, d.Serie, d.Numero, d.N, d.Posicion })
                    .HasConstraintName("REMESASVENCIMIENTO_FK1");
            });

            modelBuilder.Entity<RemfrontTransaccione>(entity =>
            {
                entity.ToTable("REMFRONT_TRANSACCIONES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cadena1)
                    .HasColumnName("CADENA1")
                    .HasMaxLength(20);

                entity.Property(e => e.Cadena2)
                    .HasColumnName("CADENA2")
                    .HasMaxLength(20);

                entity.Property(e => e.Cadena3)
                    .HasColumnName("CADENA3")
                    .HasMaxLength(50);

                entity.Property(e => e.Esnuevo).HasColumnName("ESNUEVO");

                entity.Property(e => e.Fecha1)
                    .HasColumnName("FECHA1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecha2)
                    .HasColumnName("FECHA2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idbloqueo).HasColumnName("IDBLOQUEO");

                entity.Property(e => e.Identidad).HasColumnName("IDENTIDAD");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Numero1).HasColumnName("NUMERO1");

                entity.Property(e => e.Numero2).HasColumnName("NUMERO2");

                entity.Property(e => e.Numero3).HasColumnName("NUMERO3");

                entity.Property(e => e.Real1).HasColumnName("REAL1");

                entity.Property(e => e.Real2).HasColumnName("REAL2");
            });

            modelBuilder.Entity<Reparto>(entity =>
            {
                entity.ToTable("REPARTOS");

                entity.HasIndex(e => e.Codalmacen)
                    .HasName("REPARTOS_ALMACEN");

                entity.HasIndex(e => new { e.Dpto, e.Seccion, e.Familia, e.Subfamilia })
                    .HasName("REPARTOS_DPTOSECFAMSUBFAM");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Dpto).HasColumnName("DPTO");

                entity.Property(e => e.Familia).HasColumnName("FAMILIA");

                entity.Property(e => e.Nivel).HasColumnName("NIVEL");

                entity.Property(e => e.Seccion).HasColumnName("SECCION");

                entity.Property(e => e.Subfamilia).HasColumnName("SUBFAMILIA");

                entity.Property(e => e.Valor).HasColumnName("VALOR");
            });

            modelBuilder.Entity<Repartostock>(entity =>
            {
                entity.ToTable("REPARTOSTOCK");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color, e.Almorig, e.Almdest })
                    .HasName("IX_REPARTOSTOCK");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Almdest)
                    .IsRequired()
                    .HasColumnName("ALMDEST")
                    .HasMaxLength(3);

                entity.Property(e => e.Almorig)
                    .IsRequired()
                    .HasColumnName("ALMORIG")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Idgrupoalm).HasColumnName("IDGRUPOALM");

                entity.Property(e => e.Stockfut).HasColumnName("STOCKFUT");

                entity.Property(e => e.Stockini).HasColumnName("STOCKINI");

                entity.Property(e => e.Stockpedidos).HasColumnName("STOCKPEDIDOS");

                entity.Property(e => e.Sudocumento)
                    .HasColumnName("SUDOCUMENTO")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.Property(e => e.Udspropuestas).HasColumnName("UDSPROPUESTAS");

                entity.Property(e => e.Udstotal).HasColumnName("UDSTOTAL");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Repartostocks)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("REPARTOSTOCK_FK");
            });

            modelBuilder.Entity<Repartostockcab>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("REPARTOSTOCKCAB_PK");

                entity.ToTable("REPARTOSTOCKCAB");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Almorig)
                    .HasColumnName("ALMORIG")
                    .HasMaxLength(3);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Reserva>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idreserva, e.Idlinea })
                    .HasName("RESERVAS_PK");

                entity.ToTable("RESERVAS");

                entity.HasIndex(e => new { e.Fechaentrada, e.Estado })
                    .HasName("IDX_RESERVAS_FECHAENT");

                entity.HasIndex(e => new { e.Fechasalida, e.Estado })
                    .HasName("IDX_RESERVAS_FECHASAL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Codclienteextras).HasColumnName("CODCLIENTEEXTRAS");

                entity.Property(e => e.Codclientefijos).HasColumnName("CODCLIENTEFIJOS");

                entity.Property(e => e.Codformapago).HasColumnName("CODFORMAPAGO");

                entity.Property(e => e.Codintermediario).HasColumnName("CODINTERMEDIARIO");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Exportada).HasColumnName("EXPORTADA");

                entity.Property(e => e.Facturadaagencia)
                    .HasColumnName("FACTURADAAGENCIA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasalida)
                    .HasColumnName("FECHASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Habitacion).HasColumnName("HABITACION");

                entity.Property(e => e.Horaentrada)
                    .HasColumnName("HORAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horasalida)
                    .HasColumnName("HORASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idcupo).HasColumnName("IDCUPO");

                entity.Property(e => e.Idtarifa).HasColumnName("IDTARIFA");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Pagador).HasColumnName("PAGADOR");

                entity.Property(e => e.Planta).HasColumnName("PLANTA");

                entity.Property(e => e.Preasignada)
                    .HasColumnName("PREASIGNADA")
                    .HasMaxLength(10);

                entity.Property(e => e.Serventrada).HasColumnName("SERVENTRADA");

                entity.Property(e => e.Servsalida).HasColumnName("SERVSALIDA");

                entity.Property(e => e.Sureserva)
                    .HasColumnName("SURESERVA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tarjeta)
                    .HasColumnName("TARJETA")
                    .HasMaxLength(30);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipohabitacion).HasColumnName("TIPOHABITACION");
            });

            modelBuilder.Entity<Reservacamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Idhotel, e.Serie, e.Idreserva })
                    .HasName("RESERVACAMPOSLIBRES_PK");

                entity.ToTable("RESERVACAMPOSLIBRES");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.HasOne(d => d.Hreservascab)
                    .WithOne(p => p.Reservacamposlibre)
                    .HasForeignKey<Reservacamposlibre>(d => new { d.Idhotel, d.Serie, d.Idreserva })
                    .HasConstraintName("RESERVACAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Reservascomserv>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo, e.Codservicio, e.Codcomentario })
                    .HasName("RESERVASCOMSERV_PK");

                entity.ToTable("RESERVASCOMSERV");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Codservicio).HasColumnName("CODSERVICIO");

                entity.Property(e => e.Codcomentario).HasColumnName("CODCOMENTARIO");

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.HasOne(d => d.Reservaslin)
                    .WithMany(p => p.Reservascomservs)
                    .HasForeignKey(d => new { d.Serie, d.Idreserva, d.Idlinea, d.Idperiodo })
                    .HasConstraintName("RESLIN_RESCOMSERV");
            });

            modelBuilder.Entity<Reservascuposusado>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo, e.Fechainicio, e.Fechafin })
                    .HasName("RESERVASCUPOSUSADOS_PK");

                entity.ToTable("RESERVASCUPOSUSADOS");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Fechainicio)
                    .HasColumnName("FECHAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cupousado).HasColumnName("CUPOUSADO");

                entity.HasOne(d => d.Reserva)
                    .WithMany(p => p.Reservascuposusados)
                    .HasForeignKey(d => new { d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("RESERVAS_RESERVASCU");
            });

            modelBuilder.Entity<Reservasdoc>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo, e.Id })
                    .HasName("RESERVASDOC_PK");

                entity.ToTable("RESERVASDOC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Codclientedoc).HasColumnName("CODCLIENTEDOC");

                entity.Property(e => e.Fechadoc)
                    .HasColumnName("FECHADOC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importefacturado).HasColumnName("IMPORTEFACTURADO");

                entity.Property(e => e.Importefacturadoiva).HasColumnName("IMPORTEFACTURADOIVA");

                entity.Property(e => e.Lineadoc).HasColumnName("LINEADOC");

                entity.Property(e => e.Ndoc)
                    .HasColumnName("NDOC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numerodoc).HasColumnName("NUMERODOC");

                entity.Property(e => e.Seriedoc)
                    .HasColumnName("SERIEDOC")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Reserva)
                    .WithMany(p => p.Reservasdocs)
                    .HasForeignKey(d => new { d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("RESERVAS_RESERVASDOC");
            });

            modelBuilder.Entity<Reservasestado>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idreserva, e.Idlinea, e.Tipo, e.Codestado, e.Dias })
                    .HasName("RESERVASESTADOS_PK");

                entity.ToTable("RESERVASESTADOS");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Codestado)
                    .HasColumnName("CODESTADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Dias).HasColumnName("DIAS");

                entity.HasOne(d => d.Reserva)
                    .WithMany(p => p.Reservasestados)
                    .HasForeignKey(d => new { d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("RESERVAS_RESERVASESTADOS");
            });

            modelBuilder.Entity<Reservaslin>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idreserva, e.Idlinea, e.Idperiodo })
                    .HasName("RESERVASLIN_PK");

                entity.ToTable("RESERVASLIN");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idreserva).HasColumnName("IDRESERVA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idperiodo).HasColumnName("IDPERIODO");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numpersonas).HasColumnName("NUMPERSONAS");

                entity.Property(e => e.Pax).HasColumnName("PAX");

                entity.Property(e => e.Paxalmuerzo).HasColumnName("PAXALMUERZO");

                entity.Property(e => e.Paxcena).HasColumnName("PAXCENA");

                entity.Property(e => e.Paxdesayuno).HasColumnName("PAXDESAYUNO");

                entity.Property(e => e.Porcalmuerzo).HasColumnName("PORCALMUERZO");

                entity.Property(e => e.Porcalojamiento).HasColumnName("PORCALOJAMIENTO");

                entity.Property(e => e.Porccena).HasColumnName("PORCCENA");

                entity.Property(e => e.Porcdesayuno).HasColumnName("PORCDESAYUNO");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefhab).HasColumnName("PRECIODEFHAB");

                entity.Property(e => e.Preciodefhabiva).HasColumnName("PRECIODEFHABIVA");

                entity.Property(e => e.Preciohab).HasColumnName("PRECIOHAB");

                entity.Property(e => e.Preciohabiva).HasColumnName("PRECIOHABIVA");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Regimen)
                    .HasColumnName("REGIMEN")
                    .HasMaxLength(4);

                entity.Property(e => e.Supl0).HasColumnName("SUPL0");

                entity.Property(e => e.Supl1).HasColumnName("SUPL1");

                entity.Property(e => e.Supl2).HasColumnName("SUPL2");

                entity.Property(e => e.Supl3).HasColumnName("SUPL3");

                entity.Property(e => e.Supl4).HasColumnName("SUPL4");

                entity.Property(e => e.Supl5).HasColumnName("SUPL5");

                entity.Property(e => e.Supl6).HasColumnName("SUPL6");

                entity.Property(e => e.Supl7).HasColumnName("SUPL7");

                entity.Property(e => e.Supl8).HasColumnName("SUPL8");

                entity.Property(e => e.Supl9).HasColumnName("SUPL9");

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.HasOne(d => d.Reserva)
                    .WithMany(p => p.Reservaslins)
                    .HasForeignKey(d => new { d.Serie, d.Idreserva, d.Idlinea })
                    .HasConstraintName("RESERVAS_RESERVASLIN");
            });

            modelBuilder.Entity<Respuestasasuntoconfigurable>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Idnumero, e.Codrespuesta })
                    .HasName("RESPUESTASASUNTOCONF_PK");

                entity.ToTable("RESPUESTASASUNTOCONFIGURABLES");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Idnumero).HasColumnName("IDNUMERO");

                entity.Property(e => e.Codrespuesta).HasColumnName("CODRESPUESTA");

                entity.Property(e => e.Boolea)
                    .HasColumnName("BOOLEA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Texto)
                    .HasColumnName("TEXTO")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Asunto)
                    .WithMany(p => p.Respuestasasuntoconfigurables)
                    .HasForeignKey(d => new { d.Serie, d.Idnumero })
                    .HasConstraintName("RESPUESTASASUNTOCONF_AVISO_FK");
            });

            modelBuilder.Entity<RestDiseny>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Iddiseny })
                    .HasName("REST_DISENYS_PK");

                entity.ToTable("REST_DISENYS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_REST_DISENYSVERSION");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Iddiseny).HasColumnName("IDDISENY");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Esdefecto)
                    .HasColumnName("ESDEFECTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esmodelo)
                    .HasColumnName("ESMODELO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Idioma).HasColumnName("IDIOMA");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Ivaincluido)
                    .HasColumnName("IVAINCLUIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Ocultarptotales).HasColumnName("OCULTARPTOTALES");

                entity.Property(e => e.Tipodocumento).HasColumnName("TIPODOCUMENTO");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RestImpresiondoc>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Id })
                    .HasName("REST_IMPRESIONDOC_PK");

                entity.ToTable("REST_IMPRESIONDOC");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_REST_IMPRESIONDOCVERSION");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Booleandos)
                    .HasColumnName("BOOLEANDOS")
                    .HasMaxLength(15);

                entity.Property(e => e.Cerrado)
                    .HasColumnName("CERRADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Diseny)
                    .HasColumnName("DISENY")
                    .HasColumnType("image");

                entity.Property(e => e.Disenyver2)
                    .HasColumnName("DISENYVER2")
                    .HasColumnType("image");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idioma).HasColumnName("IDIOMA");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Ivainc)
                    .HasColumnName("IVAINC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Ncopias).HasColumnName("NCOPIAS");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Numerico1).HasColumnName("NUMERICO1");

                entity.Property(e => e.Numerico2).HasColumnName("NUMERICO2");

                entity.Property(e => e.Sql)
                    .HasColumnName("SQL")
                    .HasColumnType("ntext");

                entity.Property(e => e.Sqlfija)
                    .HasColumnName("SQLFIJA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Texto1)
                    .HasColumnName("TEXTO1")
                    .HasMaxLength(45);

                entity.Property(e => e.Texto2)
                    .HasColumnName("TEXTO2")
                    .HasMaxLength(45);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Ver)
                    .HasColumnName("VER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RestTiquetsdiseny>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Diseny, e.Tipobanda, e.Linea, e.Columna, e.Numeroelemento })
                    .HasName("REST_TIQUETSDISENY_PK");

                entity.ToTable("REST_TIQUETSDISENY");

                entity.Property(e => e.Grupo).HasColumnName("GRUPO");

                entity.Property(e => e.Diseny).HasColumnName("DISENY");

                entity.Property(e => e.Tipobanda).HasColumnName("TIPOBANDA");

                entity.Property(e => e.Linea).HasColumnName("LINEA");

                entity.Property(e => e.Columna).HasColumnName("COLUMNA");

                entity.Property(e => e.Numeroelemento).HasColumnName("NUMEROELEMENTO");

                entity.Property(e => e.Alta)
                    .HasColumnName("ALTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Ancha)
                    .HasColumnName("ANCHA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cursiva)
                    .HasColumnName("CURSIVA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Formato).HasColumnName("FORMATO");

                entity.Property(e => e.Negrita)
                    .HasColumnName("NEGRITA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.SecEscAnterior)
                    .HasColumnName("SEC_ESC_ANTERIOR")
                    .HasMaxLength(50);

                entity.Property(e => e.SecEscPosterior)
                    .HasColumnName("SEC_ESC_POSTERIOR")
                    .HasMaxLength(50);

                entity.Property(e => e.Subrallado)
                    .HasColumnName("SUBRALLADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tamany).HasColumnName("TAMANY");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasColumnName("VALOR")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.RestDiseny)
                    .WithMany(p => p.RestTiquetsdisenies)
                    .HasForeignKey(d => new { d.Grupo, d.Diseny })
                    .HasConstraintName("REST_TIQUETSDISENY_DISENYS");
            });

            modelBuilder.Entity<Resultadosgeneranservicio>(entity =>
            {
                entity.HasKey(e => new { e.Idtipoasunto, e.Codservicio, e.Codresultado, e.Numlin })
                    .HasName("RESULTADOSGENERANSERVICIO_PK");

                entity.ToTable("RESULTADOSGENERANSERVICIO");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Codservicio).HasColumnName("CODSERVICIO");

                entity.Property(e => e.Codresultado).HasColumnName("CODRESULTADO");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Auto)
                    .HasColumnName("AUTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copiardoc).HasColumnName("COPIARDOC");

                entity.Property(e => e.Copiarobs).HasColumnName("COPIAROBS");

                entity.Property(e => e.Fechareferencia)
                    .HasColumnName("FECHAREFERENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idgenerar).HasColumnName("IDGENERAR");

                entity.Property(e => e.Minutos)
                    .HasColumnName("MINUTOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nofacturable).HasColumnName("NOFACTURABLE");

                entity.Property(e => e.Periodo)
                    .HasColumnName("PERIODO")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Resultadosglobalesservicio)
                    .WithMany(p => p.Resultadosgeneranservicios)
                    .HasForeignKey(d => new { d.Idtipoasunto, d.Codservicio, d.Codresultado })
                    .HasConstraintName("RESULTADOSGENERANSERVICIO_FK");
            });

            modelBuilder.Entity<Resultadosglobalesservicio>(entity =>
            {
                entity.HasKey(e => new { e.Idtipoasunto, e.Codservicio, e.Codresultado })
                    .HasName("RESULTADOSGLOBALESSERVICIO_PK");

                entity.ToTable("RESULTADOSGLOBALESSERVICIO");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Codservicio).HasColumnName("CODSERVICIO");

                entity.Property(e => e.Codresultado).HasColumnName("CODRESULTADO");

                entity.Property(e => e.Nomresultado)
                    .HasColumnName("NOMRESULTADO")
                    .HasMaxLength(50);

                entity.HasOne(d => d.CodservicioNavigation)
                    .WithMany(p => p.Resultadosglobalesservicios)
                    .HasForeignKey(d => d.Codservicio)
                    .HasConstraintName("RESULTADOSGLOBALESSERVICIO_FK");

                entity.HasOne(d => d.IdtipoasuntoNavigation)
                    .WithMany(p => p.Resultadosglobalesservicios)
                    .HasForeignKey(d => d.Idtipoasunto)
                    .HasConstraintName("RESULTADOSGLOBALESSERVICIO_TA_FK");
            });

            modelBuilder.Entity<Ruta>(entity =>
            {
                entity.HasKey(e => e.Codruta)
                    .HasName("RUTAS_PK");

                entity.ToTable("RUTAS");

                entity.Property(e => e.Codruta)
                    .HasColumnName("CODRUTA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Rutaslin>(entity =>
            {
                entity.HasKey(e => new { e.Codruta, e.Orden })
                    .HasName("RUTASLIN_PK");

                entity.ToTable("RUTASLIN");

                entity.Property(e => e.Codruta).HasColumnName("CODRUTA");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Visitado)
                    .HasColumnName("VISITADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.CodrutaNavigation)
                    .WithMany(p => p.Rutaslins)
                    .HasForeignKey(d => d.Codruta)
                    .HasConstraintName("RUTASLIN_FK");
            });

            modelBuilder.Entity<Scoreboardsusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Idscoreboard });

                entity.ToTable("SCOREBOARDSUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Idscoreboard).HasColumnName("IDSCOREBOARD");
            });

            modelBuilder.Entity<Seccione>(entity =>
            {
                entity.HasKey(e => new { e.Numdpto, e.Numseccion })
                    .HasName("SECCIONES_PK");

                entity.ToTable("SECCIONES");

                entity.HasIndex(e => e.Numdpto)
                    .HasName("IDX_SECCIONESNUMDPTO");

                entity.HasIndex(e => e.Numseccion)
                    .HasName("IDX_SECCIONESNUMSECCION");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SECCIONESVERSION");

                entity.Property(e => e.Numdpto).HasColumnName("NUMDPTO");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.Property(e => e.Centrocoste)
                    .HasColumnName("CENTROCOSTE")
                    .HasMaxLength(6);

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .HasMaxLength(2);

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Contrapartidacompra)
                    .HasColumnName("CONTRAPARTIDACOMPRA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidacompradmn)
                    .HasColumnName("CONTRAPARTIDACOMPRADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaconsumo)
                    .HasColumnName("CONTRAPARTIDACONSUMO")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaconsumodmn)
                    .HasColumnName("CONTRAPARTIDACONSUMODMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidacosteventas)
                    .HasColumnName("CONTRAPARTIDACOSTEVENTAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidacosteventasdmn)
                    .HasColumnName("CONTRAPARTIDACOSTEVENTASDMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcompra)
                    .HasColumnName("CONTRAPARTIDADEVOLCOMPRA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcompradmn)
                    .HasColumnName("CONTRAPARTIDADEVOLCOMPRADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcosteventa)
                    .HasColumnName("CONTRAPARTIDADEVOLCOSTEVENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolcosteventadm)
                    .HasColumnName("CONTRAPARTIDADEVOLCOSTEVENTADM")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolventa)
                    .HasColumnName("CONTRAPARTIDADEVOLVENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidadevolventadmn)
                    .HasColumnName("CONTRAPARTIDADEVOLVENTADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidafaltantesinventario)
                    .HasColumnName("CONTRAPARTIDAFALTANTESINVENTARIO")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaordenesfab)
                    .HasColumnName("CONTRAPARTIDAORDENESFAB")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidasobrantesinventario)
                    .HasColumnName("CONTRAPARTIDASOBRANTESINVENTARIO")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaventa)
                    .HasColumnName("CONTRAPARTIDAVENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Contrapartidaventadmn)
                    .HasColumnName("CONTRAPARTIDAVENTADMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.Property(e => e.Dircontab)
                    .HasColumnName("DIRCONTAB")
                    .HasMaxLength(8);

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Refteclado)
                    .HasColumnName("REFTECLADO")
                    .HasMaxLength(8);

                entity.Property(e => e.Subempresa).HasColumnName("SUBEMPRESA");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NumdptoNavigation)
                    .WithMany(p => p.Secciones)
                    .HasForeignKey(d => d.Numdpto)
                    .HasConstraintName("FK__SECCIONES__NUMDP__6DEC4894");
            });

            modelBuilder.Entity<Secsimpresora>(entity =>
            {
                entity.HasKey(e => new { e.Nombreformato, e.Codsecuencia })
                    .HasName("SECSIMPRESORA_PK");

                entity.ToTable("SECSIMPRESORA");

                entity.Property(e => e.Nombreformato)
                    .HasColumnName("NOMBREFORMATO")
                    .HasMaxLength(30);

                entity.Property(e => e.Codsecuencia).HasColumnName("CODSECUENCIA");

                entity.Property(e => e.Secuencia)
                    .HasColumnName("SECUENCIA")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Secuenciacargosprov>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Codcargodto })
                    .HasName("SECUENCIACARGOSPROV_PK");

                entity.ToTable("SECUENCIACARGOSPROV");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Codcargodto).HasColumnName("CODCARGODTO");

                entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Secuenciacargosprovs)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("SECUENCIACARGOSPROV_FK");
            });

            modelBuilder.Entity<SemanasCtovtainv>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Semana, e.Año, e.Codarticulo, e.Grupo });

                entity.ToTable("SEMANAS_CTOVTAINV");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(2);

                entity.Property(e => e.Semana).HasColumnName("SEMANA");

                entity.Property(e => e.Año).HasColumnName("AÑO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Grupo)
                    .HasColumnName("GRUPO")
                    .HasMaxLength(20);

                entity.Property(e => e.Codmarca).HasColumnName("CODMARCA");

                entity.Property(e => e.Costo).HasColumnName("COSTO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Stock).HasColumnName("STOCK");
            });

            modelBuilder.Entity<SemanasCtovtum>(entity =>
            {
                entity.HasKey(e => new { e.Semana, e.Año, e.Mes, e.Grupo })
                    .HasName("PK_NUMSEMANA");

                entity.ToTable("SEMANAS_CTOVTA");

                entity.Property(e => e.Semana).HasColumnName("SEMANA");

                entity.Property(e => e.Año).HasColumnName("AÑO");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Grupo)
                    .HasColumnName("GRUPO")
                    .HasMaxLength(20);

                entity.Property(e => e.DiaFin).HasColumnName("DIA_FIN");

                entity.Property(e => e.DiaInicio).HasColumnName("DIA_INICIO");
            });

            modelBuilder.Entity<SerieAn>(entity =>
            {
                entity.HasKey(e => new { e.SerieAn1, e.Mes, e.Año });

                entity.ToTable("SERIE_AN");

                entity.Property(e => e.SerieAn1)
                    .HasColumnName("SERIE_AN")
                    .HasMaxLength(4);

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Año).HasColumnName("AÑO");

                entity.Property(e => e.Dias)
                    .HasColumnName("DIAS")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Grupo)
                    .HasColumnName("GRUPO")
                    .HasMaxLength(20);

                entity.Property(e => e.Porcentaje)
                    .HasColumnName("PORCENTAJE")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PresupuestoRotacion)
                    .HasColumnName("PRESUPUESTO_ROTACION")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PresupuestoVta)
                    .HasColumnName("PRESUPUESTO_VTA")
                    .HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<SeriePpto>(entity =>
            {
                entity.HasKey(e => new { e.SerieAnp, e.Año, e.IdConcepto })
                    .HasName("PK_SERIE_ANP");

                entity.ToTable("SERIE_PPTO");

                entity.Property(e => e.SerieAnp)
                    .HasColumnName("SERIE_ANP")
                    .HasMaxLength(4);

                entity.Property(e => e.Año).HasColumnName("AÑO");

                entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");

                entity.Property(e => e.Concepto)
                    .IsRequired()
                    .HasColumnName("CONCEPTO")
                    .HasMaxLength(100);

                entity.Property(e => e.IdDpto).HasColumnName("ID_DPTO");

                entity.Property(e => e.PresupuestoCosto)
                    .HasColumnName("PRESUPUESTO_COSTO")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TipoCosto)
                    .IsRequired()
                    .HasColumnName("TIPO_COSTO")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<SerieSemana>(entity =>
            {
                entity.HasKey(e => new { e.Semana, e.Año, e.Mes })
                    .HasName("PK_SEMANA");

                entity.ToTable("SERIE_SEMANAS");

                entity.Property(e => e.Semana).HasColumnName("SEMANA");

                entity.Property(e => e.Año).HasColumnName("AÑO");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.DiaFin).HasColumnName("DIA_FIN");

                entity.Property(e => e.DiaInicio).HasColumnName("DIA_INICIO");
            });

            modelBuilder.Entity<Series>(entity =>
            {
                entity.HasKey(e => e.Serie)
                    .HasName("SERIES_PK");

                entity.ToTable("SERIES");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Autofacv)
                    .HasColumnName("AUTOFACV")
                    .HasMaxLength(1);

                entity.Property(e => e.Centrocoste)
                    .HasColumnName("CENTROCOSTE")
                    .HasMaxLength(4);

                entity.Property(e => e.Certificada)
                    .HasColumnName("CERTIFICADA")
                    .HasMaxLength(1);

                entity.Property(e => e.Clientesvarios)
                    .HasColumnName("CLIENTESVARIOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Compras)
                    .HasColumnName("COMPRAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Contabilidadb)
                    .HasColumnName("CONTABILIDADB")
                    .HasMaxLength(8);

                entity.Property(e => e.Contabilidadn)
                    .HasColumnName("CONTABILIDADN")
                    .HasMaxLength(8);

                entity.Property(e => e.Coste)
                    .HasColumnName("COSTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costeventas)
                    .HasColumnName("COSTEVENTAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentapagos)
                    .HasColumnName("CUENTAPAGOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Dtoppcompras)
                    .HasColumnName("DTOPPCOMPRAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Dtoppventas)
                    .HasColumnName("DTOPPVENTAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Fechaaccesocontab)
                    .HasColumnName("FECHAACCESOCONTAB")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1/1/1950')");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idparent).HasColumnName("IDPARENT");

                entity.Property(e => e.Modofiscal).HasColumnName("MODOFISCAL");

                entity.Property(e => e.Nombrecertificadodigital)
                    .HasColumnName("NOMBRECERTIFICADODIGITAL")
                    .HasMaxLength(300);

                entity.Property(e => e.Numalbcb)
                    .HasColumnName("NUMALBCB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numalbcn)
                    .HasColumnName("NUMALBCN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numalbvb)
                    .HasColumnName("NUMALBVB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numalbvn)
                    .HasColumnName("NUMALBVN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numcobrostesb).HasColumnName("NUMCOBROSTESB");

                entity.Property(e => e.Numcobrostesn).HasColumnName("NUMCOBROSTESN");

                entity.Property(e => e.Numcomrete).HasColumnName("NUMCOMRETE");

                entity.Property(e => e.Numcomretm).HasColumnName("NUMCOMRETM");

                entity.Property(e => e.Numdepob)
                    .HasColumnName("NUMDEPOB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numdepon)
                    .HasColumnName("NUMDEPON")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numdevcb)
                    .HasColumnName("NUMDEVCB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numdevcn)
                    .HasColumnName("NUMDEVCN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numdevvb)
                    .HasColumnName("NUMDEVVB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numdevvn)
                    .HasColumnName("NUMDEVVN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numfabb)
                    .HasColumnName("NUMFABB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numfaccb)
                    .HasColumnName("NUMFACCB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numfaccn)
                    .HasColumnName("NUMFACCN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numfacvb)
                    .HasColumnName("NUMFACVB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numfacvn)
                    .HasColumnName("NUMFACVN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nummerma)
                    .HasColumnName("NUMMERMA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numpagostesb).HasColumnName("NUMPAGOSTESB");

                entity.Property(e => e.Numpagostesn).HasColumnName("NUMPAGOSTESN");

                entity.Property(e => e.Numpedcb)
                    .HasColumnName("NUMPEDCB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numpedcn)
                    .HasColumnName("NUMPEDCN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numpedvb)
                    .HasColumnName("NUMPEDVB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numpedvn)
                    .HasColumnName("NUMPEDVN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numpresb)
                    .HasColumnName("NUMPRESB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numpresn)
                    .HasColumnName("NUMPRESN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Numtrasp)
                    .HasColumnName("NUMTRASP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Recargo)
                    .HasColumnName("RECARGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Sufijocontable)
                    .HasColumnName("SUFIJOCONTABLE")
                    .HasMaxLength(12);

                entity.Property(e => e.Tipodocecuador)
                    .HasColumnName("TIPODOCECUADOR")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipodocumento)
                    .HasColumnName("TIPODOCUMENTO")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipodocumentotransporte)
                    .HasColumnName("TIPODOCUMENTOTRANSPORTE")
                    .HasMaxLength(2);

                entity.Property(e => e.Transporte)
                    .HasColumnName("TRANSPORTE")
                    .HasMaxLength(1);

                entity.Property(e => e.Ventas)
                    .HasColumnName("VENTAS")
                    .HasMaxLength(12);
            });

            modelBuilder.Entity<Seriescamposlibre>(entity =>
            {
                entity.HasKey(e => e.Serie)
                    .HasName("SERIESCAMPOSLIBRES_PK");

                entity.ToTable("SERIESCAMPOSLIBRES");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Cliente).HasColumnName("CLIENTE");

                entity.Property(e => e.Consulta1)
                    .HasColumnName("CONSULTA1")
                    .HasMaxLength(400);

                entity.Property(e => e.Consulta2)
                    .HasColumnName("CONSULTA2")
                    .HasMaxLength(400);

                entity.Property(e => e.Cuentacontable)
                    .HasColumnName("CUENTACONTABLE")
                    .HasMaxLength(13);

                entity.Property(e => e.Franquicia)
                    .HasColumnName("FRANQUICIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Seriefa)
                    .HasColumnName("SERIEFA")
                    .HasMaxLength(50);

                entity.Property(e => e.Serienc)
                    .HasColumnName("SERIENC")
                    .HasMaxLength(50);

                entity.Property(e => e.Webpass)
                    .HasColumnName("WEBPASS")
                    .HasMaxLength(50);

                entity.HasOne(d => d.SerieNavigation)
                    .WithOne(p => p.Seriescamposlibre)
                    .HasForeignKey<Seriescamposlibre>(d => d.Serie)
                    .HasConstraintName("SERIESCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Seriesdoc>(entity =>
            {
                entity.HasKey(e => new { e.Tipodoc, e.Serie })
                    .HasName("SERIESDOC_PK");

                entity.ToTable("SERIESDOC");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Contadorb)
                    .HasColumnName("CONTADORB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contadorn)
                    .HasColumnName("CONTADORN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.SerieNavigation)
                    .WithMany(p => p.Seriesdocs)
                    .HasForeignKey(d => d.Serie)
                    .HasConstraintName("SERIESDOCSERIE_FK");

                entity.HasOne(d => d.TipodocNavigation)
                    .WithMany(p => p.Seriesdocs)
                    .HasForeignKey(d => d.Tipodoc)
                    .HasConstraintName("SERIESDOCTIPODOC_FK");
            });

            modelBuilder.Entity<Seriesresolucion>(entity =>
            {
                entity.HasKey(e => new { e.Serieresol, e.Numresol })
                    .HasName("SERIESRESOLUCION_PK");

                entity.ToTable("SERIESRESOLUCION");

                entity.Property(e => e.Serieresol)
                    .HasColumnName("SERIERESOL")
                    .HasMaxLength(15);

                entity.Property(e => e.Numresol)
                    .HasColumnName("NUMRESOL")
                    .HasMaxLength(15);

                entity.Property(e => e.Activo).HasColumnName("ACTIVO");

                entity.Property(e => e.Contador).HasColumnName("CONTADOR");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaingreso)
                    .HasColumnName("FECHAINGRESO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechavencimiento)
                    .HasColumnName("FECHAVENCIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Numerofinal).HasColumnName("NUMEROFINAL");

                entity.Property(e => e.Numeroinicial).HasColumnName("NUMEROINICIAL");
            });

            modelBuilder.Entity<Servicio>(entity =>
            {
                entity.HasKey(e => new { e.Idintervencion, e.Serie, e.Numero })
                    .HasName("SERVICIOS_PK");

                entity.ToTable("SERVICIOS");

                entity.HasIndex(e => e.Codempleado)
                    .HasName("SERVICIOS_EMPLEADO");

                entity.HasIndex(e => e.Fecha)
                    .HasName("SERVICIOS_FECHA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SERVICIOSVERSION");

                entity.HasIndex(e => new { e.Serie, e.Numero })
                    .HasName("SERVICIOS_SERIENUM");

                entity.HasIndex(e => new { e.Serieasociado, e.Numeroasociado })
                    .HasName("SERVICIOS_ASOCIADO");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Anuladopaquete)
                    .HasColumnName("ANULADOPAQUETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Asignado)
                    .HasColumnName("ASIGNADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Bhorafija)
                    .HasColumnName("BHORAFIJA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Bloquea)
                    .HasColumnName("BLOQUEA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Bloqueado)
                    .HasColumnName("BLOQUEADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo)
                    .HasColumnName("CODARTICULO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codcondicion)
                    .HasColumnName("CODCONDICION")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codcreador).HasColumnName("CODCREADOR");

                entity.Property(e => e.Coddesplaza)
                    .HasColumnName("CODDESPLAZA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codpredefinido)
                    .HasColumnName("CODPREDEFINIDO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codresultado)
                    .HasColumnName("CODRESULTADO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codtarifa)
                    .HasColumnName("CODTARIFA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codtransporte)
                    .HasColumnName("CODTRANSPORTE")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codvehiculo)
                    .HasColumnName("CODVEHICULO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Colordesplaza)
                    .IsRequired()
                    .HasColumnName("COLORDESPLAZA")
                    .HasMaxLength(10);

                entity.Property(e => e.Costearticulos).HasColumnName("COSTEARTICULOS");

                entity.Property(e => e.Costearticulosiva).HasColumnName("COSTEARTICULOSIVA");

                entity.Property(e => e.Costedesplaza).HasColumnName("COSTEDESPLAZA");

                entity.Property(e => e.Costedesplazaiva).HasColumnName("COSTEDESPLAZAIVA");

                entity.Property(e => e.Costegastos).HasColumnName("COSTEGASTOS");

                entity.Property(e => e.Costegastosiva).HasColumnName("COSTEGASTOSIVA");

                entity.Property(e => e.Costemanoobra).HasColumnName("COSTEMANOOBRA");

                entity.Property(e => e.Costemanoobraiva).HasColumnName("COSTEMANOOBRAIVA");

                entity.Property(e => e.Despafacturar).HasColumnName("DESPAFACTURAR");

                entity.Property(e => e.Duracion).HasColumnName("DURACION");

                entity.Property(e => e.Duracionprevista)
                    .HasColumnName("DURACIONPREVISTA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Duracionreal).HasColumnName("DURACIONREAL");

                entity.Property(e => e.Duraciontotal).HasColumnName("DURACIONTOTAL");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Estadoreserva).HasColumnName("ESTADORESERVA");

                entity.Property(e => e.Factor).HasColumnName("FACTOR");

                entity.Property(e => e.Facturara).HasColumnName("FACTURARA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificacion)
                    .HasColumnName("FECHAMODIFICACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasMaxLength(15);

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasMaxLength(15);

                entity.Property(e => e.Horaprevista)
                    .HasColumnName("HORAPREVISTA")
                    .HasMaxLength(15);

                entity.Property(e => e.Idparent)
                    .HasColumnName("IDPARENT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idserbloc)
                    .HasColumnName("IDSERBLOC")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Importeart).HasColumnName("IMPORTEART");

                entity.Property(e => e.Importeartiva).HasColumnName("IMPORTEARTIVA");

                entity.Property(e => e.Importedesp).HasColumnName("IMPORTEDESP");

                entity.Property(e => e.Importedespiva).HasColumnName("IMPORTEDESPIVA");

                entity.Property(e => e.Importemo).HasColumnName("IMPORTEMO");

                entity.Property(e => e.Importemoiva).HasColumnName("IMPORTEMOIVA");

                entity.Property(e => e.Kms).HasColumnName("KMS");

                entity.Property(e => e.Manoobraafacturar).HasColumnName("MANOOBRAAFACTURAR");

                entity.Property(e => e.Modofact)
                    .HasColumnName("MODOFACT")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Nalbaran)
                    .HasColumnName("NALBARAN")
                    .HasMaxLength(1);

                entity.Property(e => e.Numbloc)
                    .HasColumnName("NUMBLOC")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Numeroalbaran).HasColumnName("NUMEROALBARAN");

                entity.Property(e => e.Numeroasociado).HasColumnName("NUMEROASOCIADO");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Paradas).HasColumnName("PARADAS");

                entity.Property(e => e.Pax)
                    .HasColumnName("PAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Seriealbaran)
                    .IsRequired()
                    .HasColumnName("SERIEALBARAN")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieasociado)
                    .HasColumnName("SERIEASOCIADO")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriebloc)
                    .HasColumnName("SERIEBLOC")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Talladesplaza)
                    .IsRequired()
                    .HasColumnName("TALLADESPLAZA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tienedesp)
                    .HasColumnName("TIENEDESP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tiposervicio)
                    .HasColumnName("TIPOSERVICIO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Titulo)
                    .HasColumnName("TITULO")
                    .HasMaxLength(50);

                entity.Property(e => e.Unitario)
                    .HasColumnName("UNITARIO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Asunto)
                    .WithMany(p => p.Servicios)
                    .HasForeignKey(d => new { d.Serie, d.Numero })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SERVICIOS_ASUNTO_FK");
            });

            modelBuilder.Entity<Serviciosarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.Idintervencion, e.Idlin })
                    .HasName("SERVICIOSARTICULOS_PK");

                entity.ToTable("SERVICIOSARTICULOS");

                entity.HasIndex(e => e.Desde)
                    .HasName("SERVICIOSARTICULOS_FECHA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Idlin).HasColumnName("IDLIN");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Facturado)
                    .HasColumnName("FACTURADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechafac)
                    .HasColumnName("FECHAFAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Nfac)
                    .HasColumnName("NFAC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numerofac).HasColumnName("NUMEROFAC");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Seriefac)
                    .HasColumnName("SERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipoimpuesto).HasColumnName("TIPOIMPUESTO");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.Servicio)
                    .WithMany(p => p.Serviciosarticulos)
                    .HasForeignKey(d => new { d.Idintervencion, d.Serie, d.Numero })
                    .HasConstraintName("SERVICIOSARTICULOS_FK");
            });

            modelBuilder.Entity<Serviciosauditorium>(entity =>
            {
                entity.ToTable("SERVICIOSAUDITORIA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Dia)
                    .HasColumnName("DIA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idservicio).HasColumnName("IDSERVICIO");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Servicioscamposlibre>(entity =>
            {
                entity.HasKey(e => new { e.Idintervencion, e.Serie, e.Numero })
                    .HasName("SERVICIOSCAMPOSLIBRES_PK");

                entity.ToTable("SERVICIOSCAMPOSLIBRES");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.HasOne(d => d.Servicio)
                    .WithOne(p => p.Servicioscamposlibre)
                    .HasForeignKey<Servicioscamposlibre>(d => new { d.Idintervencion, d.Serie, d.Numero })
                    .HasConstraintName("SERVICIOSCAMPOSLIBRES_FK");
            });

            modelBuilder.Entity<Serviciosdocumento>(entity =>
            {
                entity.HasKey(e => new { e.Idintervencion, e.Serie, e.Numero, e.Contador })
                    .HasName("SERVICIOSDOCUMENTO_PK");

                entity.ToTable("SERVICIOSDOCUMENTO");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Contador).HasColumnName("CONTADOR");

                entity.Property(e => e.Ordenfoto).HasColumnName("ORDENFOTO");

                entity.Property(e => e.Ruta)
                    .HasColumnName("RUTA")
                    .HasMaxLength(240);

                entity.HasOne(d => d.Servicio)
                    .WithMany(p => p.Serviciosdocumentos)
                    .HasForeignKey(d => new { d.Idintervencion, d.Serie, d.Numero })
                    .HasConstraintName("SERVICIOSDOCUMENTO_SER_FK");
            });

            modelBuilder.Entity<Serviciosglobale>(entity =>
            {
                entity.HasKey(e => e.Codservicio)
                    .HasName("SERVICIOSGLOBALES_PK");

                entity.ToTable("SERVICIOSGLOBALES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SERVICIOSGLOBALESVERSION");

                entity.Property(e => e.Codservicio)
                    .HasColumnName("CODSERVICIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Gruporecursos)
                    .HasColumnName("GRUPORECURSOS")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nombrecorto)
                    .HasColumnName("NOMBRECORTO")
                    .HasMaxLength(25);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Serviciosglobalescomentario>(entity =>
            {
                entity.HasKey(e => new { e.Codservicio, e.Numcomentario });

                entity.ToTable("SERVICIOSGLOBALESCOMENTARIOS");

                entity.Property(e => e.Codservicio).HasColumnName("CODSERVICIO");

                entity.Property(e => e.Numcomentario).HasColumnName("NUMCOMENTARIO");

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(40);

                entity.HasOne(d => d.CodservicioNavigation)
                    .WithMany(p => p.Serviciosglobalescomentarios)
                    .HasForeignKey(d => d.Codservicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SERVICIOSGLOBALESCOMENTARIOS_SERVICIOSGLOBALES");
            });

            modelBuilder.Entity<Serviciosparada>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.Idintervencion, e.Codlinparada })
                    .HasName("SERVICIOSPARADAS_PK");

                entity.ToTable("SERVICIOSPARADAS");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Idintervencion).HasColumnName("IDINTERVENCION");

                entity.Property(e => e.Codlinparada).HasColumnName("CODLINPARADA");

                entity.Property(e => e.Codparada).HasColumnName("CODPARADA");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasMaxLength(8);

                entity.Property(e => e.Horainicio)
                    .HasColumnName("HORAINICIO")
                    .HasMaxLength(8);

                entity.Property(e => e.Tiempo).HasColumnName("TIEMPO");

                entity.HasOne(d => d.CodparadaNavigation)
                    .WithMany(p => p.Serviciosparada)
                    .HasForeignKey(d => d.Codparada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SERVICIOSPARADAS_FK_PARADAS");

                entity.HasOne(d => d.Servicio)
                    .WithMany(p => p.Serviciosparada)
                    .HasForeignKey(d => new { d.Idintervencion, d.Serie, d.Numero })
                    .HasConstraintName("SERVICIOSPARADAS_FK_SERVEI");
            });

            modelBuilder.Entity<ShowDiapositiva>(entity =>
            {
                entity.HasKey(e => e.Iddiapositiva);

                entity.ToTable("SHOW_DIAPOSITIVAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SHOW_DIAPOSITIVASVERSION");

                entity.Property(e => e.Iddiapositiva)
                    .HasColumnName("IDDIAPOSITIVA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Duracion).HasColumnName("DURACION");

                entity.Property(e => e.Thumb)
                    .HasColumnName("THUMB")
                    .HasColumnType("image");

                entity.Property(e => e.Tipotransicion).HasColumnName("TIPOTRANSICION");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ShowDiapositivagrupo>(entity =>
            {
                entity.HasKey(e => new { e.Idgrupo, e.Idfront });

                entity.ToTable("SHOW_DIAPOSITIVAGRUPO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SHOW_DIAPOSITIVAGRUPOVERSION");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Iddiapositiva).HasColumnName("IDDIAPOSITIVA");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IddiapositivaNavigation)
                    .WithMany(p => p.ShowDiapositivagrupos)
                    .HasForeignKey(d => d.Iddiapositiva)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SHOW_DIAPOSITIVAGRUPO_SHOW_DIAPOSITIVAS");

                entity.HasOne(d => d.IdgrupoNavigation)
                    .WithMany(p => p.ShowDiapositivagrupos)
                    .HasForeignKey(d => d.Idgrupo)
                    .HasConstraintName("FK_SHOW_DIAPOSITIVAGRUPO_GRUPOSARTICULOS");
            });

            modelBuilder.Entity<ShowDiapositivaspresentacion>(entity =>
            {
                entity.HasKey(e => new { e.Idpresentacion, e.Posicion });

                entity.ToTable("SHOW_DIAPOSITIVASPRESENTACION");

                entity.Property(e => e.Idpresentacion).HasColumnName("IDPRESENTACION");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Iddiapositiva).HasColumnName("IDDIAPOSITIVA");

                entity.HasOne(d => d.IddiapositivaNavigation)
                    .WithMany(p => p.ShowDiapositivaspresentacions)
                    .HasForeignKey(d => d.Iddiapositiva)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SHOW_DIAPOSITIVASPRESENTACION_SHOW_DIAPOSITIVAS");

                entity.HasOne(d => d.IdpresentacionNavigation)
                    .WithMany(p => p.ShowDiapositivaspresentacions)
                    .HasForeignKey(d => d.Idpresentacion)
                    .HasConstraintName("FK_SHOW_DIAPOSITIVASPRESENTACION_SHOW_PRESENTACIONES");
            });

            modelBuilder.Entity<ShowHorario>(entity =>
            {
                entity.HasKey(e => e.Idhorario);

                entity.ToTable("SHOW_HORARIO");

                entity.Property(e => e.Idhorario)
                    .HasColumnName("IDHORARIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShowHorariofront>(entity =>
            {
                entity.HasKey(e => e.Idfront);

                entity.ToTable("SHOW_HORARIOFRONT");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SHOW_HORARIOFRONTVERSION");

                entity.Property(e => e.Idfront)
                    .HasColumnName("IDFRONT")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idhorario).HasColumnName("IDHORARIO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdfrontNavigation)
                    .WithOne(p => p.ShowHorariofront)
                    .HasForeignKey<ShowHorariofront>(d => d.Idfront)
                    .HasConstraintName("FK_SHOW_HORARIOFRONT_REM_FRONTS");

                entity.HasOne(d => d.IdhorarioNavigation)
                    .WithMany(p => p.ShowHorariofronts)
                    .HasForeignKey(d => d.Idhorario)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SHOW_HORARIOFRONT_SHOW_HORARIO");
            });

            modelBuilder.Entity<ShowItem>(entity =>
            {
                entity.HasKey(e => e.Iditem);

                entity.ToTable("SHOW_ITEMS");

                entity.Property(e => e.Iditem)
                    .HasColumnName("IDITEM")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alto).HasColumnName("ALTO");

                entity.Property(e => e.Ancho).HasColumnName("ANCHO");

                entity.Property(e => e.Angulo).HasColumnName("ANGULO");

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Contorno).HasColumnName("CONTORNO");

                entity.Property(e => e.Escalax).HasColumnName("ESCALAX");

                entity.Property(e => e.Escalay).HasColumnName("ESCALAY");

                entity.Property(e => e.Fontbold).HasColumnName("FONTBOLD");

                entity.Property(e => e.Fontcolor).HasColumnName("FONTCOLOR");

                entity.Property(e => e.Fontitalic).HasColumnName("FONTITALIC");

                entity.Property(e => e.Fontname)
                    .HasColumnName("FONTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontsize).HasColumnName("FONTSIZE");

                entity.Property(e => e.Iddiapositiva).HasColumnName("IDDIAPOSITIVA");

                entity.Property(e => e.Idrecurso).HasColumnName("IDRECURSO");

                entity.Property(e => e.Posx).HasColumnName("POSX");

                entity.Property(e => e.Posxin).HasColumnName("POSXIN");

                entity.Property(e => e.Posy).HasColumnName("POSY");

                entity.Property(e => e.Posyin).HasColumnName("POSYIN");

                entity.Property(e => e.Texto)
                    .HasColumnName("TEXTO")
                    .HasMaxLength(100);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Transparencia).HasColumnName("TRANSPARENCIA");

                entity.Property(e => e.Transparente).HasColumnName("TRANSPARENTE");

                entity.Property(e => e.Zorder).HasColumnName("ZORDER");

                entity.HasOne(d => d.IddiapositivaNavigation)
                    .WithMany(p => p.ShowItems)
                    .HasForeignKey(d => d.Iddiapositiva)
                    .HasConstraintName("FK_SHOW_ITEMS_SHOW_DIAPOSITIVAS");

                entity.HasOne(d => d.IdrecursoNavigation)
                    .WithMany(p => p.ShowItems)
                    .HasForeignKey(d => d.Idrecurso)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SHOW_ITEMS_SHOW_RECURSOS");
            });

            modelBuilder.Entity<ShowPresentacione>(entity =>
            {
                entity.HasKey(e => e.Idpresentacion);

                entity.ToTable("SHOW_PRESENTACIONES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SHOW_PRESENTACIONESVERSION");

                entity.Property(e => e.Idpresentacion)
                    .HasColumnName("IDPRESENTACION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alto).HasColumnName("ALTO");

                entity.Property(e => e.Ancho).HasColumnName("ANCHO");

                entity.Property(e => e.Barrasuperior)
                    .HasColumnName("BARRASUPERIOR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mostrarvisor).HasColumnName("MOSTRARVISOR");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Reescalar).HasColumnName("REESCALAR");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ShowPresentacionhorario>(entity =>
            {
                entity.HasKey(e => new { e.Idhorario, e.Hora });

                entity.ToTable("SHOW_PRESENTACIONHORARIO");

                entity.Property(e => e.Idhorario).HasColumnName("IDHORARIO");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Iddomingo).HasColumnName("IDDOMINGO");

                entity.Property(e => e.Idjueves).HasColumnName("IDJUEVES");

                entity.Property(e => e.Idlunes).HasColumnName("IDLUNES");

                entity.Property(e => e.Idmartes).HasColumnName("IDMARTES");

                entity.Property(e => e.Idmiercoles).HasColumnName("IDMIERCOLES");

                entity.Property(e => e.Idsabado).HasColumnName("IDSABADO");

                entity.Property(e => e.Idviernes).HasColumnName("IDVIERNES");

                entity.HasOne(d => d.IddomingoNavigation)
                    .WithMany(p => p.ShowPresentacionhorarioIddomingoNavigations)
                    .HasForeignKey(d => d.Iddomingo)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_PRESENTACIONES7");

                entity.HasOne(d => d.IdhorarioNavigation)
                    .WithMany(p => p.ShowPresentacionhorarios)
                    .HasForeignKey(d => d.Idhorario)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_HORARIO");

                entity.HasOne(d => d.IdjuevesNavigation)
                    .WithMany(p => p.ShowPresentacionhorarioIdjuevesNavigations)
                    .HasForeignKey(d => d.Idjueves)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_PRESENTACIONES4");

                entity.HasOne(d => d.IdlunesNavigation)
                    .WithMany(p => p.ShowPresentacionhorarioIdlunesNavigations)
                    .HasForeignKey(d => d.Idlunes)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_PRESENTACIONES1");

                entity.HasOne(d => d.IdmartesNavigation)
                    .WithMany(p => p.ShowPresentacionhorarioIdmartesNavigations)
                    .HasForeignKey(d => d.Idmartes)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_PRESENTACIONES2");

                entity.HasOne(d => d.IdmiercolesNavigation)
                    .WithMany(p => p.ShowPresentacionhorarioIdmiercolesNavigations)
                    .HasForeignKey(d => d.Idmiercoles)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_PRESENTACIONES3");

                entity.HasOne(d => d.IdsabadoNavigation)
                    .WithMany(p => p.ShowPresentacionhorarioIdsabadoNavigations)
                    .HasForeignKey(d => d.Idsabado)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_PRESENTACIONES6");

                entity.HasOne(d => d.IdviernesNavigation)
                    .WithMany(p => p.ShowPresentacionhorarioIdviernesNavigations)
                    .HasForeignKey(d => d.Idviernes)
                    .HasConstraintName("FK_SHOW_PRESENTACIONHORARIO_SHOW_PRESENTACIONES5");
            });

            modelBuilder.Entity<ShowRecurso>(entity =>
            {
                entity.HasKey(e => e.Idrecurso);

                entity.ToTable("SHOW_RECURSOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SHOW_RECURSOSVERSION");

                entity.Property(e => e.Idrecurso)
                    .HasColumnName("IDRECURSO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bitmap)
                    .HasColumnName("BITMAP")
                    .HasColumnType("image");

                entity.Property(e => e.Texto)
                    .HasColumnName("TEXTO")
                    .HasMaxLength(100);

                entity.Property(e => e.Thumb)
                    .HasColumnName("THUMB")
                    .HasColumnType("image");

                entity.Property(e => e.Tiporecurso).HasColumnName("TIPORECURSO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Situacione>(entity =>
            {
                entity.HasKey(e => e.Codsituacion)
                    .HasName("SITUACIONES_PK");

                entity.ToTable("SITUACIONES");

                entity.Property(e => e.Codsituacion)
                    .HasColumnName("CODSITUACION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alternativa)
                    .HasColumnName("ALTERNATIVA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Impresionvalorada)
                    .HasColumnName("IMPRESIONVALORADA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Sitalternativa).HasColumnName("SITALTERNATIVA");
            });

            modelBuilder.Entity<Situacionesarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codsituacion })
                    .HasName("SITUACIONESARTICULO_PK");

                entity.ToTable("SITUACIONESARTICULO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SITUACIONESARTICULOVERSION");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codsituacion).HasColumnName("CODSITUACION");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Situacionesarticulos)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("SITUACIONESARTICULO_FK_ARTICULOS");

                entity.HasOne(d => d.CodsituacionNavigation)
                    .WithMany(p => p.Situacionesarticulos)
                    .HasForeignKey(d => d.Codsituacion)
                    .HasConstraintName("SITUACIONESARTICULO_FK_SITUACIONES");
            });

            modelBuilder.Entity<Situacionesfamilium>(entity =>
            {
                entity.HasKey(e => new { e.Codseccion, e.Codsituacion })
                    .HasName("SITUACIONESFAMILIA_PK");

                entity.ToTable("SITUACIONESFAMILIA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_SITUACIONESFAMILIAVERSION");

                entity.Property(e => e.Codseccion).HasColumnName("CODSECCION");

                entity.Property(e => e.Codsituacion).HasColumnName("CODSITUACION");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodsituacionNavigation)
                    .WithMany(p => p.Situacionesfamilia)
                    .HasForeignKey(d => d.Codsituacion)
                    .HasConstraintName("SITUACIONESFAMILIA_FK_SITUACION");
            });

            modelBuilder.Entity<Situacionesmacro>(entity =>
            {
                entity.HasKey(e => new { e.Codmacro, e.Codsituacion })
                    .HasName("SITUACIONESMACRO_PK");

                entity.ToTable("SITUACIONESMACRO");

                entity.Property(e => e.Codmacro).HasColumnName("CODMACRO");

                entity.Property(e => e.Codsituacion).HasColumnName("CODSITUACION");

                entity.HasOne(d => d.CodsituacionNavigation)
                    .WithMany(p => p.Situacionesmacros)
                    .HasForeignKey(d => d.Codsituacion)
                    .HasConstraintName("SITUACIONES_SITUACIONESMACRO");
            });

            modelBuilder.Entity<SmsEnviado>(entity =>
            {
                entity.HasKey(e => new { e.Idsms, e.Fecha, e.Hora, e.Mobil })
                    .HasName("SMS_ENVIADOS_PK");

                entity.ToTable("SMS_ENVIADOS");

                entity.Property(e => e.Idsms).HasColumnName("IDSMS");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Enviado).HasColumnName("ENVIADO");

                entity.HasOne(d => d.IdsmsNavigation)
                    .WithMany(p => p.SmsEnviados)
                    .HasForeignKey(d => d.Idsms)
                    .HasConstraintName("SMS_ENVIADOS_FK");
            });

            modelBuilder.Entity<SmsTexto>(entity =>
            {
                entity.HasKey(e => e.Idsms)
                    .HasName("SMS_TEXTO_PK");

                entity.ToTable("SMS_TEXTO");

                entity.Property(e => e.Idsms)
                    .HasColumnName("IDSMS")
                    .ValueGeneratedNever();

                entity.Property(e => e.Sms)
                    .HasColumnName("SMS")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Sql>(entity =>
            {
                entity.ToTable("SQLS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Parsear)
                    .HasColumnName("PARSEAR")
                    .HasMaxLength(1);

                entity.Property(e => e.Textosql)
                    .HasColumnName("TEXTOSQL")
                    .HasColumnType("ntext");

                entity.Property(e => e.Tipobd).HasColumnName("TIPOBD");
            });

            modelBuilder.Entity<Stock>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacen })
                    .HasName("STOCKS_PK");

                entity.ToTable("STOCKS");

                entity.HasIndex(e => e.Codalmacen)
                    .HasName("STOCKS_ALMACEN");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("STOCKS_CODARTICULO");

                entity.HasIndex(e => new { e.Codalmacen, e.Codarticulo })
                    .HasName("STOCKS_ALMACEN_CODART");

                entity.HasIndex(e => new { e.Ubicacion, e.Codarticulo, e.Color, e.Talla })
                    .HasName("STOCKS_UBICACION");

                entity.HasIndex(e => new { e.Codalmacen, e.Codarticulo, e.Talla, e.Color, e.Stock1 })
                    .HasName("STOCKS_STOCK");

                entity.HasIndex(e => new { e.Codalmacen, e.Ubicacion, e.Codarticulo, e.Color, e.Talla })
                    .HasName("STOCKS_AL_UBICACION");

                entity.HasIndex(e => new { e.Stock1, e.Aservir, e.Minimo, e.Maximo, e.Ubicacion, e.Codalmacen, e.Codarticulo, e.Talla, e.Color })
                    .HasName("STOCKS_CODALMACEN_ARTICULO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Aservir).HasColumnName("ASERVIR");

                entity.Property(e => e.Deposito).HasColumnName("DEPOSITO");

                entity.Property(e => e.Enreparacion).HasColumnName("ENREPARACION");

                entity.Property(e => e.Entransito).HasColumnName("ENTRANSITO");

                entity.Property(e => e.Fabricacion).HasColumnName("FABRICACION");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecharegul)
                    .HasColumnName("FECHAREGUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.Maximo).HasColumnName("MAXIMO");

                entity.Property(e => e.Merma).HasColumnName("MERMA");

                entity.Property(e => e.Minimo).HasColumnName("MINIMO");

                entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

                entity.Property(e => e.Prestado).HasColumnName("PRESTADO");

                entity.Property(e => e.Stock1).HasColumnName("STOCK");

                entity.Property(e => e.Stock2).HasColumnName("STOCK2");

                entity.Property(e => e.Stockcontable).HasColumnName("STOCKCONTABLE");

                entity.Property(e => e.Stockregul).HasColumnName("STOCKREGUL");

                entity.Property(e => e.Stockregul2).HasColumnName("STOCKREGUL2");

                entity.Property(e => e.Ubicacion)
                    .HasColumnName("UBICACION")
                    .HasMaxLength(25);

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Stocks)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("STOCKS_ARTICULO");
            });

            modelBuilder.Entity<Stocksflag>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Talla, e.Color, e.Codalmacen })
                    .HasName("STOCKSFLAGS_PK");

                entity.ToTable("STOCKSFLAGS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_STOCKSFLAGSVERSION");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Flags)
                    .HasColumnName("FLAGS")
                    .HasMaxLength(30);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Articuloslin)
                    .WithMany(p => p.Stocksflags)
                    .HasForeignKey(d => new { d.Codarticulo, d.Talla, d.Color })
                    .HasConstraintName("STOCKSFLAGS_FK");
            });

            modelBuilder.Entity<Stocksporz>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Caja, e.Z, e.Codarticulo, e.Codalmacen })
                    .HasName("STOCKSPORZ_PK");

                entity.ToTable("STOCKSPORZ");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("STOCKSPORZ_CODARTICULO");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stock).HasColumnName("STOCK");
            });

            modelBuilder.Entity<Subfamilia>(entity =>
            {
                entity.HasKey(e => new { e.Numdpto, e.Numseccion, e.Numfamilia, e.Numsubfamilia })
                    .HasName("SUBFAMILIAS_PK");

                entity.ToTable("SUBFAMILIAS");

                entity.Property(e => e.Numdpto).HasColumnName("NUMDPTO");

                entity.Property(e => e.Numseccion).HasColumnName("NUMSECCION");

                entity.Property(e => e.Numfamilia).HasColumnName("NUMFAMILIA");

                entity.Property(e => e.Numsubfamilia).HasColumnName("NUMSUBFAMILIA");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .HasMaxLength(3);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(25);

                entity.HasOne(d => d.Num)
                    .WithMany(p => p.Subfamilia)
                    .HasForeignKey(d => new { d.Numdpto, d.Numseccion, d.Numfamilia })
                    .HasConstraintName("SUBFAMILIAS_FK");
            });

            modelBuilder.Entity<Sucursale>(entity =>
            {
                entity.HasKey(e => e.Idsucursal)
                    .HasName("SUCURSALES_PK");

                entity.ToTable("SUCURSALES");

                entity.Property(e => e.Idsucursal)
                    .HasColumnName("IDSUCURSAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(80);

                entity.Property(e => e.Pass)
                    .HasColumnName("PASS")
                    .HasMaxLength(8);

                entity.Property(e => e.Usuario)
                    .HasColumnName("USUARIO")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Sucursalespermiso>(entity =>
            {
                entity.HasKey(e => new { e.Idsucursal, e.Idpermiso })
                    .HasName("SUCURSALESPERMISOS_PK");

                entity.ToTable("SUCURSALESPERMISOS");

                entity.Property(e => e.Idsucursal).HasColumnName("IDSUCURSAL");

                entity.Property(e => e.Idpermiso).HasColumnName("IDPERMISO");

                entity.Property(e => e.Seleccionado)
                    .HasColumnName("SELECCIONADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.HasOne(d => d.IdsucursalNavigation)
                    .WithMany(p => p.Sucursalespermisos)
                    .HasForeignKey(d => d.Idsucursal)
                    .HasConstraintName("SUCURSALESPERMISOS_FK");
            });

            modelBuilder.Entity<Sucursalesvalore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUCURSALESVALORES");

                entity.Property(e => e.Idpermiso).HasColumnName("IDPERMISO");

                entity.Property(e => e.Idsucursal).HasColumnName("IDSUCURSAL");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(80);

                entity.HasOne(d => d.Id)
                    .WithMany()
                    .HasForeignKey(d => new { d.Idsucursal, d.Idpermiso })
                    .HasConstraintName("SUCURSALESVALORES_FK");
            });

            modelBuilder.Entity<Suplemento>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("SUPLEMENTOS_PK");

                entity.ToTable("SUPLEMENTOS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codcomentariodef).HasColumnName("CODCOMENTARIODEF");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(15);

                entity.Property(e => e.Incpax).HasColumnName("INCPAX");

                entity.Property(e => e.Porporcentaje)
                    .HasColumnName("PORPORCENTAJE")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Sustituto>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Sustituto1 })
                    .HasName("SUSTITUTOS_PK");

                entity.ToTable("SUSTITUTOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Sustituto1).HasColumnName("SUSTITUTO");

                entity.Property(e => e.Lastsustituto).HasColumnName("LASTSUSTITUTO");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Sustitutos)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("SUSTITUTOS_FK");
            });

            modelBuilder.Entity<Tacone>(entity =>
            {
                entity.HasKey(e => e.Codtacon)
                    .HasName("TACONES_PK");

                entity.ToTable("TACONES");

                entity.Property(e => e.Codtacon)
                    .HasColumnName("CODTACON")
                    .ValueGeneratedNever();

                entity.Property(e => e.Tacon)
                    .HasColumnName("TACON")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Talla>(entity =>
            {
                entity.HasKey(e => new { e.Codtalla, e.Posicion, e.Talla1 })
                    .HasName("TALLAS_PK");

                entity.ToTable("TALLAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TALLASVERSION");

                entity.Property(e => e.Codtalla)
                    .HasColumnName("CODTALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Talla1)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tareasauto>(entity =>
            {
                entity.HasKey(e => e.Idtarea)
                    .HasName("TAREASAUTO_PK");

                entity.ToTable("TAREASAUTO");

                entity.Property(e => e.Idtarea).HasColumnName("IDTAREA");

                entity.Property(e => e.Accion).HasColumnName("ACCION");

                entity.Property(e => e.Bloqueado).HasColumnName("BLOQUEADO");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Fechabloqueado)
                    .HasColumnName("FECHABLOQUEADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Param1)
                    .HasColumnName("PARAM1")
                    .HasMaxLength(100);

                entity.Property(e => e.Param2)
                    .HasColumnName("PARAM2")
                    .HasMaxLength(100);

                entity.Property(e => e.Tipofront).HasColumnName("TIPOFRONT");
            });

            modelBuilder.Entity<TareasautoLog>(entity =>
            {
                entity.HasKey(e => new { e.Idtarea, e.Fechaejecucion, e.Horaejecucion })
                    .HasName("TAREASAUTOLOG_PK");

                entity.ToTable("TAREASAUTO_LOG");

                entity.Property(e => e.Idtarea).HasColumnName("IDTAREA");

                entity.Property(e => e.Fechaejecucion)
                    .HasColumnName("FECHAEJECUCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaejecucion)
                    .HasColumnName("HORAEJECUCION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.HasOne(d => d.IdtareaNavigation)
                    .WithMany(p => p.TareasautoLogs)
                    .HasForeignKey(d => d.Idtarea)
                    .HasConstraintName("TAREASAUTOLOG_FK");
            });

            modelBuilder.Entity<Tarifascliente>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Idtarifav })
                    .HasName("TARIFASCLIENTE_PK");

                entity.ToTable("TARIFASCLIENTE");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASCLIENTEVERSION");

                entity.HasIndex(e => new { e.Codcliente, e.Posicion, e.Idtarifav })
                    .HasName("TARIFASCLIENTE_POSICION");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Codexterno)
                    .HasColumnName("CODEXTERNO")
                    .HasMaxLength(15);

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Posicion)
                    .HasColumnName("POSICION")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Tarifasclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("TARIFASCLIENTE_FK1");

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Tarifasclientes)
                    .HasForeignKey(d => d.Idtarifav)
                    .HasConstraintName("TARIFASCLIENTE_FK2");
            });

            modelBuilder.Entity<Tarifasclientedmn>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Idtarifav })
                    .HasName("TARIFASCLIENTEDMN_PK");

                entity.ToTable("TARIFASCLIENTEDMN");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASCLIENTEDMNVERSION");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Codexterno)
                    .HasColumnName("CODEXTERNO")
                    .HasMaxLength(15);

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Posicion)
                    .HasColumnName("POSICION")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Tarifasclientedmns)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("TARIFASCLIENTEDMN_FK1");

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Tarifasclientedmns)
                    .HasForeignKey(d => d.Idtarifav)
                    .HasConstraintName("TARIFASCLIENTEDMN_FK2");
            });

            modelBuilder.Entity<Tarifascompra>(entity =>
            {
                entity.HasKey(e => new { e.Codproveedor, e.Idtarifac })
                    .HasName("TARIFASCOMPRA_PK");

                entity.ToTable("TARIFASCOMPRA");

                entity.Property(e => e.Codproveedor).HasColumnName("CODPROVEEDOR");

                entity.Property(e => e.Idtarifac).HasColumnName("IDTARIFAC");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Coniva)
                    .HasColumnName("CONIVA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.CodproveedorNavigation)
                    .WithMany(p => p.Tarifascompras)
                    .HasForeignKey(d => d.Codproveedor)
                    .HasConstraintName("TARIFAS_PROVEEDOR");
            });

            modelBuilder.Entity<Tarifashotel>(entity =>
            {
                entity.HasKey(e => e.Codtarifa)
                    .HasName("TARIFASHOTEL_PK");

                entity.ToTable("TARIFASHOTEL");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASHOTELVERSION");

                entity.Property(e => e.Codtarifa)
                    .HasColumnName("CODTARIFA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codarticulopaquete)
                    .HasColumnName("CODARTICULOPAQUETE")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codgrupo).HasColumnName("CODGRUPO");

                entity.Property(e => e.Combruto).HasColumnName("COMBRUTO");

                entity.Property(e => e.Condiciones)
                    .HasColumnName("CONDICIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Espaquete)
                    .HasColumnName("ESPAQUETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Estanciamaxima)
                    .HasColumnName("ESTANCIAMAXIMA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Estanciaminima).HasColumnName("ESTANCIAMINIMA");

                entity.Property(e => e.Habmasregimen).HasColumnName("HABMASREGIMEN");

                entity.Property(e => e.Imprimirdescripcion).HasColumnName("IMPRIMIRDESCRIPCION");

                entity.Property(e => e.Impuestosinc)
                    .HasColumnName("IMPUESTOSINC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Precioporpersona).HasColumnName("PRECIOPORPERSONA");

                entity.Property(e => e.Produccionpaquete)
                    .HasColumnName("PRODUCCIONPAQUETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Release).HasColumnName("RELEASE");

                entity.Property(e => e.Tarifaregimen).HasColumnName("TARIFAREGIMEN");

                entity.Property(e => e.Tipodui).HasColumnName("TIPODUI");

                entity.Property(e => e.Tiposce).HasColumnName("TIPOSCE");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tarifashotelarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Codarticulo, e.Tipo })
                    .HasName("TARIFASHOTELARTICULOS_PK");

                entity.ToTable("TARIFASHOTELARTICULOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASHOTELARTICULOSVERSION");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipovaloracion).HasColumnName("TIPOVALORACION");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Tarifashotelarticulos)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("TARIFASHOTELARTICULOS_FK");
            });

            modelBuilder.Entity<Tarifashotelcalendario>(entity =>
            {
                entity.HasKey(e => new { e.Dia, e.Codcliente, e.Codtarifa })
                    .HasName("TARIFASHOTELCALENDARIO_PK");

                entity.ToTable("TARIFASHOTELCALENDARIO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASHOTELCALENDARIOVERSION");

                entity.HasIndex(e => new { e.Codtarifa, e.Codcliente })
                    .HasName("TARIFASHOTELCALENDARIO_CLIENTETARIFA");

                entity.Property(e => e.Dia)
                    .HasColumnName("DIA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Tarifashotelcalendarios)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("TARIFASHOTELCALENDARIO_FKTARIFA");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Tarifashotelcalendarios)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("TARIFASHOTELCALENDARIO_FKTEMPORADA");
            });

            modelBuilder.Entity<Tarifashotelcalendariodefecto>(entity =>
            {
                entity.HasKey(e => new { e.Dia, e.Idtemporada })
                    .HasName("TARIFASHOTELCALENDARIODEFECTO_PK");

                entity.ToTable("TARIFASHOTELCALENDARIODEFECTO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASHOTELCALENDARIODEFECTOVERSION");

                entity.Property(e => e.Dia)
                    .HasColumnName("DIA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Tarifashotelcalendariodefectos)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("TARIFASHOTELCALENDARIODEFECTO_FKTEMPORADA");
            });

            modelBuilder.Entity<Tarifashotelcliente>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Codcliente })
                    .HasName("TARIFASHOTELCLIENTE_PK");

                entity.ToTable("TARIFASHOTELCLIENTE");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Combruto).HasColumnName("COMBRUTO");

                entity.Property(e => e.Estanciamaxima).HasColumnName("ESTANCIAMAXIMA");

                entity.Property(e => e.Estanciaminima).HasColumnName("ESTANCIAMINIMA");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Release).HasColumnName("RELEASE");

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Tarifashotelclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("TARIFASHOTELCLIENTE_FKCLIENTE");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Tarifashotelclientes)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("TARIFASHOTELCLIENTE_FKTARIFASHOTEL");
            });

            modelBuilder.Entity<Tarifashotelextra>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Iddia, e.Numlin })
                    .HasName("TARIFASHOTELEXTRAS_PK");

                entity.ToTable("TARIFASHOTELEXTRAS");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Iddia).HasColumnName("IDDIA");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Aplicarpor).HasColumnName("APLICARPOR");

                entity.Property(e => e.Cocina).HasColumnName("COCINA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codimpuesto).HasColumnName("CODIMPUESTO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Diaestadoauto).HasColumnName("DIAESTADOAUTO");

                entity.Property(e => e.Estadoautomatico)
                    .HasColumnName("ESTADOAUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Incluido).HasColumnName("INCLUIDO");

                entity.Property(e => e.Intervaloestadoauto).HasColumnName("INTERVALOESTADOAUTO");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Notascocina).HasColumnName("NOTASCOCINA");

                entity.Property(e => e.Opcional).HasColumnName("OPCIONAL");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipohabitacion).HasColumnName("TIPOHABITACION");

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Tarifashotelextras)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("TARIFASHOTELEXTRAS_FK");
            });

            modelBuilder.Entity<Tarifashotelgrupo>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TARIFASHOTELGRUPOS");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tarifashotelrango>(entity =>
            {
                entity.HasKey(e => e.Idrango)
                    .HasName("TARIFASHOTELRANGOS_PK");

                entity.ToTable("TARIFASHOTELRANGOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASHOTELRANGOSVERSION");

                entity.Property(e => e.Idrango)
                    .HasColumnName("IDRANGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tarifashotelservicio>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Iddia, e.Numlin })
                    .HasName("TARIFASHOTELSERVICIOS_PK");

                entity.ToTable("TARIFASHOTELSERVICIOS");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Iddia).HasColumnName("IDDIA");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Aplicarpor).HasColumnName("APLICARPOR");

                entity.Property(e => e.Cocina).HasColumnName("COCINA");

                entity.Property(e => e.Codactividad)
                    .HasColumnName("CODACTIVIDAD")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codimpuesto).HasColumnName("CODIMPUESTO");

                entity.Property(e => e.Codservicio).HasColumnName("CODSERVICIO");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Diaestadoauto).HasColumnName("DIAESTADOAUTO");

                entity.Property(e => e.Estadoautomatico)
                    .HasColumnName("ESTADOAUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Incluido).HasColumnName("INCLUIDO");

                entity.Property(e => e.Intervaloestadoauto).HasColumnName("INTERVALOESTADOAUTO");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Notascocina).HasColumnName("NOTASCOCINA");

                entity.Property(e => e.Opcional).HasColumnName("OPCIONAL");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipohabitacion).HasColumnName("TIPOHABITACION");

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Tarifashotelservicios)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("TARIFASHOTELSERVICIOS_FK");
            });

            modelBuilder.Entity<Tarifashoteltemporada>(entity =>
            {
                entity.HasKey(e => new { e.Codtarifa, e.Idtemporada, e.Codcliente, e.Idrango })
                    .HasName("TARIFASHOTELTEMPORADAS_PK");

                entity.ToTable("TARIFASHOTELTEMPORADAS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TARIFASHOTELTEMPORADASVERSION");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Idrango).HasColumnName("IDRANGO");

                entity.Property(e => e.Comision)
                    .HasColumnName("COMISION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cupos)
                    .HasColumnName("CUPOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dto)
                    .HasColumnName("DTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prodalmuerzo).HasColumnName("PRODALMUERZO");

                entity.Property(e => e.Prodcena).HasColumnName("PRODCENA");

                entity.Property(e => e.Proddesayuno).HasColumnName("PRODDESAYUNO");

                entity.Property(e => e.Release)
                    .HasColumnName("RELEASE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodtarifaNavigation)
                    .WithMany(p => p.Tarifashoteltemporada)
                    .HasForeignKey(d => d.Codtarifa)
                    .HasConstraintName("TARIFASHOTELTEMPORADAS_FKTARIFA");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Tarifashoteltemporada)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("TARIFASHOTELTEMPORADAS_FKTEMPORADA");
            });

            modelBuilder.Entity<Tarifasventagruposalmacen>(entity =>
            {
                entity.HasKey(e => new { e.Idtarifav, e.Idgrupo })
                    .HasName("TARIFASVENTAGRUPOSALMACEN_PK");

                entity.ToTable("TARIFASVENTAGRUPOSALMACEN");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Tarifasventagruposalmacens)
                    .HasForeignKey(d => d.Idtarifav)
                    .HasConstraintName("TARIFASVENTAGRUPOSALMACEN_FK");
            });

            modelBuilder.Entity<Tarifasventaregla>(entity =>
            {
                entity.HasKey(e => new { e.Idtarifav, e.Posicion })
                    .HasName("TARIFASVENTAREGLAS_PK");

                entity.ToTable("TARIFASVENTAREGLAS");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Actuasobre).HasColumnName("ACTUASOBRE");

                entity.Property(e => e.Alcambiarprecioneto).HasColumnName("ALCAMBIARPRECIONETO");

                entity.Property(e => e.Aproximacion).HasColumnName("APROXIMACION");

                entity.Property(e => e.Comomodificarprecio).HasColumnName("COMOMODIFICARPRECIO");

                entity.Property(e => e.Comomodificarpreciovalor).HasColumnName("COMOMODIFICARPRECIOVALOR");

                entity.Property(e => e.Comomodificarpreciovalor2).HasColumnName("COMOMODIFICARPRECIOVALOR2");

                entity.Property(e => e.Copiarfromporcdefecto)
                    .HasColumnName("COPIARFROMPORCDEFECTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Copiarfromporcdefecto2)
                    .HasColumnName("COPIARFROMPORCDEFECTO2")
                    .HasMaxLength(1);

                entity.Property(e => e.Fechaofertadesde)
                    .HasColumnName("FECHAOFERTADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaofertahasta)
                    .HasColumnName("FECHAOFERTAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idgrupo).HasColumnName("IDGRUPO");

                entity.Property(e => e.Mascararedondeo)
                    .HasColumnName("MASCARAREDONDEO")
                    .HasMaxLength(60);

                entity.Property(e => e.Origen).HasColumnName("ORIGEN");

                entity.Property(e => e.Origencostealmacen)
                    .HasColumnName("ORIGENCOSTEALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Origentarifa).HasColumnName("ORIGENTARIFA");

                entity.Property(e => e.Origentipocoste).HasColumnName("ORIGENTIPOCOSTE");

                entity.Property(e => e.Redondeo).HasColumnName("REDONDEO");

                entity.Property(e => e.Versionregla).HasColumnName("VERSIONREGLA");

                entity.HasOne(d => d.IdtarifavNavigation)
                    .WithMany(p => p.Tarifasventareglas)
                    .HasForeignKey(d => d.Idtarifav)
                    .HasConstraintName("TARIFASVENTAREGLAS_FK");
            });

            modelBuilder.Entity<Tarifasventausuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Id })
                    .HasName("TARIFASVENTAUSUARIO_PK");

                entity.ToTable("TARIFASVENTAUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Tarifasventum>(entity =>
            {
                entity.HasKey(e => e.Idtarifav)
                    .HasName("TARIFASVENTA_PK");

                entity.ToTable("TARIFASVENTA");

                entity.Property(e => e.Idtarifav)
                    .HasColumnName("IDTARIFAV")
                    .ValueGeneratedNever();

                entity.Property(e => e.Actualizarremfronts)
                    .HasColumnName("ACTUALIZARREMFRONTS")
                    .HasMaxLength(1);

                entity.Property(e => e.Almacencostes)
                    .HasColumnName("ALMACENCOSTES")
                    .HasMaxLength(3);

                entity.Property(e => e.Automatica)
                    .HasColumnName("AUTOMATICA")
                    .HasMaxLength(1);

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Coniva)
                    .HasColumnName("CONIVA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripalternativa)
                    .HasColumnName("DESCRIPALTERNATIVA")
                    .HasMaxLength(35);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtarifabase).HasColumnName("IDTARIFABASE");

                entity.Property(e => e.Tarifaalternativa).HasColumnName("TARIFAALTERNATIVA");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Tarjeta>(entity =>
            {
                entity.HasKey(e => e.Idtarjeta)
                    .HasName("TARJETAS_PK");

                entity.ToTable("TARJETAS");

                entity.Property(e => e.Idtarjeta)
                    .HasColumnName("IDTARJETA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alias)
                    .HasColumnName("ALIAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Entregada)
                    .HasColumnName("ENTREGADA")
                    .HasMaxLength(1);

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(200);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Saldotarjeta).HasColumnName("SALDOTARJETA");

                entity.Property(e => e.Valida)
                    .HasColumnName("VALIDA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.IdtipotarjetaNavigation)
                    .WithMany(p => p.Tarjeta)
                    .HasForeignKey(d => d.Idtipotarjeta)
                    .HasConstraintName("TARJETAS_FK");
            });

            modelBuilder.Entity<Tarjetascliente>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.Idtarjeta })
                    .HasName("TARJETASCLIENTE_PK");

                entity.ToTable("TARJETASCLIENTE");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Consacumuladas).HasColumnName("CONSACUMULADAS");

                entity.Property(e => e.Consrealizadas).HasColumnName("CONSREALIZADAS");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Fecharecalc)
                    .HasColumnName("FECHARECALC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.Property(e => e.Importeacumulado).HasColumnName("IMPORTEACUMULADO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Puntosacumulados).HasColumnName("PUNTOSACUMULADOS");

                entity.Property(e => e.Ticketsacumulados).HasColumnName("TICKETSACUMULADOS");

                entity.Property(e => e.Valida)
                    .HasColumnName("VALIDA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.HasOne(d => d.CodclienteNavigation)
                    .WithMany(p => p.Tarjetasclientes)
                    .HasForeignKey(d => d.Codcliente)
                    .HasConstraintName("TARJETASCLIENTE_FK");
            });

            modelBuilder.Entity<Tarjetasconsumicion>(entity =>
            {
                entity.HasKey(e => new { e.Idinicial, e.Idfinal })
                    .HasName("TARJETASCONSUMICION_PK");

                entity.ToTable("TARJETASCONSUMICION");

                entity.Property(e => e.Idinicial).HasColumnName("IDINICIAL");

                entity.Property(e => e.Idfinal).HasColumnName("IDFINAL");

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Coddiseny).HasColumnName("CODDISENY");

                entity.Property(e => e.Controluso).HasColumnName("CONTROLUSO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Imprimir).HasColumnName("IMPRIMIR");

                entity.Property(e => e.Numcopias).HasColumnName("NUMCOPIAS");

                entity.Property(e => e.Saldoactual).HasColumnName("SALDOACTUAL");

                entity.Property(e => e.Saldoinicial).HasColumnName("SALDOINICIAL");

                entity.Property(e => e.Tarifa).HasColumnName("TARIFA");

                entity.Property(e => e.Tipocaducidad).HasColumnName("TIPOCADUCIDAD");

                entity.Property(e => e.Tipotarjeta).HasColumnName("TIPOTARJETA");

                entity.Property(e => e.Valida)
                    .HasColumnName("VALIDA")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Tarjetascontcondicione>(entity =>
            {
                entity.HasKey(e => new { e.Idtarjeta, e.Idfront })
                    .HasName("TARJETASCONTCONDICIONES_PK");

                entity.ToTable("TARJETASCONTCONDICIONES");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Consrealizadas).HasColumnName("CONSREALIZADAS");

                entity.Property(e => e.Fecharecalc)
                    .HasColumnName("FECHARECALC")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdtarjetaNavigation)
                    .WithMany(p => p.Tarjetascontcondiciones)
                    .HasForeignKey(d => d.Idtarjeta)
                    .HasConstraintName("TARJETASCONTCONDICIONES_FK");
            });

            modelBuilder.Entity<Tarjetascontmenu>(entity =>
            {
                entity.HasKey(e => new { e.Idtarjeta, e.Codarticulo })
                    .HasName("TARJETASCONTMENUS_PK");

                entity.ToTable("TARJETASCONTMENUS");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

                entity.HasOne(d => d.IdtarjetaNavigation)
                    .WithMany(p => p.Tarjetascontmenus)
                    .HasForeignKey(d => d.Idtarjeta)
                    .HasConstraintName("TARJETASCONTMENUS_FK");
            });

            modelBuilder.Entity<Tarjetascontpromocione>(entity =>
            {
                entity.HasKey(e => new { e.Idtarjeta, e.Idfront })
                    .HasName("TARJETASCONTPROMOCIONES_PK");

                entity.ToTable("TARJETASCONTPROMOCIONES");

                entity.Property(e => e.Idtarjeta).HasColumnName("IDTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Consacumuladas).HasColumnName("CONSACUMULADAS");

                entity.Property(e => e.Importeacumulado).HasColumnName("IMPORTEACUMULADO");

                entity.Property(e => e.Puntosacumulados).HasColumnName("PUNTOSACUMULADOS");

                entity.Property(e => e.Ticketsacumulados).HasColumnName("TICKETSACUMULADOS");

                entity.HasOne(d => d.IdtarjetaNavigation)
                    .WithMany(p => p.Tarjetascontpromociones)
                    .HasForeignKey(d => d.Idtarjeta)
                    .HasConstraintName("TARJETASCONTPROMOCIONES_FK");
            });

            modelBuilder.Entity<Tarjetaspromocion>(entity =>
            {
                entity.HasKey(e => new { e.Idpromocion, e.Idtipotarjeta })
                    .HasName("TARJETASPROMOCIONPK");

                entity.ToTable("TARJETASPROMOCION");

                entity.Property(e => e.Idpromocion).HasColumnName("IDPROMOCION");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.HasOne(d => d.IdpromocionNavigation)
                    .WithMany(p => p.Tarjetaspromocions)
                    .HasForeignKey(d => d.Idpromocion)
                    .HasConstraintName("PROMOCIONES_FK");
            });

            modelBuilder.Entity<Tef>(entity =>
            {
                entity.HasKey(e => e.Idtef)
                    .HasName("TEFS_PK");

                entity.ToTable("TEFS");

                entity.Property(e => e.Idtef)
                    .HasColumnName("IDTEF")
                    .ValueGeneratedNever();

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");
            });

            modelBuilder.Entity<TefsConfig>(entity =>
            {
                entity.HasKey(e => new { e.Idtef, e.Idconfig })
                    .HasName("TEFSCONFIG_PK");

                entity.ToTable("TEFS_CONFIG");

                entity.Property(e => e.Idtef).HasColumnName("IDTEF");

                entity.Property(e => e.Idconfig).HasColumnName("IDCONFIG");

                entity.Property(e => e.Config)
                    .HasColumnName("CONFIG")
                    .HasMaxLength(1000);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdtefNavigation)
                    .WithMany(p => p.TefsConfigs)
                    .HasForeignKey(d => d.Idtef)
                    .HasConstraintName("TEFSCONFIG_FK");
            });

            modelBuilder.Entity<TefsParam>(entity =>
            {
                entity.HasKey(e => new { e.Idtef, e.Idparam })
                    .HasName("TEFSPARAMS_PK");

                entity.ToTable("TEFS_PARAMS");

                entity.Property(e => e.Idtef).HasColumnName("IDTEF");

                entity.Property(e => e.Idparam).HasColumnName("IDPARAM");

                entity.Property(e => e.Aplicacion).HasColumnName("APLICACION");

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.HasOne(d => d.IdtefNavigation)
                    .WithMany(p => p.TefsParams)
                    .HasForeignKey(d => d.Idtef)
                    .HasConstraintName("TEFSPARAMS_FK");
            });

            modelBuilder.Entity<Teftransaccione>(entity =>
            {
                entity.HasKey(e => new { e.Origen, e.Tipodocumento, e.Serie, e.Numero, e.N, e.Posicion })
                    .HasName("TEFTRANSACCIONES_PK")
                    .IsClustered(false);

                entity.ToTable("TEFTRANSACCIONES");

                entity.Property(e => e.Origen)
                    .HasColumnName("ORIGEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodocumento)
                    .HasColumnName("TIPODOCUMENTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Comprobante)
                    .HasColumnName("COMPROBANTE")
                    .HasColumnType("ntext");

                entity.Property(e => e.Extdata)
                    .HasColumnName("EXTDATA")
                    .HasColumnType("ntext");

                entity.Property(e => e.Firmadigital)
                    .HasColumnName("FIRMADIGITAL")
                    .HasColumnType("ntext");

                entity.HasOne(d => d.Tesorerium)
                    .WithOne(p => p.Teftransaccione)
                    .HasForeignKey<Teftransaccione>(d => new { d.Origen, d.Tipodocumento, d.Serie, d.Numero, d.N, d.Posicion })
                    .HasConstraintName("TEFTRANSACCIONES_FK");
            });

            modelBuilder.Entity<Televentum>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Clave, e.Subclave })
                    .HasName("TELEVENTA_PK");

                entity.ToTable("TELEVENTA");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Clave)
                    .HasColumnName("CLAVE")
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Subclave)
                    .HasColumnName("SUBCLAVE")
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<TempInventario12996941598>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_INVENTARIO_12996_941598");

                entity.HasIndex(e => new { e.Codarticulo, e.Talla, e.Color })
                    .HasName("TEMP_INVENTARIO_12996_941598_PK")
                    .IsClustered();

                entity.Property(e => e.Codalmacen0)
                    .IsRequired()
                    .HasColumnName("CODALMACEN0")
                    .HasMaxLength(2);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codbarras)
                    .HasColumnName("CODBARRAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Compras0).HasColumnName("COMPRAS0");

                entity.Property(e => e.Compras20).HasColumnName("COMPRAS_2_0");

                entity.Property(e => e.Consumidos0).HasColumnName("CONSUMIDOS0");

                entity.Property(e => e.Consumidos20).HasColumnName("CONSUMIDOS_2_0");

                entity.Property(e => e.Consumosinternos0).HasColumnName("CONSUMOSINTERNOS0");

                entity.Property(e => e.Consumosinternos20).HasColumnName("CONSUMOSINTERNOS_2_0");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Entradas0).HasColumnName("ENTRADAS0");

                entity.Property(e => e.Entradas20).HasColumnName("ENTRADAS_2_0");

                entity.Property(e => e.Fabricados0).HasColumnName("FABRICADOS0");

                entity.Property(e => e.Fabricados20).HasColumnName("FABRICADOS_2_0");

                entity.Property(e => e.Fecharegul0)
                    .HasColumnName("FECHAREGUL0")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(35);

                entity.Property(e => e.Reparaciones0).HasColumnName("REPARACIONES0");

                entity.Property(e => e.Salidas0).HasColumnName("SALIDAS0");

                entity.Property(e => e.Salidas20).HasColumnName("SALIDAS_2_0");

                entity.Property(e => e.Stock0).HasColumnName("STOCK0");

                entity.Property(e => e.Stock20).HasColumnName("STOCK_2_0");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Transitos0).HasColumnName("TRANSITOS0");

                entity.Property(e => e.Transitos20).HasColumnName("TRANSITOS_2_0");

                entity.Property(e => e.Udsregul0).HasColumnName("UDSREGUL0");

                entity.Property(e => e.Udsregul20).HasColumnName("UDSREGUL_2_0");

                entity.Property(e => e.Valoracion0).HasColumnName("VALORACION0");

                entity.Property(e => e.Ventas0).HasColumnName("VENTAS0");

                entity.Property(e => e.Ventas20).HasColumnName("VENTAS_2_0");
            });

            modelBuilder.Entity<Temporada>(entity =>
            {
                entity.HasKey(e => e.Codtemporada)
                    .HasName("TEMPORADAS_PK");

                entity.ToTable("TEMPORADAS");

                entity.Property(e => e.Codtemporada)
                    .HasColumnName("CODTEMPORADA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Temporada1)
                    .HasColumnName("TEMPORADA")
                    .HasMaxLength(12);
            });

            modelBuilder.Entity<Temporadasdium>(entity =>
            {
                entity.HasKey(e => e.Fecha)
                    .HasName("TEMPORADASDIA_PK");

                entity.ToTable("TEMPORADASDIA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Temporadasdia)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("TEMPORADASDIA_FK");
            });

            modelBuilder.Entity<Temporadashotel>(entity =>
            {
                entity.HasKey(e => e.Idtemporada)
                    .HasName("PK__TEMPORAD__D904F7DD26A5A303");

                entity.ToTable("TEMPORADASHOTEL");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TEMPORADASHOTELVERSION");

                entity.Property(e => e.Idtemporada)
                    .HasColumnName("IDTEMPORADA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Temporadaslin>(entity =>
            {
                entity.HasKey(e => new { e.Idtemporada, e.Idlinea })
                    .HasName("PK__TEMPORAD__55E331552A7633E7");

                entity.ToTable("TEMPORADASLIN");

                entity.Property(e => e.Idtemporada).HasColumnName("IDTEMPORADA");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Dias)
                    .HasColumnName("DIAS")
                    .HasMaxLength(7);

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechainicio)
                    .HasColumnName("FECHAINICIO")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdtemporadaNavigation)
                    .WithMany(p => p.Temporadaslins)
                    .HasForeignKey(d => d.Idtemporada)
                    .HasConstraintName("FK__TEMPORADA__IDTEM__2C5E7C59");
            });

            modelBuilder.Entity<Temporalestyc>(entity =>
            {
                entity.HasKey(e => new { e.Codgrupo, e.Codtabla, e.Identificador })
                    .HasName("TEMPORALESTYC_PK");

                entity.ToTable("TEMPORALESTYC");

                entity.Property(e => e.Codgrupo).HasColumnName("CODGRUPO");

                entity.Property(e => e.Codtabla).HasColumnName("CODTABLA");

                entity.Property(e => e.Identificador).HasColumnName("IDENTIFICADOR");

                entity.Property(e => e.Codtitulo).HasColumnName("CODTITULO");

                entity.Property(e => e.Numtallasparam).HasColumnName("NUMTALLASPARAM");

                entity.Property(e => e.Parametro)
                    .HasColumnName("PARAMETRO")
                    .HasMaxLength(60);

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Tipoinforme).HasColumnName("TIPOINFORME");

                entity.Property(e => e.Tipoparamtot).HasColumnName("TIPOPARAMTOT");

                entity.Property(e => e.Tipotallascomp).HasColumnName("TIPOTALLASCOMP");

                entity.Property(e => e.Valor)
                    .HasColumnName("VALOR")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Temporalestycs)
                    .HasForeignKey(d => new { d.Codgrupo, d.Codtabla })
                    .HasConstraintName("TEMPORALESTYC_FK");
            });

            modelBuilder.Entity<Terminale>(entity =>
            {
                entity.HasKey(e => e.Idterminal)
                    .HasName("TERMINALES_PK");

                entity.ToTable("TERMINALES");

                entity.Property(e => e.Idterminal)
                    .HasColumnName("IDTERMINAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Actualizado)
                    .HasColumnName("ACTUALIZADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Conectado).HasColumnName("CONECTADO");

                entity.Property(e => e.Exeactualizado)
                    .HasColumnName("EXEACTUALIZADO")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(40);

                entity.Property(e => e.Progsqueejecuta)
                    .HasColumnName("PROGSQUEEJECUTA")
                    .HasMaxLength(20);

                entity.Property(e => e.Versionbas)
                    .HasColumnName("VERSIONBAS")
                    .HasMaxLength(10);

                entity.Property(e => e.Versioncrm)
                    .HasColumnName("VERSIONCRM")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionexe)
                    .HasColumnName("VERSIONEXE")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionhba)
                    .HasColumnName("VERSIONHBA")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionmng)
                    .HasColumnName("VERSIONMNG")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionorg)
                    .HasColumnName("VERSIONORG")
                    .HasMaxLength(10);

                entity.Property(e => e.Versionpym)
                    .HasColumnName("VERSIONPYM")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Terminaleslin>(entity =>
            {
                entity.HasKey(e => new { e.Idterminal, e.Tipodoc })
                    .HasName("TERMINALESLIN_PK");

                entity.ToTable("TERMINALESLIN");

                entity.Property(e => e.Idterminal).HasColumnName("IDTERMINAL");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Disenyimp)
                    .HasColumnName("DISENYIMP")
                    .HasMaxLength(60);

                entity.Property(e => e.Disenyimpn)
                    .HasColumnName("DISENYIMPN")
                    .HasMaxLength(60);

                entity.Property(e => e.Disenymail)
                    .HasColumnName("DISENYMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Dismailn)
                    .HasColumnName("DISMAILN")
                    .HasMaxLength(60);

                entity.Property(e => e.Impresora)
                    .HasColumnName("IMPRESORA")
                    .HasMaxLength(60);

                entity.HasOne(d => d.IdterminalNavigation)
                    .WithMany(p => p.Terminaleslins)
                    .HasForeignKey(d => d.Idterminal)
                    .HasConstraintName("TERMCAB_TERMLIN");
            });

            modelBuilder.Entity<Tesorerium>(entity =>
            {
                entity.HasKey(e => new { e.Origen, e.Tipodocumento, e.Serie, e.Numero, e.N, e.Posicion })
                    .HasName("TESORERIA_PK")
                    .IsClustered(false);

                entity.ToTable("TESORERIA");

                entity.HasIndex(e => e.Codigointerno)
                    .HasName("TESORERIA_CLIENTEPROV");

                entity.HasIndex(e => e.Compensacion)
                    .HasName("TESORERIA_COMPENSACION");

                entity.HasIndex(e => e.Cuenta)
                    .HasName("TESORERIA_CUENTA");

                entity.HasIndex(e => e.EnlaceEmpresa)
                    .HasName("TESORERIA_ENLACEEMPRESA");

                entity.HasIndex(e => e.Estado)
                    .HasName("TESORERIA_ESTADO")
                    .IsClustered();

                entity.HasIndex(e => e.Fechadocumento)
                    .HasName("TESORERIA_FECHADOC");

                entity.HasIndex(e => e.Fechamodificado)
                    .HasName("TESORERIA_FECHAMODIF");

                entity.HasIndex(e => e.Numefecto)
                    .HasName("TESORERIA_NUMEFECTO");

                entity.HasIndex(e => e.Numeroremesa)
                    .HasName("TESORERIA_REMESA");

                entity.HasIndex(e => e.Tipodocumento)
                    .HasName("TESORERIA_TIPODOC");

                entity.HasIndex(e => e.Version)
                    .HasName("TESORERIA_VERSION");

                entity.HasIndex(e => new { e.Serierecibo, e.Numrecibo })
                    .HasName("TESORERIA_SERIENUMERORECIBO");

                entity.HasIndex(e => new { e.Zsaldado, e.Cajasaldado })
                    .HasName("TESORERIA_PORZCAJA");

                entity.HasIndex(e => new { e.Estado, e.Numefecto, e.EnlaceEmpresa })
                    .HasName("TESORERIA_ESTADO_EFECTO_ENLACE");

                entity.HasIndex(e => new { e.Origen, e.Tipodocumento, e.Comentario })
                    .HasName("TESORERIA_ORIGENTIPODOCCOMENTARIO");

                entity.HasIndex(e => new { e.Traspasado, e.EnlaceEjercicio, e.EnlaceEmpresa, e.EnlaceUsuario, e.EnlaceAsiento })
                    .HasName("TESORERIA_ENLACECONTABLE");

                entity.HasIndex(e => new { e.Origen, e.Tipodocumento, e.Estado, e.N, e.Numefecto, e.EnlaceEjercicio })
                    .HasName("TESORERIA_ORIGENTIPODOCESTADO");

                entity.HasIndex(e => new { e.Origen, e.Tipodocumento, e.N, e.Codigointerno, e.Sudocumento, e.Estado })
                    .HasName("TESORERIA_ORIGENTIPODOCSUDOCUMENTO");

                entity.HasIndex(e => new { e.Importe, e.Factormoneda, e.Origen, e.Tipodocumento, e.Serie, e.Numero, e.N, e.Estado, e.Codtipopago, e.Genapunte, e.Cajasaldado, e.Zsaldado })
                    .HasName("TESORERIA_ORIGEN_TIPODOC_SERIE_NUMERO_N_ESTADO_TIPOPAGO_GENAPU_CAJAS_Z");

                entity.Property(e => e.Origen)
                    .HasColumnName("ORIGEN")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodocumento)
                    .HasColumnName("TIPODOCUMENTO")
                    .HasMaxLength(1);

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Base).HasColumnName("BASE");

                entity.Property(e => e.Bintarjeta)
                    .HasColumnName("BINTARJETA")
                    .HasMaxLength(6);

                entity.Property(e => e.Bloqueado)
                    .HasColumnName("BLOQUEADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cajacartera)
                    .HasColumnName("CAJACARTERA")
                    .HasMaxLength(3);

                entity.Property(e => e.Cajasaldado)
                    .HasColumnName("CAJASALDADO")
                    .HasMaxLength(3);

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Codigointerno).HasColumnName("CODIGOINTERNO");

                entity.Property(e => e.Codimpuesto).HasColumnName("CODIMPUESTO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Codtipopago)
                    .HasColumnName("CODTIPOPAGO")
                    .HasMaxLength(2);

                entity.Property(e => e.Comentario)
                    .HasColumnName("COMENTARIO")
                    .HasMaxLength(30);

                entity.Property(e => e.Comentariovisible)
                    .HasColumnName("COMENTARIOVISIBLE")
                    .HasMaxLength(30);

                entity.Property(e => e.Compensacion).HasColumnName("COMPENSACION");

                entity.Property(e => e.Contrapartida)
                    .HasColumnName("CONTRAPARTIDA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuenta)
                    .HasColumnName("CUENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentagastos)
                    .HasColumnName("CUENTAGASTOS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentaiva)
                    .HasColumnName("CUENTAIVA")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentapuente)
                    .HasColumnName("CUENTAPUENTE")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentareq)
                    .HasColumnName("CUENTAREQ")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuotaiva).HasColumnName("CUOTAIVA");

                entity.Property(e => e.Cuotareq).HasColumnName("CUOTAREQ");

                entity.Property(e => e.Descuadre).HasColumnName("DESCUADRE");

                entity.Property(e => e.Ecpartida).HasColumnName("ECPARTIDA");

                entity.Property(e => e.EnlaceApunte).HasColumnName("ENLACE_APUNTE");

                entity.Property(e => e.EnlaceAsiento).HasColumnName("ENLACE_ASIENTO");

                entity.Property(e => e.EnlaceEjercicio).HasColumnName("ENLACE_EJERCICIO");

                entity.Property(e => e.EnlaceEmpresa).HasColumnName("ENLACE_EMPRESA");

                entity.Property(e => e.EnlaceUsuario)
                    .HasColumnName("ENLACE_USUARIO")
                    .HasMaxLength(10);

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Factormoneda).HasColumnName("FACTORMONEDA");

                entity.Property(e => e.Factormonedareal).HasColumnName("FACTORMONEDAREAL");

                entity.Property(e => e.Fechacartera)
                    .HasColumnName("FECHACARTERA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechadescontado)
                    .HasColumnName("FECHADESCONTADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechadevuelto)
                    .HasColumnName("FECHADEVUELTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechadirecta)
                    .HasColumnName("FECHADIRECTA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fechadocumento)
                    .HasColumnName("FECHADOCUMENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechamodificado)
                    .HasColumnName("FECHAMODIFICADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechasaldado)
                    .HasColumnName("FECHASALDADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatraspaso)
                    .HasColumnName("FECHATRASPASO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechavencimiento)
                    .HasColumnName("FECHAVENCIMIENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Genapunte)
                    .HasColumnName("GENAPUNTE")
                    .HasMaxLength(15);

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importegastos).HasColumnName("IMPORTEGASTOS");

                entity.Property(e => e.Impreso)
                    .HasColumnName("IMPRESO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Marcaborrado)
                    .HasColumnName("MARCABORRADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mora)
                    .HasColumnName("MORA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Multiple)
                    .HasColumnName("MULTIPLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numefecto)
                    .HasColumnName("NUMEFECTO")
                    .HasMaxLength(30);

                entity.Property(e => e.Numeroremesa).HasColumnName("NUMEROREMESA");

                entity.Property(e => e.Numrecibo).HasColumnName("NUMRECIBO");

                entity.Property(e => e.Numrtstef)
                    .HasColumnName("NUMRTSTEF")
                    .HasMaxLength(40);

                entity.Property(e => e.Numtxntef)
                    .HasColumnName("NUMTXNTEF")
                    .HasMaxLength(15);

                entity.Property(e => e.Porciva).HasColumnName("PORCIVA");

                entity.Property(e => e.Porcreq).HasColumnName("PORCREQ");

                entity.Property(e => e.Reposicion)
                    .HasColumnName("REPOSICION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Retencion).HasColumnName("RETENCION");

                entity.Property(e => e.Serierecibo)
                    .HasColumnName("SERIERECIBO")
                    .HasMaxLength(4);

                entity.Property(e => e.Sudocumento)
                    .HasColumnName("SUDOCUMENTO")
                    .HasMaxLength(15);

                entity.Property(e => e.Traspasado)
                    .HasColumnName("TRASPASADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Zcartera).HasColumnName("ZCARTERA");

                entity.Property(e => e.Zsaldado)
                    .HasColumnName("ZSALDADO")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Ticketscab>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N })
                    .HasName("TICKETSCAB_PK");

                entity.ToTable("TICKETSCAB");

                entity.HasIndex(e => new { e.Fo, e.Caja, e.Z, e.N })
                    .HasName("TICKETSCAB_IDXZ");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Automatico)
                    .HasColumnName("AUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Baseimp1).HasColumnName("BASEIMP1");

                entity.Property(e => e.Baseimp2).HasColumnName("BASEIMP2");

                entity.Property(e => e.Baseimp3).HasColumnName("BASEIMP3");

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.Cargo).HasColumnName("CARGO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Diasemana).HasColumnName("DIASEMANA");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hora)
                    .HasColumnName("HORA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Impresiones).HasColumnName("IMPRESIONES");

                entity.Property(e => e.Iva1).HasColumnName("IVA1");

                entity.Property(e => e.Iva2).HasColumnName("IVA2");

                entity.Property(e => e.Iva3).HasColumnName("IVA3");

                entity.Property(e => e.Ivainc)
                    .HasColumnName("IVAINC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.Porciva1).HasColumnName("PORCIVA1");

                entity.Property(e => e.Porciva2).HasColumnName("PORCIVA2");

                entity.Property(e => e.Porciva3).HasColumnName("PORCIVA3");

                entity.Property(e => e.Porcreq1).HasColumnName("PORCREQ1");

                entity.Property(e => e.Porcreq2).HasColumnName("PORCREQ2");

                entity.Property(e => e.Porcreq3).HasColumnName("PORCREQ3");

                entity.Property(e => e.Req1).HasColumnName("REQ1");

                entity.Property(e => e.Req2).HasColumnName("REQ2");

                entity.Property(e => e.Req3).HasColumnName("REQ3");

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");
            });

            modelBuilder.Entity<Ticketslin>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("TICKETSLIN_PK");

                entity.ToTable("TICKETSLIN");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codoferta).HasColumnName("CODOFERTA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(45);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipoiva).HasColumnName("TIPOIVA");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");
            });

            modelBuilder.Entity<Ticketspag>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("TICKETSPAG_PK");

                entity.ToTable("TICKETSPAG");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Beneficio).HasColumnName("BENEFICIO");

                entity.Property(e => e.Cambio).HasColumnName("CAMBIO");

                entity.Property(e => e.Cambio2).HasColumnName("CAMBIO2");

                entity.Property(e => e.Codformapago).HasColumnName("CODFORMAPAGO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechavencim)
                    .HasColumnName("FECHAVENCIM")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importe2).HasColumnName("IMPORTE2");

                entity.Property(e => e.Pendiente).HasColumnName("PENDIENTE");

                entity.Property(e => e.Propina).HasColumnName("PROPINA");
            });

            modelBuilder.Entity<Tipoarreglo>(entity =>
            {
                entity.ToTable("TIPOARREGLOS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cobrarporanticipado)
                    .HasColumnName("COBRARPORANTICIPADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Impuesto).HasColumnName("IMPUESTO");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");
            });

            modelBuilder.Entity<Tipoasunto>(entity =>
            {
                entity.HasKey(e => e.Idtipoasunto);

                entity.ToTable("TIPOASUNTO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TIPOASUNTOVERSION");

                entity.Property(e => e.Idtipoasunto)
                    .HasColumnName("IDTIPOASUNTO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Actividadporcliente).HasColumnName("ACTIVIDADPORCLIENTE");

                entity.Property(e => e.Busqtipoasunto)
                    .HasColumnName("BUSQTIPOASUNTO")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Camposobligatorios)
                    .HasColumnName("CAMPOSOBLIGATORIOS")
                    .HasMaxLength(20);

                entity.Property(e => e.Camposvisibles)
                    .HasColumnName("CAMPOSVISIBLES")
                    .HasMaxLength(20);

                entity.Property(e => e.Codart)
                    .HasColumnName("CODART")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codcondicion)
                    .HasColumnName("CODCONDICION")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codenviosubcontrata)
                    .HasColumnName("CODENVIOSUBCONTRATA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codlugar)
                    .HasColumnName("CODLUGAR")
                    .HasMaxLength(10);

                entity.Property(e => e.Codtiposat)
                    .HasColumnName("CODTIPOSAT")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codurgencia)
                    .HasColumnName("CODURGENCIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Concatservicios)
                    .HasColumnName("CONCATSERVICIOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copiarobsserv)
                    .HasColumnName("COPIAROBSSERV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Emailsubcontrata)
                    .HasColumnName("EMAILSUBCONTRATA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Estadoini)
                    .HasColumnName("ESTADOINI")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fechaprimerservicio)
                    .HasColumnName("FECHAPRIMERSERVICIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Genresultados)
                    .HasColumnName("GENRESULTADOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idpestanyadefecto).HasColumnName("IDPESTANYADEFECTO");

                entity.Property(e => e.Nocheckclientediahora)
                    .HasColumnName("NOCHECKCLIENTEDIAHORA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nocheckrecalcularprecioscliente)
                    .HasColumnName("NOCHECKRECALCULARPRECIOSCLIENTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrecb1)
                    .HasColumnName("NOMBRECB1")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombrecb2)
                    .HasColumnName("NOMBRECB2")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombrefecha1)
                    .HasColumnName("NOMBREFECHA1")
                    .HasMaxLength(25);

                entity.Property(e => e.Nombrefecha2)
                    .HasColumnName("NOMBREFECHA2")
                    .HasMaxLength(25);

                entity.Property(e => e.Nombrefecha3)
                    .HasColumnName("NOMBREFECHA3")
                    .HasMaxLength(25);

                entity.Property(e => e.Pestanyasvisibles)
                    .HasColumnName("PESTANYASVISIBLES")
                    .HasMaxLength(10);

                entity.Property(e => e.Seleccionablereserva)
                    .HasColumnName("SELECCIONABLERESERVA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieabono)
                    .HasColumnName("SERIEABONO")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefac)
                    .HasColumnName("SERIEFAC")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriefacigual)
                    .HasColumnName("SERIEFACIGUAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Showeditor)
                    .HasColumnName("SHOWEDITOR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Showlista)
                    .HasColumnName("SHOWLISTA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subcontratadopor)
                    .HasColumnName("SUBCONTRATADOPOR")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Usarfechahora).HasColumnName("USARFECHAHORA");

                entity.Property(e => e.Verinfo1serv)
                    .HasColumnName("VERINFO1SERV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Verprimerodoc)
                    .HasColumnName("VERPRIMERODOC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tipoasuntoparadefecto>(entity =>
            {
                entity.HasKey(e => new { e.Idtipoasunto, e.Codvendedor })
                    .HasName("TIPOASUNTOPARA_PK");

                entity.ToTable("TIPOASUNTOPARADEFECTO");

                entity.Property(e => e.Idtipoasunto).HasColumnName("IDTIPOASUNTO");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithMany(p => p.Tipoasuntoparadefectos)
                    .HasForeignKey(d => d.Codvendedor)
                    .HasConstraintName("TIPOASUNTO_VENDERFK");

                entity.HasOne(d => d.IdtipoasuntoNavigation)
                    .WithMany(p => p.Tipoasuntoparadefectos)
                    .HasForeignKey(d => d.Idtipoasunto)
                    .HasConstraintName("TIPOASUNTO_TIPOFK");
            });

            modelBuilder.Entity<Tipoaviso>(entity =>
            {
                entity.HasKey(e => e.Codtipoaviso)
                    .HasName("TIPOAVISOS_PK");

                entity.ToTable("TIPOAVISOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TIPOAVISOSVERSION");

                entity.Property(e => e.Codtipoaviso)
                    .HasColumnName("CODTIPOAVISO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codcondicion)
                    .HasColumnName("CODCONDICION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Idparent)
                    .HasColumnName("IDPARENT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Numpresup)
                    .HasColumnName("NUMPRESUP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Seriepresup)
                    .HasColumnName("SERIEPRESUP")
                    .HasMaxLength(4);

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.Tiempo).HasColumnName("TIEMPO");

                entity.Property(e => e.Tiempofac).HasColumnName("TIEMPOFAC");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tipoempleado>(entity =>
            {
                entity.HasKey(e => e.Codtipoempleado)
                    .HasName("TIPOEMPLEADOS_PK");

                entity.ToTable("TIPOEMPLEADOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TIPOEMPLEADOSVERSION");

                entity.Property(e => e.Codtipoempleado)
                    .HasColumnName("CODTIPOEMPLEADO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Acccambiosala).HasColumnName("ACCCAMBIOSALA");

                entity.Property(e => e.Anular)
                    .HasColumnName("ANULAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cajonporvendedor).HasColumnName("CAJONPORVENDEDOR");

                entity.Property(e => e.Costehora).HasColumnName("COSTEHORA");

                entity.Property(e => e.Costehoraextra).HasColumnName("COSTEHORAEXTRA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Dtomax).HasColumnName("DTOMAX");

                entity.Property(e => e.Idioma)
                    .HasColumnName("IDIOMA")
                    .HasMaxLength(5);

                entity.Property(e => e.Menumesas).HasColumnName("MENUMESAS");

                entity.Property(e => e.Menureservas).HasColumnName("MENURESERVAS");

                entity.Property(e => e.Menutiquets).HasColumnName("MENUTIQUETS");

                entity.Property(e => e.Menuusuario).HasColumnName("MENUUSUARIO");

                entity.Property(e => e.Modificar)
                    .HasColumnName("MODIFICAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Modulox)
                    .HasColumnName("MODULOX")
                    .HasMaxLength(25);

                entity.Property(e => e.Modulox2)
                    .HasColumnName("MODULOX2")
                    .HasMaxLength(30);

                entity.Property(e => e.Moduloz)
                    .HasColumnName("MODULOZ")
                    .HasMaxLength(25);

                entity.Property(e => e.Moduloz2)
                    .HasColumnName("MODULOZ2")
                    .HasMaxLength(30);

                entity.Property(e => e.Nivel).HasColumnName("NIVEL");

                entity.Property(e => e.Opciones)
                    .HasColumnName("OPCIONES")
                    .HasMaxLength(60);

                entity.Property(e => e.Opcionescajafuerte)
                    .HasColumnName("OPCIONESCAJAFUERTE")
                    .HasMaxLength(25);

                entity.Property(e => e.Opcionescompra)
                    .HasColumnName("OPCIONESCOMPRA")
                    .HasMaxLength(150);

                entity.Property(e => e.Opcionesgraficas)
                    .HasColumnName("OPCIONESGRAFICAS")
                    .HasMaxLength(50);

                entity.Property(e => e.Opcioneshcierre)
                    .HasColumnName("OPCIONESHCIERRE")
                    .HasMaxLength(50);

                entity.Property(e => e.Opcioneshotel)
                    .HasColumnName("OPCIONESHOTEL")
                    .HasMaxLength(150);

                entity.Property(e => e.Opcionesownpack)
                    .HasColumnName("OPCIONESOWNPACK")
                    .HasMaxLength(100);

                entity.Property(e => e.Opcionestraspasos)
                    .HasColumnName("OPCIONESTRASPASOS")
                    .HasMaxLength(30);

                entity.Property(e => e.Opcionesventa)
                    .HasColumnName("OPCIONESVENTA")
                    .HasMaxLength(100);

                entity.Property(e => e.Redondear)
                    .HasColumnName("REDONDEAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Regularizar)
                    .HasColumnName("REGULARIZAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Retempresaprop).HasColumnName("RETEMPRESAPROP");

                entity.Property(e => e.Salir)
                    .HasColumnName("SALIR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Verregul)
                    .HasColumnName("VERREGUL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visiblealseleccionar)
                    .HasColumnName("VISIBLEALSELECCIONAR")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Visibleendelivery)
                    .HasColumnName("VISIBLEENDELIVERY")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Tiporegalostarjetum>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Idlinea })
                    .HasName("TIPOREGALOSTARJETA_PK");

                entity.ToTable("TIPOREGALOSTARJETA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Consumiciones).HasColumnName("CONSUMICIONES");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Puntos).HasColumnName("PUNTOS");

                entity.Property(e => e.Textoaviso)
                    .HasColumnName("TEXTOAVISO")
                    .HasMaxLength(50);

                entity.Property(e => e.Tickets).HasColumnName("TICKETS");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.Tiporegalostarjeta)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("TIPOREGALOSTARJETA_FK");
            });

            modelBuilder.Entity<Tiposarticulo>(entity =>
            {
                entity.HasKey(e => e.Codtipo)
                    .HasName("TIPOSARTICULO_PK");

                entity.ToTable("TIPOSARTICULO");

                entity.Property(e => e.Codtipo)
                    .HasColumnName("CODTIPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Tiposcliente>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("TIPOSCLIENTE_PK");

                entity.ToTable("TIPOSCLIENTE");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tiposdium>(entity =>
            {
                entity.HasKey(e => e.Codtipodia);

                entity.ToTable("TIPOSDIA");

                entity.Property(e => e.Codtipodia)
                    .HasColumnName("CODTIPODIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Tiposdoc>(entity =>
            {
                entity.HasKey(e => e.Tipodoc)
                    .HasName("TIPOSDOC_PK");

                entity.ToTable("TIPOSDOC");

                entity.Property(e => e.Tipodoc)
                    .HasColumnName("TIPODOC")
                    .ValueGeneratedNever();

                entity.Property(e => e.Asociarcliente)
                    .HasColumnName("ASOCIARCLIENTE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Calcsinimpuestos)
                    .HasColumnName("CALCSINIMPUESTOS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cerrado)
                    .HasColumnName("CERRADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Clasedocumento)
                    .HasColumnName("CLASEDOCUMENTO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Contabilidad)
                    .HasColumnName("CONTABILIDAD")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Dependiente)
                    .HasColumnName("DEPENDIENTE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descmenu)
                    .HasColumnName("DESCMENU")
                    .HasMaxLength(20);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Devolucion)
                    .HasColumnName("DEVOLUCION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Estiquet)
                    .HasColumnName("ESTIQUET")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Iddissenycamposlibres).HasColumnName("IDDISSENYCAMPOSLIBRES");

                entity.Property(e => e.Modificable)
                    .HasColumnName("MODIFICABLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Negativono0)
                    .HasColumnName("NEGATIVONO0")
                    .HasMaxLength(1);

                entity.Property(e => e.Notacargo)
                    .HasColumnName("NOTACARGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlineas).HasColumnName("NUMLINEAS");

                entity.Property(e => e.Plantilla)
                    .HasColumnName("PLANTILLA")
                    .HasMaxLength(20);

                entity.Property(e => e.Plantillaiva)
                    .HasColumnName("PLANTILLAIVA")
                    .HasMaxLength(20);

                entity.Property(e => e.Plantillarecepcion)
                    .HasColumnName("PLANTILLARECEPCION")
                    .HasMaxLength(20);

                entity.Property(e => e.Positivono0)
                    .HasColumnName("POSITIVONO0")
                    .HasMaxLength(1);

                entity.Property(e => e.Signopositivo)
                    .HasColumnName("SIGNOPOSITIVO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Stock)
                    .HasColumnName("STOCK")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Sufijo)
                    .HasColumnName("SUFIJO")
                    .HasMaxLength(1);

                entity.Property(e => e.Tipodocumento).HasColumnName("TIPODOCUMENTO");

                entity.Property(e => e.Tiporeginv)
                    .HasColumnName("TIPOREGINV")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<Tiposdocesquematraspaso>(entity =>
            {
                entity.HasKey(e => new { e.Tipodoc, e.Tipoesquema, e.Configuracion, e.Esquema })
                    .HasName("TIPOSDOCESQUEMATRASPASO_PK");

                entity.ToTable("TIPOSDOCESQUEMATRASPASO");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipoesquema).HasColumnName("TIPOESQUEMA");

                entity.Property(e => e.Configuracion)
                    .HasColumnName("CONFIGURACION")
                    .HasMaxLength(20);

                entity.Property(e => e.Esquema)
                    .HasColumnName("ESQUEMA")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Tiposdocumentosidentif>(entity =>
            {
                entity.HasKey(e => e.Idtipo)
                    .HasName("TIPOSDOCUMENTOSIDENTIF_PK");

                entity.ToTable("TIPOSDOCUMENTOSIDENTIF");

                entity.Property(e => e.Idtipo)
                    .HasColumnName("IDTIPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Abreviatura)
                    .HasColumnName("ABREVIATURA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Tiposdocusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Documento, e.Numlinea })
                    .HasName("TIPOSDOCUSUARIO_PK");

                entity.ToTable("TIPOSDOCUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Documento)
                    .HasColumnName("DOCUMENTO")
                    .HasMaxLength(10);

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.HasOne(d => d.TipodocNavigation)
                    .WithMany(p => p.Tiposdocusuarios)
                    .HasForeignKey(d => d.Tipodoc)
                    .HasConstraintName("TIPOSDOCUSUARIO_FK");
            });

            modelBuilder.Entity<Tiposerviciosdelivery>(entity =>
            {
                entity.HasKey(e => e.Tipo)
                    .HasName("TIPOSERVICIOSDELIVERY_PK");

                entity.ToTable("TIPOSERVICIOSDELIVERY");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);
            });

            modelBuilder.Entity<Tipospago>(entity =>
            {
                entity.HasKey(e => e.Codtipopago)
                    .HasName("TIPOSPAGO_PK");

                entity.ToTable("TIPOSPAGO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TIPOSPAGOVERSION");

                entity.Property(e => e.Codtipopago)
                    .HasColumnName("CODTIPOPAGO")
                    .HasMaxLength(2);

                entity.Property(e => e.Cashdro)
                    .HasColumnName("CASHDRO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cuentacobro)
                    .HasColumnName("CUENTACOBRO")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentapago)
                    .HasColumnName("CUENTAPAGO")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Dllasoc)
                    .HasColumnName("DLLASOC")
                    .HasMaxLength(40);

                entity.Property(e => e.HioposAdmitecambio)
                    .HasColumnName("HIOPOS_ADMITECAMBIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HioposCodformapago)
                    .HasColumnName("HIOPOS_CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.HioposEntrarnumerodocumento)
                    .HasColumnName("HIOPOS_ENTRARNUMERODOCUMENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HioposEntrarnumerotarjeta)
                    .HasColumnName("HIOPOS_ENTRARNUMEROTARJETA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HioposEsacredito)
                    .HasColumnName("HIOPOS_ESACREDITO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Imagen)
                    .HasColumnName("IMAGEN")
                    .HasColumnType("image");

                entity.Property(e => e.Marcastarjeta)
                    .HasColumnName("MARCASTARJETA")
                    .HasMaxLength(30);

                entity.Property(e => e.Metalico)
                    .HasColumnName("METALICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numdiasefectivo).HasColumnName("NUMDIASEFECTIVO");

                entity.Property(e => e.Raizcobros)
                    .HasColumnName("RAIZCOBROS")
                    .HasMaxLength(4);

                entity.Property(e => e.Raizpagos)
                    .HasColumnName("RAIZPAGOS")
                    .HasMaxLength(4);

                entity.Property(e => e.Tarjeta)
                    .HasColumnName("TARJETA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visiblecobrospagos)
                    .HasColumnName("VISIBLECOBROSPAGOS")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<TipospagoIdioma>(entity =>
            {
                entity.HasKey(e => new { e.Codtipopago, e.Codidioma })
                    .HasName("TIPOSPAGO_IDIOMAS_PK");

                entity.ToTable("TIPOSPAGO_IDIOMAS");

                entity.Property(e => e.Codtipopago)
                    .HasColumnName("CODTIPOPAGO")
                    .HasMaxLength(2);

                entity.Property(e => e.Codidioma).HasColumnName("CODIDIOMA");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.HasOne(d => d.CodtipopagoNavigation)
                    .WithMany(p => p.TipospagoIdiomas)
                    .HasForeignKey(d => d.Codtipopago)
                    .HasConstraintName("TIPOSPAGO_IDIOMAS_FK");
            });

            modelBuilder.Entity<Tiposreserva>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("TIPOSRESERVA_PK");

                entity.ToTable("TIPOSRESERVA");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cargos)
                    .HasColumnName("CARGOS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Descatalogado).HasColumnName("DESCATALOGADO");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tiposretencion>(entity =>
            {
                entity.HasKey(e => e.Tipo)
                    .HasName("TIPOSRETENCION_PK");

                entity.ToTable("TIPOSRETENCION");

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Claveecu)
                    .HasColumnName("CLAVEECU")
                    .HasMaxLength(20);

                entity.Property(e => e.Cuenta)
                    .HasColumnName("CUENTA")
                    .HasMaxLength(12);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclave).HasColumnName("IDCLAVE");

                entity.Property(e => e.Porcbase).HasColumnName("PORCBASE");

                entity.Property(e => e.Sustraendo).HasColumnName("SUSTRAENDO");

                entity.Property(e => e.Tipofacturacion).HasColumnName("TIPOFACTURACION");

                entity.Property(e => e.Tiporetencion).HasColumnName("TIPORETENCION");

                entity.HasOne(d => d.IdclaveNavigation)
                    .WithMany(p => p.Tiposretencions)
                    .HasForeignKey(d => d.Idclave)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TIPOSRETENCIONCLAVE");
            });

            modelBuilder.Entity<Tiposretencionclave>(entity =>
            {
                entity.ToTable("TIPOSRETENCIONCLAVE");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasColumnName("CLAVE")
                    .HasMaxLength(5);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<Tiposretencionlin>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Numlin })
                    .HasName("TIPOSRETENCIONLIN_PK");

                entity.ToTable("TIPOSRETENCIONLIN");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.Numlin).HasColumnName("NUMLIN");

                entity.Property(e => e.Aplicadosobre).HasColumnName("APLICADOSOBRE");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaini)
                    .HasColumnName("FECHAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Montosinretencion).HasColumnName("MONTOSINRETENCION");

                entity.Property(e => e.Pagominimo).HasColumnName("PAGOMINIMO");

                entity.Property(e => e.Porcretencion).HasColumnName("PORCRETENCION");

                entity.Property(e => e.RegimretArtic).HasColumnName("REGIMRET_ARTIC");

                entity.Property(e => e.RegimretCliprov)
                    .HasColumnName("REGIMRET_CLIPROV")
                    .HasMaxLength(1);

                entity.HasOne(d => d.TipoNavigation)
                    .WithMany(p => p.Tiposretencionlins)
                    .HasForeignKey(d => d.Tipo)
                    .HasConstraintName("TIPOSRETENCIONLIN_FK");
            });

            modelBuilder.Entity<Tipostarjetacondicione>(entity =>
            {
                entity.HasKey(e => new { e.Idtipotarjeta, e.Idfront, e.Dia })
                    .HasName("TIPOSTARJETACONDICIONES_PK");

                entity.ToTable("TIPOSTARJETACONDICIONES");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Dia).HasColumnName("DIA");

                entity.Property(e => e.Dtoconsum).HasColumnName("DTOCONSUM");

                entity.Property(e => e.Dtoresto).HasColumnName("DTORESTO");

                entity.Property(e => e.Idtarifaconsum).HasColumnName("IDTARIFACONSUM");

                entity.Property(e => e.Idtarifaresto).HasColumnName("IDTARIFARESTO");

                entity.Property(e => e.Numconsum).HasColumnName("NUMCONSUM");

                entity.HasOne(d => d.IdtipotarjetaNavigation)
                    .WithMany(p => p.Tipostarjetacondiciones)
                    .HasForeignKey(d => d.Idtipotarjeta)
                    .HasConstraintName("TIPOSTARJETACONDICIONES_FK");
            });

            modelBuilder.Entity<Tipostarjetacondicionesrtl>(entity =>
            {
                entity.HasKey(e => new { e.Idtipotarjeta, e.Idfront, e.Dia })
                    .HasName("TIPOSTARJETACONDICIONESRTL_PK");

                entity.ToTable("TIPOSTARJETACONDICIONESRTL");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Dia).HasColumnName("DIA");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Idtarifav).HasColumnName("IDTARIFAV");

                entity.HasOne(d => d.IdtipotarjetaNavigation)
                    .WithMany(p => p.Tipostarjetacondicionesrtls)
                    .HasForeignKey(d => d.Idtipotarjeta)
                    .HasConstraintName("TIPOSTARJETACONDICIONESRTL_FK");
            });

            modelBuilder.Entity<Tipostarjetamenu>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Idtipotarjeta })
                    .HasName("TIPOSTARJETAMENUSPK");

                entity.ToTable("TIPOSTARJETAMENUS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Tipostarjetamenus)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("TIPOSTARJETAMENUS_ARTICULOS");

                entity.HasOne(d => d.IdtipotarjetaNavigation)
                    .WithMany(p => p.Tipostarjetamenus)
                    .HasForeignKey(d => d.Idtipotarjeta)
                    .HasConstraintName("TIPOSTARJETAMENUS_TIPOTARJETA");
            });

            modelBuilder.Entity<Tipostarjetaofertum>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Idtipotarjeta })
                    .HasName("TIPOSTARJETAOFERTAPK");

                entity.ToTable("TIPOSTARJETAOFERTA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Tipostarjetaoferta)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("TIPOSTARJETAOFERTA_ARTICULOS");

                entity.HasOne(d => d.IdtipotarjetaNavigation)
                    .WithMany(p => p.Tipostarjetaoferta)
                    .HasForeignKey(d => d.Idtipotarjeta)
                    .HasConstraintName("TIPOSTARJETAOFERTA_TIPOTARJETA");
            });

            modelBuilder.Entity<Tipostarjetapromocione>(entity =>
            {
                entity.HasKey(e => new { e.Idtipotarjeta, e.Idfront })
                    .HasName("TIPOSTARJETAPROMOCIONES_PK");

                entity.ToTable("TIPOSTARJETAPROMOCIONES");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Admiteporcensaldo)
                    .HasColumnName("ADMITEPORCENSALDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CodartAlta).HasColumnName("CODART_ALTA");

                entity.Property(e => e.CodartRenovacion).HasColumnName("CODART_RENOVACION");

                entity.Property(e => e.ColorAlta)
                    .HasColumnName("COLOR_ALTA")
                    .HasMaxLength(10);

                entity.Property(e => e.ColorRenovacion)
                    .HasColumnName("COLOR_RENOVACION")
                    .HasMaxLength(10);

                entity.Property(e => e.Conivapsaldo)
                    .HasColumnName("CONIVAPSALDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Diasalta).HasColumnName("DIASALTA");

                entity.Property(e => e.Diasrenovacion).HasColumnName("DIASRENOVACION");

                entity.Property(e => e.Diasvalidez).HasColumnName("DIASVALIDEZ");

                entity.Property(e => e.Idtarifapuntos).HasColumnName("IDTARIFAPUNTOS");

                entity.Property(e => e.TallaAlta)
                    .HasColumnName("TALLA_ALTA")
                    .HasMaxLength(10);

                entity.Property(e => e.TallaRenovacion)
                    .HasColumnName("TALLA_RENOVACION")
                    .HasMaxLength(10);

                entity.Property(e => e.Tipopromocion).HasColumnName("TIPOPROMOCION");

                entity.Property(e => e.Valorext1).HasColumnName("VALOREXT1");

                entity.Property(e => e.Valorext2).HasColumnName("VALOREXT2");

                entity.Property(e => e.Valorporcsaldo).HasColumnName("VALORPORCSALDO");

                entity.HasOne(d => d.IdtipotarjetaNavigation)
                    .WithMany(p => p.Tipostarjetapromociones)
                    .HasForeignKey(d => d.Idtipotarjeta)
                    .HasConstraintName("TIPOSTARJETAPROMOCIONES_FK");
            });

            modelBuilder.Entity<Tipostarjetapromocioneslin>(entity =>
            {
                entity.HasKey(e => new { e.Idtipotarjeta, e.Idfront, e.Idlinea })
                    .HasName("TIPOSTARJETAPROMOCIONESLIN_PK");

                entity.ToTable("TIPOSTARJETAPROMOCIONESLIN");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Consumiciones).HasColumnName("CONSUMICIONES");

                entity.Property(e => e.Darsoloregalos)
                    .HasColumnName("DARSOLOREGALOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Puntos).HasColumnName("PUNTOS");

                entity.Property(e => e.Textoaviso)
                    .HasColumnName("TEXTOAVISO")
                    .HasMaxLength(50);

                entity.Property(e => e.Tickets).HasColumnName("TICKETS");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Tipostarjetapromocioneslins)
                    .HasForeignKey(d => new { d.Idtipotarjeta, d.Idfront })
                    .HasConstraintName("TIPOSTARJETAPROMOCIONESLIN_FK");
            });

            modelBuilder.Entity<Tipostarjetapromocioneslinrtl>(entity =>
            {
                entity.HasKey(e => new { e.Idtipotarjeta, e.Idfront, e.Idlinea })
                    .HasName("TIPOSTARJETAPROMOCIONESLINRTL_PK");

                entity.ToTable("TIPOSTARJETAPROMOCIONESLINRTL");

                entity.Property(e => e.Idtipotarjeta).HasColumnName("IDTIPOTARJETA");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Idlinea).HasColumnName("IDLINEA");

                entity.Property(e => e.Caducidad)
                    .HasColumnName("CADUCIDAD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Consumiciones).HasColumnName("CONSUMICIONES");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Puntos).HasColumnName("PUNTOS");

                entity.Property(e => e.Textoaviso)
                    .HasColumnName("TEXTOAVISO")
                    .HasMaxLength(50);

                entity.Property(e => e.Tickets).HasColumnName("TICKETS");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Tipostarjetapromocioneslinrtls)
                    .HasForeignKey(d => new { d.Idtipotarjeta, d.Idfront })
                    .HasConstraintName("TIPOSTARJETAPROMOCIONESLINRTL_FK");
            });

            modelBuilder.Entity<Tipostarjetum>(entity =>
            {
                entity.HasKey(e => e.Idtipotarjeta)
                    .HasName("TIPOSTARJETA_PK");

                entity.ToTable("TIPOSTARJETA");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TIPOSTARJETAVERSION");

                entity.Property(e => e.Idtipotarjeta)
                    .HasColumnName("IDTIPOTARJETA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Acumularmenus).HasColumnName("ACUMULARMENUS");

                entity.Property(e => e.Admitesaldo)
                    .HasColumnName("ADMITESALDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Admitesobrecargo)
                    .HasColumnName("ADMITESOBRECARGO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Articuloentrada).HasColumnName("ARTICULOENTRADA");

                entity.Property(e => e.Articulosaldo).HasColumnName("ARTICULOSALDO");

                entity.Property(e => e.Avisoidentificar).HasColumnName("AVISOIDENTIFICAR");

                entity.Property(e => e.Condicionesporfront)
                    .HasColumnName("CONDICIONESPORFRONT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Entradadesde)
                    .HasColumnName("ENTRADADESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Entradahasta)
                    .HasColumnName("ENTRADAHASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Esentrada).HasColumnName("ESENTRADA");

                entity.Property(e => e.Horaentrada)
                    .HasColumnName("HORAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horasalida)
                    .HasColumnName("HORASALIDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Identhuella).HasColumnName("IDENTHUELLA");

                entity.Property(e => e.Identsalida).HasColumnName("IDENTSALIDA");

                entity.Property(e => e.Idtarjetamax).HasColumnName("IDTARJETAMAX");

                entity.Property(e => e.Idtarjetamin).HasColumnName("IDTARJETAMIN");

                entity.Property(e => e.Noacumpuntosconsumiciones)
                    .HasColumnName("NOACUMPUNTOSCONSUMICIONES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numacumularmenus).HasColumnName("NUMACUMULARMENUS");

                entity.Property(e => e.Numentradasdia).HasColumnName("NUMENTRADASDIA");

                entity.Property(e => e.Permitirrecargas)
                    .HasColumnName("PERMITIRRECARGAS")
                    .HasMaxLength(1);

                entity.Property(e => e.Promocionesporfront)
                    .HasColumnName("PROMOCIONESPORFRONT")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Reiniciarxsesion)
                    .HasColumnName("REINICIARXSESION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Textoavisoidentificar)
                    .HasColumnName("TEXTOAVISOIDENTIFICAR")
                    .HasMaxLength(200);

                entity.Property(e => e.Textoregalomenu)
                    .HasColumnName("TEXTOREGALOMENU")
                    .HasMaxLength(200);

                entity.Property(e => e.Tipovalidez).HasColumnName("TIPOVALIDEZ");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tiposterminal>(entity =>
            {
                entity.HasKey(e => e.Idtipoterminal)
                    .HasName("TIPOSTERMINAL_PK");

                entity.ToTable("TIPOSTERMINAL");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TIPOSTERMINALVERSION");

                entity.Property(e => e.Idtipoterminal)
                    .HasColumnName("IDTIPOTERMINAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tipotarjetacredito>(entity =>
            {
                entity.HasKey(e => e.Tipotarjeta);

                entity.ToTable("TIPOTARJETACREDITO");

                entity.Property(e => e.Tipotarjeta)
                    .HasColumnName("TIPOTARJETA")
                    .ValueGeneratedNever();

                entity.Property(e => e.Desctipotarjeta)
                    .IsRequired()
                    .HasColumnName("DESCTIPOTARJETA")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Tipotarjetacreditohotel>(entity =>
            {
                entity.HasKey(e => new { e.Tipotarjeta, e.Idhotel });

                entity.ToTable("TIPOTARJETACREDITOHOTEL");

                entity.Property(e => e.Tipotarjeta).HasColumnName("TIPOTARJETA");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");
            });

            modelBuilder.Entity<Tipotarjetascliente>(entity =>
            {
                entity.ToTable("TIPOTARJETASCLIENTE");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Dtoconsumiciones).HasColumnName("DTOCONSUMICIONES");

                entity.Property(e => e.Noacumpuntosconsumiciones)
                    .HasColumnName("NOACUMPUNTOSCONSUMICIONES")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numconsumiciones).HasColumnName("NUMCONSUMICIONES");

                entity.Property(e => e.Numconsumicionesd).HasColumnName("NUMCONSUMICIONESD");

                entity.Property(e => e.Numconsumicionesj).HasColumnName("NUMCONSUMICIONESJ");

                entity.Property(e => e.Numconsumicionesl).HasColumnName("NUMCONSUMICIONESL");

                entity.Property(e => e.Numconsumicionesm).HasColumnName("NUMCONSUMICIONESM");

                entity.Property(e => e.Numconsumicioness).HasColumnName("NUMCONSUMICIONESS");

                entity.Property(e => e.Numconsumicionesv).HasColumnName("NUMCONSUMICIONESV");

                entity.Property(e => e.Numconsumicionesx).HasColumnName("NUMCONSUMICIONESX");

                entity.Property(e => e.Reiniciarxsesion)
                    .HasColumnName("REINICIARXSESION")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Tarifaconsumiciones).HasColumnName("TARIFACONSUMICIONES");

                entity.Property(e => e.Tarifapuntos).HasColumnName("TARIFAPUNTOS");
            });

            modelBuilder.Entity<Tiquetscab>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N })
                    .HasName("TIQUETSCAB_PK");

                entity.ToTable("TIQUETSCAB");

                entity.HasIndex(e => new { e.Fo, e.Caja, e.Z, e.N })
                    .HasName("TIQUETSCAB_IDXZ");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Automatico)
                    .HasColumnName("AUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Baseimp1).HasColumnName("BASEIMP1");

                entity.Property(e => e.Baseimp2).HasColumnName("BASEIMP2");

                entity.Property(e => e.Baseimp3).HasColumnName("BASEIMP3");

                entity.Property(e => e.Baseimp4).HasColumnName("BASEIMP4");

                entity.Property(e => e.Baseimp5).HasColumnName("BASEIMP5");

                entity.Property(e => e.Baseimp6).HasColumnName("BASEIMP6");

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.Cargo).HasColumnName("CARGO");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codtarifa).HasColumnName("CODTARIFA");

                entity.Property(e => e.Codtipotasa1).HasColumnName("CODTIPOTASA1");

                entity.Property(e => e.Codtipotasa2).HasColumnName("CODTIPOTASA2");

                entity.Property(e => e.Codtipotasa3).HasColumnName("CODTIPOTASA3");

                entity.Property(e => e.Codtipotasa4).HasColumnName("CODTIPOTASA4");

                entity.Property(e => e.Codtipotasa5).HasColumnName("CODTIPOTASA5");

                entity.Property(e => e.Codtipotasa6).HasColumnName("CODTIPOTASA6");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Cuotatasa1).HasColumnName("CUOTATASA1");

                entity.Property(e => e.Cuotatasa2).HasColumnName("CUOTATASA2");

                entity.Property(e => e.Cuotatasa3).HasColumnName("CUOTATASA3");

                entity.Property(e => e.Cuotatasa4).HasColumnName("CUOTATASA4");

                entity.Property(e => e.Cuotatasa5).HasColumnName("CUOTATASA5");

                entity.Property(e => e.Cuotatasa6).HasColumnName("CUOTATASA6");

                entity.Property(e => e.Diasemana).HasColumnName("DIASEMANA");

                entity.Property(e => e.Esbarra)
                    .HasColumnName("ESBARRA")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horafin)
                    .HasColumnName("HORAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horaini)
                    .HasColumnName("HORAINI")
                    .HasColumnType("datetime");

                entity.Property(e => e.Impresiones).HasColumnName("IMPRESIONES");

                entity.Property(e => e.Ivainc)
                    .HasColumnName("IVAINC")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mesa).HasColumnName("MESA");

                entity.Property(e => e.Numcomensales).HasColumnName("NUMCOMENSALES");

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.Sala).HasColumnName("SALA");

                entity.Property(e => e.Subtotal)
                    .HasColumnName("SUBTOTAL")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Totalbruto).HasColumnName("TOTALBRUTO");

                entity.Property(e => e.Totalcoste).HasColumnName("TOTALCOSTE");

                entity.Property(e => e.Totalneto).HasColumnName("TOTALNETO");
            });

            modelBuilder.Entity<Tiquetsconsumo>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N, e.Numlinea, e.Codarticulo })
                    .HasName("TIQUETSCONSUMO_PK");

                entity.ToTable("TIQUETSCONSUMO");

                entity.HasIndex(e => e.Codarticulo)
                    .HasName("TIQUETSCONSUMO_CODARTICULO");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Consumo).HasColumnName("CONSUMO");

                entity.HasOne(d => d.Tiquetslin)
                    .WithMany(p => p.Tiquetsconsumos)
                    .HasForeignKey(d => new { d.Fo, d.Serie, d.Numero, d.N, d.Numlinea })
                    .HasConstraintName("TIQUETSCONSUMO_FK");
            });

            modelBuilder.Entity<Tiquetsfacturado>(entity =>
            {
                entity.HasKey(e => new { e.Numserie, e.Numfactura, e.N, e.Numserietiquet, e.Numtiquet, e.Ntiquet })
                    .HasName("TIQUETSFACTURADOS_PK");

                entity.ToTable("TIQUETSFACTURADOS");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numfactura).HasColumnName("NUMFACTURA");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numserietiquet)
                    .HasColumnName("NUMSERIETIQUET")
                    .HasMaxLength(4);

                entity.Property(e => e.Numtiquet).HasColumnName("NUMTIQUET");

                entity.Property(e => e.Ntiquet)
                    .HasColumnName("NTIQUET")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esdocabono).HasColumnName("ESDOCABONO");

                entity.HasOne(d => d.NNavigation)
                    .WithMany(p => p.Tiquetsfacturados)
                    .HasForeignKey(d => new { d.Numserie, d.Numfactura, d.N })
                    .HasConstraintName("TIQUETSFACTURADOS_FK");
            });

            modelBuilder.Entity<Tiquetslin>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("TIQUETSLIN_PK");

                entity.ToTable("TIQUETSLIN");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codformato).HasColumnName("CODFORMATO");

                entity.Property(e => e.Codmacro).HasColumnName("CODMACRO");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(45);

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Preciodefecto).HasColumnName("PRECIODEFECTO");

                entity.Property(e => e.Precioiva).HasColumnName("PRECIOIVA");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipo)
                    .HasColumnName("TIPO")
                    .HasMaxLength(2);

                entity.Property(e => e.Tipoiva).HasColumnName("TIPOIVA");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.HasOne(d => d.Ticketscab)
                    .WithMany(p => p.Tiquetslins)
                    .HasForeignKey(d => new { d.Fo, d.Serie, d.Numero, d.N })
                    .HasConstraintName("TICKETSLIN_FK");

                entity.HasOne(d => d.Tiquetscab)
                    .WithMany(p => p.Tiquetslins)
                    .HasForeignKey(d => new { d.Fo, d.Serie, d.Numero, d.N })
                    .HasConstraintName("TIQUETSLIN_FK");
            });

            modelBuilder.Entity<Tiquetsmodif>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N, e.Numlinea, e.Nummodif })
                    .HasName("TIQUETSMODIF_PK");

                entity.ToTable("TIQUETSMODIF");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Nummodif).HasColumnName("NUMMODIF");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codmodif).HasColumnName("CODMODIF");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(35);

                entity.Property(e => e.Incprecio).HasColumnName("INCPRECIO");

                entity.Property(e => e.Nivel).HasColumnName("NIVEL");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.HasOne(d => d.Tiquetslin)
                    .WithMany(p => p.Tiquetsmodifs)
                    .HasForeignKey(d => new { d.Fo, d.Serie, d.Numero, d.N, d.Numlinea })
                    .HasConstraintName("TIQUETSMODIF_FK");
            });

            modelBuilder.Entity<Tiquetspag>(entity =>
            {
                entity.HasKey(e => new { e.Fo, e.Serie, e.Numero, e.N, e.Numlinea })
                    .HasName("TIQUETSPAG_PK");

                entity.ToTable("TIQUETSPAG");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numlinea).HasColumnName("NUMLINEA");

                entity.Property(e => e.Beneficio).HasColumnName("BENEFICIO");

                entity.Property(e => e.Cambio).HasColumnName("CAMBIO");

                entity.Property(e => e.Cambio2).HasColumnName("CAMBIO2");

                entity.Property(e => e.Codformapago).HasColumnName("CODFORMAPAGO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechavencim)
                    .HasColumnName("FECHAVENCIM")
                    .HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importe2).HasColumnName("IMPORTE2");

                entity.Property(e => e.Pendiente).HasColumnName("PENDIENTE");

                entity.Property(e => e.Propina).HasColumnName("PROPINA");

                entity.HasOne(d => d.Ticketscab)
                    .WithMany(p => p.Tiquetspags)
                    .HasForeignKey(d => new { d.Fo, d.Serie, d.Numero, d.N })
                    .HasConstraintName("TICKETSPAG_FK");

                entity.HasOne(d => d.Tiquetscab)
                    .WithMany(p => p.Tiquetspags)
                    .HasForeignKey(d => new { d.Fo, d.Serie, d.Numero, d.N })
                    .HasConstraintName("TIQUETSPAG_FK");
            });

            modelBuilder.Entity<Torno>(entity =>
            {
                entity.HasKey(e => new { e.Idtorno, e.Idfront })
                    .HasName("TORNOS_PK");

                entity.ToTable("TORNOS");

                entity.Property(e => e.Idtorno).HasColumnName("IDTORNO");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(100);

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(15);

                entity.Property(e => e.Mac)
                    .HasColumnName("MAC")
                    .HasMaxLength(16);

                entity.Property(e => e.Puertolocal).HasColumnName("PUERTOLOCAL");

                entity.Property(e => e.Puertoremoto).HasColumnName("PUERTOREMOTO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Transporte>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("TRANSPORTES_PK");

                entity.ToTable("TRANSPORTES");

                entity.Property(e => e.Codigo)
                    .HasColumnName("CODIGO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Nif20)
                    .HasColumnName("NIF20")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombre)
                    .HasColumnName("NOMBRE")
                    .HasMaxLength(255);

                entity.Property(e => e.Pais)
                    .HasColumnName("PAIS")
                    .HasMaxLength(100);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Poperacional)
                    .HasColumnName("POPERACIONAL")
                    .HasMaxLength(15);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Regimfact)
                    .HasColumnName("REGIMFACT")
                    .HasMaxLength(1);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Traspasoscab>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Caja, e.Numero })
                    .HasName("TRASPASOSCAB_PK");

                entity.ToTable("TRASPASOSCAB");

                entity.HasIndex(e => new { e.Codalmacendestino, e.Recibido, e.Fecharecibido })
                    .HasName("TRASPASOSCAB_ALMDESTFECHAREC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Anulado)
                    .HasColumnName("ANULADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cajaanulado)
                    .HasColumnName("CAJAANULADO")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmacendestino)
                    .HasColumnName("CODALMACENDESTINO")
                    .HasMaxLength(3);

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Contabilizado)
                    .HasColumnName("CONTABILIZADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Cuentagastosexistencias)
                    .HasColumnName("CUENTAGASTOSEXISTENCIAS")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentagastosexistenciasdmn)
                    .HasColumnName("CUENTAGASTOSEXISTENCIASDMN")
                    .HasMaxLength(12);

                entity.Property(e => e.Descargado)
                    .HasColumnName("DESCARGADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Descmotivo)
                    .HasColumnName("DESCMOTIVO")
                    .HasMaxLength(100);

                entity.Property(e => e.Esajuste)
                    .HasColumnName("ESAJUSTE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esautomatico)
                    .HasColumnName("ESAUTOMATICO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Escontabilizable)
                    .HasColumnName("ESCONTABILIZABLE")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Esrecuento)
                    .HasColumnName("ESRECUENTO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Estransporte)
                    .HasColumnName("ESTRANSPORTE")
                    .HasMaxLength(1);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaanulado)
                    .HasColumnName("FECHAANULADO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnName("FECHACREACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fecharecibido)
                    .HasColumnName("FECHARECIBIDO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechatransporte)
                    .HasColumnName("FECHATRANSPORTE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idconceptoajuste).HasColumnName("IDCONCEPTOAJUSTE");

                entity.Property(e => e.Idconceptoajustedmn).HasColumnName("IDCONCEPTOAJUSTEDMN");

                entity.Property(e => e.Identificador)
                    .HasColumnName("IDENTIFICADOR")
                    .HasMaxLength(20);

                entity.Property(e => e.Idmotivo).HasColumnName("IDMOTIVO");

                entity.Property(e => e.Impresiones).HasColumnName("IMPRESIONES");

                entity.Property(e => e.Modificable)
                    .HasColumnName("MODIFICABLE")
                    .HasMaxLength(1);

                entity.Property(e => e.Numeroanulado).HasColumnName("NUMEROANULADO");

                entity.Property(e => e.Numfaccompra).HasColumnName("NUMFACCOMPRA");

                entity.Property(e => e.Numfacventa).HasColumnName("NUMFACVENTA");

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(100);

                entity.Property(e => e.Recibido)
                    .HasColumnName("RECIBIDO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Recibidoporcodvendedor)
                    .HasColumnName("RECIBIDOPORCODVENDEDOR")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Serieanulado)
                    .HasColumnName("SERIEANULADO")
                    .HasMaxLength(4);

                entity.Property(e => e.Seriecompra)
                    .HasColumnName("SERIECOMPRA")
                    .HasMaxLength(4);

                entity.Property(e => e.Serieventa)
                    .HasColumnName("SERIEVENTA")
                    .HasMaxLength(4);

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Totaldmn).HasColumnName("TOTALDMN");
            });

            modelBuilder.Entity<Traspasosfirma>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.Caja })
                    .HasName("TRASPASOSFIRMA_PK");

                entity.ToTable("TRASPASOSFIRMA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Caja)
                    .HasColumnName("CAJA")
                    .HasMaxLength(3);

                entity.Property(e => e.Atdoccodeid)
                    .HasColumnName("ATDOCCODEID")
                    .HasMaxLength(250);

                entity.Property(e => e.Claveprivada)
                    .HasColumnName("CLAVEPRIVADA")
                    .HasMaxLength(1200);

                entity.Property(e => e.Firma)
                    .HasColumnName("FIRMA")
                    .HasMaxLength(500);

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Versionfirma)
                    .HasColumnName("VERSIONFIRMA")
                    .HasMaxLength(10);

                entity.HasOne(d => d.Traspasoscab)
                    .WithMany(p => p.Traspasosfirmas)
                    .HasForeignKey(d => new { d.Serie, d.Caja, d.Numero })
                    .HasConstraintName("TRASPASOSFIRMA_FK");
            });

            modelBuilder.Entity<TskConfigmarca>(entity =>
            {
                entity.HasKey(e => e.Codmarca)
                    .HasName("TSK_CONFIGMARCAS_PK");

                entity.ToTable("TSK_CONFIGMARCAS");

                entity.Property(e => e.Codmarca)
                    .HasColumnName("CODMARCA")
                    .ValueGeneratedNever();

                entity.Property(e => e.CodcanjeAccesorios).HasColumnName("CODCANJE_ACCESORIOS");

                entity.Property(e => e.CodcanjeElectro).HasColumnName("CODCANJE_ELECTRO");

                entity.Property(e => e.CodcanjeMobiliario).HasColumnName("CODCANJE_MOBILIARIO");

                entity.Property(e => e.CodexpoAccesorios).HasColumnName("CODEXPO_ACCESORIOS");

                entity.Property(e => e.CodexpoElectro).HasColumnName("CODEXPO_ELECTRO");

                entity.Property(e => e.CodexpoMobiliario).HasColumnName("CODEXPO_MOBILIARIO");

                entity.Property(e => e.CodotrasAccesorios).HasColumnName("CODOTRAS_ACCESORIOS");

                entity.Property(e => e.CodotrasElectro).HasColumnName("CODOTRAS_ELECTRO");

                entity.Property(e => e.CodotrasMobiliario).HasColumnName("CODOTRAS_MOBILIARIO");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");
            });

            modelBuilder.Entity<Turno>(entity =>
            {
                entity.HasKey(e => e.Codturno)
                    .HasName("TURNOS_PK");

                entity.ToTable("TURNOS");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_TURNOSVERSION");

                entity.Property(e => e.Codturno)
                    .HasColumnName("CODTURNO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Configimpauto).HasColumnName("CONFIGIMPAUTO");

                entity.Property(e => e.Configimpautotelec).HasColumnName("CONFIGIMPAUTOTELEC");

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);

                entity.Property(e => e.Mostrarfamilias)
                    .HasColumnName("MOSTRARFAMILIAS")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Opciones)
                    .HasColumnName("OPCIONES")
                    .HasMaxLength(25);

                entity.Property(e => e.Tarifabarras).HasColumnName("TARIFABARRAS");

                entity.Property(e => e.Tarifadelivery).HasColumnName("TARIFADELIVERY");

                entity.Property(e => e.Tarifamesas).HasColumnName("TARIFAMESAS");

                entity.Property(e => e.Tarifavdirecta).HasColumnName("TARIFAVDIRECTA");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Turnosarticulo>(entity =>
            {
                entity.HasKey(e => new { e.Codarticulo, e.Codturno })
                    .HasName("TURNOSARTICULOS_PK");

                entity.ToTable("TURNOSARTICULOS");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Turnosarticulos)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("TURNOSARTICULOS_FK1");

                entity.HasOne(d => d.CodturnoNavigation)
                    .WithMany(p => p.Turnosarticulos)
                    .HasForeignKey(d => d.Codturno)
                    .HasConstraintName("TURNOSARTICULOS_FK2");
            });

            modelBuilder.Entity<Turnosarticulosdefecto>(entity =>
            {
                entity.HasKey(e => new { e.Codturno, e.Codarticulo })
                    .HasName("TURNOSARTICULOSDEFECTO_PK");

                entity.ToTable("TURNOSARTICULOSDEFECTO");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Uds).HasColumnName("UDS");

                entity.HasOne(d => d.CodarticuloNavigation)
                    .WithMany(p => p.Turnosarticulosdefectos)
                    .HasForeignKey(d => d.Codarticulo)
                    .HasConstraintName("TURNOSARTICULOSDEFECTO_FK1");

                entity.HasOne(d => d.CodturnoNavigation)
                    .WithMany(p => p.Turnosarticulosdefectos)
                    .HasForeignKey(d => d.Codturno)
                    .HasConstraintName("TURNOSARTICULOSDEFECTO_FK2");
            });

            modelBuilder.Entity<Turnosplan>(entity =>
            {
                entity.HasKey(e => e.Codturno);

                entity.ToTable("TURNOSPLAN");

                entity.Property(e => e.Codturno)
                    .HasColumnName("CODTURNO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colorfondo).HasColumnName("COLORFONDO");

                entity.Property(e => e.Colortexto).HasColumnName("COLORTEXTO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(30);

                entity.Property(e => e.Fin1)
                    .HasColumnName("FIN1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fin2)
                    .HasColumnName("FIN2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inicio1)
                    .HasColumnName("INICIO1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inicio2)
                    .HasColumnName("INICIO2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Turnosplanusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Id })
                    .HasName("TURNOSPLANUSUARIO_PK");

                entity.ToTable("TURNOSPLANUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Ultimasventa>(entity =>
            {
                entity.HasKey(e => new { e.Codcliente, e.N, e.Idx })
                    .HasName("ULTIMASVENTASPK");

                entity.ToTable("ULTIMASVENTAS");

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.N).HasMaxLength(1);

                entity.Property(e => e.Idx).HasColumnName("IDX");

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(40);

                entity.Property(e => e.Diasultventa).HasColumnName("DIASULTVENTA");

                entity.Property(e => e.Dto).HasColumnName("DTO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Precio).HasColumnName("PRECIO");

                entity.Property(e => e.Referencia)
                    .HasColumnName("REFERENCIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Req).HasColumnName("REQ");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.Unid1v).HasColumnName("UNID1V");

                entity.Property(e => e.Unid2v).HasColumnName("UNID2V");

                entity.Property(e => e.Unid3v).HasColumnName("UNID3V");

                entity.Property(e => e.Unid4v).HasColumnName("UNID4V");

                entity.Property(e => e.Unidadestotal).HasColumnName("UNIDADESTOTAL");
            });

            modelBuilder.Entity<Ultimosbloqueo>(entity =>
            {
                entity.HasKey(e => new { e.Idfront, e.Terminal });

                entity.ToTable("ULTIMOSBLOQUEOS");

                entity.Property(e => e.Idfront).HasColumnName("IDFRONT");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);

                entity.Property(e => e.Idbloqueo).HasColumnName("IDBLOQUEO");
            });

            modelBuilder.Entity<Urgenciasreparacion>(entity =>
            {
                entity.HasKey(e => e.Codurgenciasreparacion)
                    .HasName("URGENCIASREPARACION_PK");

                entity.ToTable("URGENCIASREPARACION");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_URGENCIASREPARACIONVERSION");

                entity.Property(e => e.Codurgenciasreparacion)
                    .HasColumnName("CODURGENCIASREPARACION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Dias)
                    .HasColumnName("DIAS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Urgenciareparacion)
                    .HasColumnName("URGENCIAREPARACION")
                    .HasMaxLength(35);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Usuarioslistascodigo>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Tipolista, e.Posicion })
                    .HasName("USUARIOSLISTASCODIGOS_PK");

                entity.ToTable("USUARIOSLISTASCODIGOS");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Tipolista).HasColumnName("TIPOLISTA");

                entity.Property(e => e.Posicion).HasColumnName("POSICION");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");
            });

            modelBuilder.Entity<Vacacionesempleado>(entity =>
            {
                entity.HasKey(e => new { e.Codempleado, e.Codvaclin })
                    .HasName("VACACIONESEMPLEADO_PK");

                entity.ToTable("VACACIONESEMPLEADO");

                entity.Property(e => e.Codempleado).HasColumnName("CODEMPLEADO");

                entity.Property(e => e.Codvaclin).HasColumnName("CODVACLIN");

                entity.Property(e => e.Codmotivo).HasColumnName("CODMOTIVO");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dias).HasColumnName("DIAS");

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fechasolicitud)
                    .HasColumnName("FECHASOLICITUD")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechavalidacion)
                    .HasColumnName("FECHAVALIDACION")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horas).HasColumnName("HORAS");

                entity.Property(e => e.Motivo)
                    .HasColumnName("MOTIVO")
                    .HasMaxLength(30);

                entity.Property(e => e.Validadopor).HasColumnName("VALIDADOPOR");
            });

            modelBuilder.Entity<Vacacionesempresa>(entity =>
            {
                entity.HasKey(e => new { e.Codempresa, e.Codvaclin })
                    .HasName("VACACIONESEMPRESA_PK");

                entity.ToTable("VACACIONESEMPRESA");

                entity.Property(e => e.Codempresa).HasColumnName("CODEMPRESA");

                entity.Property(e => e.Codvaclin).HasColumnName("CODVACLIN");

                entity.Property(e => e.Desde)
                    .HasColumnName("DESDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hasta)
                    .HasColumnName("HASTA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Motivo)
                    .HasColumnName("MOTIVO")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Vacacionesmotivo>(entity =>
            {
                entity.HasKey(e => e.Codmotivo);

                entity.ToTable("VACACIONESMOTIVO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_VACACIONESMOTIVOVERSION");

                entity.Property(e => e.Codmotivo)
                    .HasColumnName("CODMOTIVO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasColumnName("MOTIVO")
                    .HasMaxLength(30);

                entity.Property(e => e.Pagado).HasColumnName("PAGADO");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Vehiculospropio>(entity =>
            {
                entity.HasKey(e => e.Codvehiculo)
                    .HasName("VEHICULOSPROPIOS_PK");

                entity.ToTable("VEHICULOSPROPIOS");

                entity.Property(e => e.Codvehiculo)
                    .HasColumnName("CODVEHICULO")
                    .ValueGeneratedNever();

                entity.Property(e => e.Nombrevehiculo)
                    .HasColumnName("NOMBREVEHICULO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Vencimfpago>(entity =>
            {
                entity.HasKey(e => new { e.Codformapago, e.Numvencim })
                    .HasName("VENCIMFPAGO_PK");

                entity.ToTable("VENCIMFPAGO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_VENCIMFPAGOVERSION");

                entity.Property(e => e.Codformapago)
                    .HasColumnName("CODFORMAPAGO")
                    .HasMaxLength(6);

                entity.Property(e => e.Numvencim).HasColumnName("NUMVENCIM");

                entity.Property(e => e.Codtipopago)
                    .HasColumnName("CODTIPOPAGO")
                    .HasMaxLength(2);

                entity.Property(e => e.Cuentacobro)
                    .HasColumnName("CUENTACOBRO")
                    .HasMaxLength(12);

                entity.Property(e => e.Cuentapago)
                    .HasColumnName("CUENTAPAGO")
                    .HasMaxLength(12);

                entity.Property(e => e.Dias).HasColumnName("DIAS");

                entity.Property(e => e.Gentesoreria)
                    .HasColumnName("GENTESORERIA")
                    .HasMaxLength(15);

                entity.Property(e => e.Porcentaje).HasColumnName("PORCENTAJE");

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodformapagoNavigation)
                    .WithMany(p => p.Vencimfpagos)
                    .HasForeignKey(d => d.Codformapago)
                    .HasConstraintName("VENCIMFPAGO_FK2");

                entity.HasOne(d => d.CodtipopagoNavigation)
                    .WithMany(p => p.Vencimfpagos)
                    .HasForeignKey(d => d.Codtipopago)
                    .HasConstraintName("VENCIMFPAGO_FK");
            });

            modelBuilder.Entity<Vendedore>(entity =>
            {
                entity.HasKey(e => e.Codvendedor)
                    .HasName("VENDEDORES_PK");

                entity.ToTable("VENDEDORES");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_VENDEDORESVERSION");

                entity.Property(e => e.Codvendedor)
                    .HasColumnName("CODVENDEDOR")
                    .ValueGeneratedNever();

                entity.Property(e => e.Activo)
                    .HasColumnName("ACTIVO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Bloqueado)
                    .HasColumnName("BLOQUEADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Centrocoste)
                    .HasColumnName("CENTROCOSTE")
                    .HasMaxLength(6);

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Codbanco)
                    .HasColumnName("CODBANCO")
                    .HasMaxLength(4);

                entity.Property(e => e.Codcontable)
                    .HasColumnName("CODCONTABLE")
                    .HasMaxLength(12);

                entity.Property(e => e.Codigoiban)
                    .HasColumnName("CODIGOIBAN")
                    .HasMaxLength(100);

                entity.Property(e => e.Codigorf).HasColumnName("CODIGORF");

                entity.Property(e => e.Codpostal)
                    .HasColumnName("CODPOSTAL")
                    .HasMaxLength(8);

                entity.Property(e => e.Codpostalbanco)
                    .HasColumnName("CODPOSTALBANCO")
                    .HasMaxLength(8);

                entity.Property(e => e.Codswift)
                    .HasColumnName("CODSWIFT")
                    .HasMaxLength(15);

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.Comision).HasColumnName("COMISION");

                entity.Property(e => e.Costehora).HasColumnName("COSTEHORA");

                entity.Property(e => e.Costehoraextra).HasColumnName("COSTEHORAEXTRA");

                entity.Property(e => e.Descatalogado)
                    .HasColumnName("DESCATALOGADO")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Digcontrolbanco)
                    .HasColumnName("DIGCONTROLBANCO")
                    .HasMaxLength(2);

                entity.Property(e => e.Direccion)
                    .HasColumnName("DIRECCION")
                    .HasMaxLength(255);

                entity.Property(e => e.Direccionbanco)
                    .HasColumnName("DIRECCIONBANCO")
                    .HasMaxLength(20);

                entity.Property(e => e.Dni)
                    .HasColumnName("DNI")
                    .HasMaxLength(18);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(255);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(15);

                entity.Property(e => e.Fechacaducidadpass)
                    .HasColumnName("FECHACADUCIDADPASS")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechaentrada)
                    .HasColumnName("FECHAENTRADA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechanacim)
                    .HasColumnName("FECHANACIM")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fijo).HasColumnName("FIJO");

                entity.Property(e => e.Foto)
                    .HasColumnName("FOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.Property(e => e.Iva).HasColumnName("IVA");

                entity.Property(e => e.Lugarnacim)
                    .HasColumnName("LUGARNACIM")
                    .HasMaxLength(25);

                entity.Property(e => e.Mobil)
                    .HasColumnName("MOBIL")
                    .HasMaxLength(15);

                entity.Property(e => e.Newpassentrada)
                    .HasColumnName("NEWPASSENTRADA")
                    .HasMaxLength(30);

                entity.Property(e => e.Newpassregistro)
                    .HasColumnName("NEWPASSREGISTRO")
                    .HasMaxLength(30);

                entity.Property(e => e.Nombrebanco)
                    .HasColumnName("NOMBREBANCO")
                    .HasMaxLength(20);

                entity.Property(e => e.Nombrecorto)
                    .HasColumnName("NOMBRECORTO")
                    .HasMaxLength(10);

                entity.Property(e => e.Nomvendedor)
                    .HasColumnName("NOMVENDEDOR")
                    .HasMaxLength(255);

                entity.Property(e => e.Numcuenta)
                    .HasColumnName("NUMCUENTA")
                    .HasMaxLength(10);

                entity.Property(e => e.Numssocial)
                    .HasColumnName("NUMSSOCIAL")
                    .HasMaxLength(18);

                entity.Property(e => e.Numsucursal)
                    .HasColumnName("NUMSUCURSAL")
                    .HasMaxLength(4);

                entity.Property(e => e.Observaciones)
                    .HasColumnName("OBSERVACIONES")
                    .HasColumnType("ntext");

                entity.Property(e => e.Passentrada)
                    .HasColumnName("PASSENTRADA")
                    .HasMaxLength(15);

                entity.Property(e => e.Passregistro)
                    .HasColumnName("PASSREGISTRO")
                    .HasMaxLength(15);

                entity.Property(e => e.Passwordweb)
                    .HasColumnName("PASSWORDWEB")
                    .HasMaxLength(8);

                entity.Property(e => e.Poblacion)
                    .HasColumnName("POBLACION")
                    .HasMaxLength(100);

                entity.Property(e => e.Poblacionbanco)
                    .HasColumnName("POBLACIONBANCO")
                    .HasMaxLength(20);

                entity.Property(e => e.Provincia)
                    .HasColumnName("PROVINCIA")
                    .HasMaxLength(100);

                entity.Property(e => e.Retencion).HasColumnName("RETENCION");

                entity.Property(e => e.Serienomina)
                    .HasColumnName("SERIENOMINA")
                    .HasMaxLength(4);

                entity.Property(e => e.Suscepsustitucion).HasColumnName("SUSCEPSUSTITUCION");

                entity.Property(e => e.Talla)
                    .IsRequired()
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Telefono)
                    .HasColumnName("TELEFONO")
                    .HasMaxLength(15);

                entity.Property(e => e.Tipoempleado).HasColumnName("TIPOEMPLEADO");

                entity.Property(e => e.Tipousuario).HasColumnName("TIPOUSUARIO");

                entity.Property(e => e.Usuariocentralita)
                    .HasColumnName("USUARIOCENTRALITA")
                    .HasMaxLength(16);

                entity.Property(e => e.Usuarioweb)
                    .HasColumnName("USUARIOWEB")
                    .HasMaxLength(15);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Vendedorescontrato>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Codvclin });

                entity.ToTable("VENDEDORESCONTRATO");

                entity.HasIndex(e => e.Version)
                    .HasName("IDX_VENDEDORESCONTRATOVERSION");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codvclin).HasColumnName("CODVCLIN");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codcategoria)
                    .HasColumnName("CODCATEGORIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codcontrato).HasColumnName("CODCONTRATO");

                entity.Property(e => e.Fechafin)
                    .HasColumnName("FECHAFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fechainicio)
                    .HasColumnName("FECHAINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horasdia).HasColumnName("HORASDIA");

                entity.Property(e => e.Horassemana).HasColumnName("HORASSEMANA");

                entity.Property(e => e.Version)
                    .HasColumnName("VERSION")
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Vendedoresdisponibilidad>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Coddia });

                entity.ToTable("VENDEDORESDISPONIBILIDAD");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Coddia).HasColumnName("CODDIA");

                entity.Property(e => e.Disponible).HasColumnName("DISPONIBLE");

                entity.Property(e => e.Fin)
                    .HasColumnName("FIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inicio)
                    .HasColumnName("INICIO")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Vendedoreshorario>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Codalmacen, e.Coddia, e.Inicio })
                    .HasName("PK_VENDEDORESHORARIO_1");

                entity.ToTable("VENDEDORESHORARIO");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Coddia).HasColumnName("CODDIA");

                entity.Property(e => e.Inicio)
                    .HasColumnName("INICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fin)
                    .HasColumnName("FIN")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Vendedoreshotel>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Idhotel })
                    .HasName("VENDEDORESHOTEL_PK");

                entity.ToTable("VENDEDORESHOTEL");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Idhotel).HasColumnName("IDHOTEL");

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithMany(p => p.Vendedoreshotels)
                    .HasForeignKey(d => d.Codvendedor)
                    .HasConstraintName("VENDEDORESHOTEL_FK");
            });

            modelBuilder.Entity<Vendedoresplan>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Codalmacen, e.Fecha, e.Inicio });

                entity.ToTable("VENDEDORESPLAN");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inicio)
                    .HasColumnName("INICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codcategoria)
                    .HasColumnName("CODCATEGORIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");

                entity.Property(e => e.Fin)
                    .HasColumnName("FIN")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<VendedoresplanE>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Codalmacen, e.Fecha, e.Planinicio, e.Realinicio, e.Inciinicio });

                entity.ToTable("VENDEDORESPLAN_ES");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Planinicio)
                    .HasColumnName("PLANINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Realinicio)
                    .HasColumnName("REALINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inciinicio)
                    .HasColumnName("INCIINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Borrar).HasColumnName("BORRAR");

                entity.Property(e => e.Codcategoria)
                    .HasColumnName("CODCATEGORIA")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Codpermiso).HasColumnName("CODPERMISO");

                entity.Property(e => e.Codtipoincidencia).HasColumnName("CODTIPOINCIDENCIA");

                entity.Property(e => e.Diferencianeg).HasColumnName("DIFERENCIANEG");

                entity.Property(e => e.Diferenciapos).HasColumnName("DIFERENCIAPOS");

                entity.Property(e => e.Incifin)
                    .HasColumnName("INCIFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Incihoras).HasColumnName("INCIHORAS");

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasColumnName("OBSERVACIONES")
                    .HasMaxLength(255);

                entity.Property(e => e.Planfin)
                    .HasColumnName("PLANFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Planhoras).HasColumnName("PLANHORAS");

                entity.Property(e => e.Realfin)
                    .HasColumnName("REALFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Realhoras).HasColumnName("REALHORAS");

                entity.Property(e => e.Repetido).HasColumnName("REPETIDO");
            });

            modelBuilder.Entity<Vendedoresplanincidencium>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Codalmacen, e.Fecha, e.Codtipo, e.Inicio, e.Dispinicio });

                entity.ToTable("VENDEDORESPLANINCIDENCIA");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codtipo).HasColumnName("CODTIPO");

                entity.Property(e => e.Inicio)
                    .HasColumnName("INICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dispinicio)
                    .HasColumnName("DISPINICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Aceptada).HasColumnName("ACEPTADA");

                entity.Property(e => e.Dispfin)
                    .HasColumnName("DISPFIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fin)
                    .HasColumnName("FIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Horas).HasColumnName("HORAS");

                entity.Property(e => e.Motivo)
                    .HasColumnName("MOTIVO")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Vendedoresterminal>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Terminal })
                    .HasName("VENDEDORESTERMINAL_PK");

                entity.ToTable("VENDEDORESTERMINAL");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(40);

                entity.HasOne(d => d.CodvendedorNavigation)
                    .WithMany(p => p.Vendedoresterminals)
                    .HasForeignKey(d => d.Codvendedor)
                    .HasConstraintName("VENDEDORES_VENDEDORESTERMINAL");
            });

            modelBuilder.Entity<Vendedoresturnosplan>(entity =>
            {
                entity.HasKey(e => new { e.Codvendedor, e.Codalmacen, e.Fecha });

                entity.ToTable("VENDEDORESTURNOSPLAN");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Codturno).HasColumnName("CODTURNO");
            });

            modelBuilder.Entity<Vendedoresusuario>(entity =>
            {
                entity.HasKey(e => new { e.Codusuario, e.Id })
                    .HasName("VENDEDORESUSUARIO_PK");

                entity.ToTable("VENDEDORESUSUARIO");

                entity.Property(e => e.Codusuario).HasColumnName("CODUSUARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Visibilidad).HasColumnName("VISIBILIDAD");
            });

            modelBuilder.Entity<Ventasacumulada>(entity =>
            {
                entity.HasKey(e => new { e.Anyo, e.Mes, e.Numserie, e.Codcliente, e.Codvendedor, e.Codalmacen, e.Codarticulo, e.Talla, e.Color, e.N, e.Codmoneda })
                    .HasName("VENTASACUMULADAS_PK");

                entity.ToTable("VENTASACUMULADAS");

                entity.HasIndex(e => e.Anyomes)
                    .HasName("VENTASACUMULADAS_ANYOMES");

                entity.HasIndex(e => e.Codcliente)
                    .HasName("VENTASACUMULADAS_CLIENTE");

                entity.Property(e => e.Anyo).HasColumnName("ANYO");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.Numserie)
                    .HasColumnName("NUMSERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Codcliente).HasColumnName("CODCLIENTE");

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Codalmacen)
                    .HasColumnName("CODALMACEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codarticulo).HasColumnName("CODARTICULO");

                entity.Property(e => e.Talla)
                    .HasColumnName("TALLA")
                    .HasMaxLength(10);

                entity.Property(e => e.Color)
                    .HasColumnName("COLOR")
                    .HasMaxLength(10);

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Codmoneda).HasColumnName("CODMONEDA");

                entity.Property(e => e.Anyomes).HasColumnName("ANYOMES");

                entity.Property(e => e.Coste).HasColumnName("COSTE");

                entity.Property(e => e.Costedoc).HasColumnName("COSTEDOC");

                entity.Property(e => e.Costeiva).HasColumnName("COSTEIVA");

                entity.Property(e => e.Costeivadoc).HasColumnName("COSTEIVADOC");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Importado)
                    .HasColumnName("IMPORTADO")
                    .HasMaxLength(1);

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Importedoc).HasColumnName("IMPORTEDOC");

                entity.Property(e => e.Importeiva).HasColumnName("IMPORTEIVA");

                entity.Property(e => e.Importeivadoc).HasColumnName("IMPORTEIVADOC");

                entity.Property(e => e.Importepromocion).HasColumnName("IMPORTEPROMOCION");

                entity.Property(e => e.Importepromocioniva).HasColumnName("IMPORTEPROMOCIONIVA");

                entity.Property(e => e.Udmedida2).HasColumnName("UDMEDIDA2");

                entity.Property(e => e.Unidades).HasColumnName("UNIDADES");

                entity.Property(e => e.Unidadesalternativas).HasColumnName("UNIDADESALTERNATIVAS");
            });

            modelBuilder.Entity<Ventascashdro>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("VENTASCASHDRO_PK");

                entity.ToTable("VENTASCASHDRO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Coddiseny).HasColumnName("CODDISENY");

                entity.Property(e => e.Enlace)
                    .HasColumnName("ENLACE")
                    .HasMaxLength(255);

                entity.Property(e => e.Estado).HasColumnName("ESTADO");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idtipodoc).HasColumnName("IDTIPODOC");

                entity.Property(e => e.Impresora)
                    .HasColumnName("IMPRESORA")
                    .HasMaxLength(255);

                entity.Property(e => e.Imprimir).HasColumnName("IMPRIMIR");

                entity.Property(e => e.Tarjeta).HasColumnName("TARJETA");

                entity.Property(e => e.Ticket).HasColumnName("TICKET");

                entity.Property(e => e.Tipodoc).HasColumnName("TIPODOC");

                entity.Property(e => e.Tipodocimp).HasColumnName("TIPODOCIMP");
            });

            modelBuilder.Entity<Ventascashdroanticipo>(entity =>
            {
                entity.HasKey(e => new { e.OrigenT, e.TipodocumentoT, e.SerieT, e.NumeroT, e.NT })
                    .HasName("VENTASCASHDROANTICIPOS_PK");

                entity.ToTable("VENTASCASHDROANTICIPOS");

                entity.Property(e => e.OrigenT)
                    .HasColumnName("ORIGEN_T")
                    .HasMaxLength(1);

                entity.Property(e => e.TipodocumentoT)
                    .HasColumnName("TIPODOCUMENTO_T")
                    .HasMaxLength(1);

                entity.Property(e => e.SerieT)
                    .HasColumnName("SERIE_T")
                    .HasMaxLength(4);

                entity.Property(e => e.NumeroT).HasColumnName("NUMERO_T");

                entity.Property(e => e.NT)
                    .HasColumnName("N_T")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Enlace)
                    .HasColumnName("ENLACE")
                    .HasMaxLength(255);

                entity.Property(e => e.N)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.PosicionT).HasColumnName("POSICION_T");

                entity.Property(e => e.Remoto).HasColumnName("REMOTO");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Ventascashdrotesorerium>(entity =>
            {
                entity.HasKey(e => new { e.Serie, e.Numero, e.N })
                    .HasName("VENTASCASHDROTESORERIA_PK");

                entity.ToTable("VENTASCASHDROTESORERIA");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Enlace)
                    .HasColumnName("ENLACE")
                    .HasMaxLength(255);

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");
            });

            modelBuilder.Entity<Ventastef>(entity =>
            {
                entity.HasKey(e => new { e.Idtipodoc, e.Serie, e.Numero, e.N, e.Terminal })
                    .HasName("VENTASTEFS_PK");

                entity.ToTable("VENTASTEFS");

                entity.Property(e => e.Idtipodoc).HasColumnName("IDTIPODOC");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.N)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Terminal)
                    .HasColumnName("TERMINAL")
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<biz.bd2.Entities.Version>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VERSION");

                entity.Property(e => e.Version1).HasColumnName("VERSION");

                entity.Property(e => e.Versionbuild).HasColumnName("VERSIONBUILD");
            });

            modelBuilder.Entity<Visibilidadcliente>(entity =>
            {
                entity.HasKey(e => e.Codvisible);

                entity.ToTable("VISIBILIDADCLIENTES");

                entity.Property(e => e.Codvisible)
                    .HasColumnName("CODVISIBLE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Visibilidadproveedore>(entity =>
            {
                entity.HasKey(e => e.Codvisible);

                entity.ToTable("VISIBILIDADPROVEEDORES");

                entity.Property(e => e.Codvisible)
                    .HasColumnName("CODVISIBLE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasColumnName("DESCRIPCION")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WbCubosAccount>(entity =>
            {
                entity.ToTable("WbCubosAccount");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_03b8e179Fb2546dfB84aA67e61553598>(entity =>
            {
                entity.ToTable("{03B8E179-FB25-46DF-B84A-A67E61553598}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_0551e2bf40ab4fd2Ad4eEe5426d20324>(entity =>
            {
                entity.ToTable("{0551E2BF-40AB-4FD2-AD4E-EE5426D20324}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_09e2a246D3c8487cBc7a91b2ae83ec11>(entity =>
            {
                entity.ToTable("{09E2A246-D3C8-487C-BC7A-91B2AE83EC11}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_192696bbB9ba464f872bD13c07ceb840>(entity =>
            {
                entity.ToTable("{192696BB-B9BA-464F-872B-D13C07CEB840}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_1a70b218Cb88441aBb258db47975eea3>(entity =>
            {
                entity.ToTable("{1A70B218-CB88-441A-BB25-8DB47975EEA3}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_247f23f6137c4b99B6a0008d7da298cd>(entity =>
            {
                entity.ToTable("{247F23F6-137C-4B99-B6A0-008D7DA298CD}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_2df861897877421e81024dfca62a0349>(entity =>
            {
                entity.ToTable("{2DF86189-7877-421E-8102-4DFCA62A0349}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_2e009aa1C86743e196c8B81fcd819b3f>(entity =>
            {
                entity.ToTable("{2E009AA1-C867-43E1-96C8-B81FCD819B3F}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_3faf31c774294fd2A36e9dc5c3091643>(entity =>
            {
                entity.ToTable("{3FAF31C7-7429-4FD2-A36E-9DC5C3091643}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_3fb3617bD0394ef38dae6059ea707fd6>(entity =>
            {
                entity.ToTable("{3FB3617B-D039-4EF3-8DAE-6059EA707FD6}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_4b6ac3d0C6de4220A8c4F36d8ece7023>(entity =>
            {
                entity.ToTable("{4B6AC3D0-C6DE-4220-A8C4-F36D8ECE7023}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_4c87c25a20894eb086d07ed9544640d2>(entity =>
            {
                entity.ToTable("{4C87C25A-2089-4EB0-86D0-7ED9544640D2}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_62c72319Eb6c4f33B415A6cb2b387d64>(entity =>
            {
                entity.ToTable("{62C72319-EB6C-4F33-B415-A6CB2B387D64}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_64b9d3a644494bde9664Fabeb4631e28>(entity =>
            {
                entity.ToTable("{64B9D3A6-4449-4BDE-9664-FABEB4631E28}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_6a3873ae69474a7f92c60aaaaf6e3fb2>(entity =>
            {
                entity.ToTable("{6A3873AE-6947-4A7F-92C6-0AAAAF6E3FB2}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_6af8693b9a074ca890c9Cc6eb1e11e20>(entity =>
            {
                entity.ToTable("{6AF8693B-9A07-4CA8-90C9-CC6EB1E11E20}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_6b0f92f3C2d341bfBc72Bc0773af6e6a>(entity =>
            {
                entity.ToTable("{6B0F92F3-C2D3-41BF-BC72-BC0773AF6E6A}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_6ddd884576dd4a6fAb5514af5ca140d0>(entity =>
            {
                entity.ToTable("{6DDD8845-76DD-4A6F-AB55-14AF5CA140D0}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_73099b2cF0d846e8A9e19ff54714d478>(entity =>
            {
                entity.ToTable("{73099B2C-F0D8-46E8-A9E1-9FF54714D478}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_75b8a23c8d654a9e805578b62ac0a08a>(entity =>
            {
                entity.ToTable("{75B8A23C-8D65-4A9E-8055-78B62AC0A08A}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_897fbcf1Db6b4b7f97ba904d4d552d34>(entity =>
            {
                entity.ToTable("{897FBCF1-DB6B-4B7F-97BA-904D4D552D34}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_8b1b49b4Fd6e40ba95d4Fca3a047fe0d>(entity =>
            {
                entity.ToTable("{8B1B49B4-FD6E-40BA-95D4-FCA3A047FE0D}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_946315b2531f4aacAb64F894069b2e1b>(entity =>
            {
                entity.ToTable("{946315B2-531F-4AAC-AB64-F894069B2E1B}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<_9d21019f98614e98B79403d7de2acb70>(entity =>
            {
                entity.ToTable("{9D21019F-9861-4E98-B794-03D7DE2ACB70}");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtFaltan)
                    .HasColumnName("_ART_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtOk)
                    .HasColumnName("_ART_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcfaltan)
                    .HasColumnName("_ART_PORCFALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcok)
                    .HasColumnName("_ART_PORCOK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsincontar)
                    .HasColumnName("_ART_PORCSINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtPorcsobran)
                    .HasColumnName("_ART_PORCSOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSincontar)
                    .HasColumnName("_ART_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSinstock)
                    .HasColumnName("_ART_SINSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtSobran)
                    .HasColumnName("_ART_SOBRAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtTotal)
                    .HasColumnName("_ART_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ArtUtil)
                    .HasColumnName("_ART_UTIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checked).HasColumnName("CHECKED");

                entity.Property(e => e.Codalmacenorigen)
                    .HasColumnName("CODALMACENORIGEN")
                    .HasMaxLength(3);

                entity.Property(e => e.Codvendedor).HasColumnName("CODVENDEDOR");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnName("FECHA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idincidencia)
                    .HasColumnName("IDINCIDENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombrealmacen)
                    .HasColumnName("NOMBREALMACEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Serie)
                    .HasColumnName("SERIE")
                    .HasMaxLength(4);

                entity.Property(e => e.Tipovaloracion)
                    .HasColumnName("TIPOVALORACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipovaloraciondmn)
                    .HasColumnName("TIPOVALORACIONDMN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndFaltan)
                    .HasColumnName("_UND_FALTAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndOk)
                    .HasColumnName("_UND_OK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSincontar)
                    .HasColumnName("_UND_SINCONTAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UndSobran)
                    .HasColumnName("_UND_SOBRAN")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TEstatusPedidosEntrega>(entity =>
            {
                entity.ToTable("T_ESTATUS_PEDIDOS_ENTREGAS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ESTATUS");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TIPO");
            });

            modelBuilder.Entity<TFotosPedidosEntrega>(entity =>
            {
                entity.ToTable("T_FOTOS_PEDIDOS_ENTREGAS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Foto)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("FOTO");

                entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TIPO");

                entity.HasOne(d => d.IdPedidoNavigation)
                    .WithMany(p => p.TFotosPedidosEntregas)
                    .HasForeignKey(d => d.IdPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PEDIDO_ENTREGAS");
            });

            modelBuilder.Entity<TPedidosEntrega>(entity =>
            {
                entity.ToTable("T_PEDIDOS_ENTREGAS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comentarios)
                    .HasMaxLength(500)
                    .HasColumnName("COMENTARIOS");

                entity.Property(e => e.Estatus).HasColumnName("ESTATUS");

                entity.Property(e => e.FechaReal)
                    .HasColumnType("datetime")
                    .HasColumnName("FECHA_REAL");

                entity.Property(e => e.FechaProg)
                    .HasColumnType("datetime")
                    .HasColumnName("FECHA_PROG");

                entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

                entity.Property(e => e.IdSucursal).HasColumnName("ID_SUCURSAL");

                entity.HasOne(d => d.EstatusNavigation)
                    .WithMany(p => p.TPedidosEntregaEstatusNavigations)
                    .HasForeignKey(d => d.Estatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ESTATUS");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
